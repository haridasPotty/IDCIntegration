// ###########################################
// Unified Data Collector Request Format
// Version 1.0
// ###########################################

// Google Protocol Buffers Version 3.

syntax = "proto3";

import "signal_source_definition.proto";

// Package name.
package logical_expression;

// Defines constituents for boolean expressions which consists of an operator applied on multiple operands.
//
// The operands may include boolean expressions, arithmetic expressions as well as sensor, map, or system parameters.
message LogicalExpression {

  // Negates the overall boolean result.
  //
  // If set to TRUE, the boolean result changes from TRUE to FALSE and respectively from FALSE to TRUE. If not set, the boolean result is not negated.
  bool not = 1;

  // Logical boolean operator for all elements of the field operand.
  //
  // The usage of the operator follows the rules:
  // - If the field operand has more than one element, UNKNOWN_LOGICAL_OPERATOR shall not be used. If the field operand has exactly one element, then the operand is not evaluated.
  // - Applying the operator AND to a list of elements [A, B, C] returns TRUE if every element is TRUE and FALSE otherwise. Evaluation of the operator can return early with FALSE for the first element being FALSE.
  // - Applying the operator OR to a list of elements [A, B, C] returns FALSE if every element is FALSE and TRUE otherwise. Evaluation of the operator can return early with TRUE for the first element being TRUE.
  LogicalOperator operator = 2;

  // Operand.
  //
  // If no operand is set, the logical expression is FALSE by definition.
  repeated LogicalOperand operand = 3;

  // Proprietary extension.
}


  // Logical boolean operator.
  enum LogicalOperator {
    // Unknown.
    UNKNOWN_LOGICAL_OPERATOR = 0;
    // Conjunction operator logical AND.
    AND = 1;
    // Conjunction operator logical OR.
    OR = 2;
  }
  
   // Operation type.
	enum OperationType {
	  // Unknown.
	  UNKNOWN_OPERATION_TYPE = 0;
	  // No operation.
	  //
	  // The value of first_operand is returned.
	  NO_OPERATION = 1;
	  // Addition operation. Only defined if both operands are of type int64.
	  //
	  // The value of (first_operand + second_operand) is returned.
	  SUM = 2;
	  // Subtraction operation. Only defined if both operands are of type int64.
	  //
	  // The value of (first_operand - second_operand) is returned.
	  SUBTRACTION = 3;
	  // Multiplication operation. Only defined if both operands are of type int64.
	  //
	  // The value of (first_operand * second_operand) is returned.
	  MULTIPLICATION = 4;
	  // Division operation. Only defined if both operands are of type int64.
	  //
	  // The value of (first_operand / second_operand) is returned.
	  DIVISION = 5;
	}
	  
 // Comparison operator type.
  enum ComparisonOperatorType {
	// Unknown.
	UNKNOWN_COMPARISON_OPERATOR_TYPE = 0;
	// Returns TRUE if first_operation is equal to second_operation.
	EQUAL = 1;
	// Returns TRUE if first_operation is not equal to second_operation.
	NOT_EQUAL = 2;
	// Returns TRUE if first_operation is greater than second_operation. Only defined if both operations are of type int64.
	GREATER = 3;
	// Return TRUE if first_operation is less than second_operation. Only defined if both operations are of type int64.
	LESS = 4;
	// Returns TRUE if first_operation is greater than or equal to second_operation. Only defined if both operations are of type int64.
	GREATER_OR_EQUAL = 5;
	// Returns TRUE if first_operation is less than or equal to second_operation. Only defined if both operations are of type int64.
	LESS_OR_EQUAL = 6;
  }
  
  
  // Logical operand with a boolean result of TRUE or FALSE, resulting either out of a comparison expression or a boolean function.
  message LogicalOperand {
	  

    // Negates the overall boolean result.
    //
    // If field is set to TRUE, the result of the boolean expression or function changes from TRUE to FALSE and respectively from FALSE to TRUE. If not set, the result is not negated.
    bool not = 1;

    oneof expression_function 
	{
		// Comparison expression with a boolean result of TRUE or FALSE.
		ComparisonExpression comparison_expression = 2;

		TransitionExpression transition_expression = 3;
    }
  }



	 // Operand as part of an operation, which can be either a constant value or a field value of a SENSORIS event.
message Operand {
	  oneof operand {
		// Int64 value.
		int64 int64_value = 1;

		// Boolean value.
		bool bool_value = 2;

		// String value.
		string string_value = 3;

		// Bytes value.
		bytes bytes_value = 4;
		
		signal_source_definition.DefaultSource default_signal = 5;
		signal_source_definition.CanSource can_signal = 6;
		signal_source_definition.LinSource lin_signal = 7;
		signal_source_definition.EthernetSource ethernet_signal = 8;
		signal_source_definition.NetworkSource network_signal = 9;
		signal_source_definition.InternalSource internal_signal = 10;
		signal_source_definition.ProcessingToolboxSource processing_toolbox_signal = 11;
		signal_source_definition.ThriftmeSource thriftme_signal = 12;
		
		
	  }
}
		
 
	  
    // Comparison expression with a boolean result of TRUE or FALSE.
    //
    // Only data types that are comparable can be evaluated:
    // - int64 to int64 including the interpretation of exponent usage, also used for enum value to enum value
    // - bool to bool
    // - string to string
    // - bytes to bytes
    //
    // @example Vehicle speed > 2 [m/s].
    message ComparisonExpression {
      // Negates the overall boolean result.
      //
      // If field is set to TRUE, the result of the boolean expression changes from TRUE to FALSE and respectively from FALSE to TRUE. If not set, the result is not negated.
      bool not = 1;

      // Left side value of the boolean expression.
      Operation first_operation = 2;

      // Operator for comparison of the two boolean expressions.
      ComparisonOperatorType operator = 3;

      // Right side value of the boolean expression.
      Operation second_operation = 4;
    }
	
	      // Operation.
message Operation {        

        // First operand.
        Operand first_operand = 1;

        // Operator.
        //
        // If the operator is a binary operator, then the field second_operand shall be set.
        OperationType operator = 2;

        // Second operand.
        Operand second_operand = 3;
      }

message TransitionExpression
	{
		
		//E,g : if signal ,odometer_xx has to be checked for transition from [ =4 to <=6 ]
		//operand_indentifier::signal_definition::almasource::signal_name = odometer_xx
		// from_operator = EQUAL , from_value::int64_value_and_exponent = 4,
		// to_operator = LESS_OR_EQUAL, to_value::int64_value = 6
		
		//Unique representation of signal value to be checked eg : odometer_signal
		Operand signal_identifier = 1;
		
		ComparisonOperatorType from_operator = 2;
		
		Operand from_value = 3;
		
		ComparisonOperatorType to_operator = 4;
		
		Operand to_value = 5;
		
	}
