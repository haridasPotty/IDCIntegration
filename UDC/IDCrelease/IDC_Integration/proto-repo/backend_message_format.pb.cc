// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_message_format.proto

#include "backend_message_format.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AckMessage_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CompositeLocationArea_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataCollectionJobsListMessage_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoCircleArea_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoCoordinateArea_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoHashMessage_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoRectangleArea_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeohashStreamArea_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDataCollectionJobsMessage_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStaticConfigMessage_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitiateGeohashStreamMessage_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Job_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatistics_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatus_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobStatusMessage_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusReason_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusRequestMessage_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobWarnings_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StaticConfigMessage_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SupportedSourceVersion_backend_5fmessage_5fformat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DataCollectionJob_data_5fcollection_5fconfiguration_5frequest_2eproto;
class MessageHeaderDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageHeader> _instance;
} _MessageHeader_default_instance_;
class MessageBodyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageBody> _instance;
  const ::JobStatusMessage* job_status_;
  const ::JobStatusRequestMessage* job_status_request_;
  const ::InitiateGeohashStreamMessage* initiate_geohash_stream_;
  const ::GeoHashMessage* geo_hash_;
  const ::DataCollectionJobsListMessage* data_collection_jobs_list_;
  const ::AckMessage* jobstatus_ack_;
  const ::AckMessage* job_status_request_ack_;
  const ::AckMessage* initiate_geohash_ack_;
  const ::AckMessage* geohash_stream_ack_;
  const ::AckMessage* datacollection_job_ack_;
  const ::GetStaticConfigMessage* get_static_config_;
  const ::StaticConfigMessage* static_config_;
  const ::GetDataCollectionJobsMessage* get_data_collection_jobs_;
} _MessageBody_default_instance_;
class AckMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AckMessage> _instance;
} _AckMessage_default_instance_;
class JobStatusMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusMessage> _instance;
} _JobStatusMessage_default_instance_;
class JobStatusRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusRequestMessage> _instance;
} _JobStatusRequestMessage_default_instance_;
class InitiateGeohashStreamMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitiateGeohashStreamMessage> _instance;
} _InitiateGeohashStreamMessage_default_instance_;
class GeohashStreamAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeohashStreamArea> _instance;
} _GeohashStreamArea_default_instance_;
class GeoHashMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoHashMessage> _instance;
} _GeoHashMessage_default_instance_;
class JobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Job> _instance;
} _Job_default_instance_;
class JobStatusReasonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatusReason> _instance;
} _JobStatusReason_default_instance_;
class JobWarningsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobWarnings> _instance;
} _JobWarnings_default_instance_;
class JobStatisticsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatistics> _instance;
} _JobStatistics_default_instance_;
class JobStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobStatus> _instance;
} _JobStatus_default_instance_;
class GeoCoordinateAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoCoordinateArea> _instance;
} _GeoCoordinateArea_default_instance_;
class GeoRectangleAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoRectangleArea> _instance;
} _GeoRectangleArea_default_instance_;
class GeoCircleAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoCircleArea> _instance;
} _GeoCircleArea_default_instance_;
class CompositeLocationAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompositeLocationArea> _instance;
} _CompositeLocationArea_default_instance_;
class GetStaticConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetStaticConfigMessage> _instance;
} _GetStaticConfigMessage_default_instance_;
class GetDataCollectionJobsMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetDataCollectionJobsMessage> _instance;
} _GetDataCollectionJobsMessage_default_instance_;
class DataCollectionJobsListMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCollectionJobsListMessage> _instance;
} _DataCollectionJobsListMessage_default_instance_;
class StaticConfigMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticConfigMessage> _instance;
} _StaticConfigMessage_default_instance_;
class SupportedSourceVersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SupportedSourceVersion> _instance;
} _SupportedSourceVersion_default_instance_;
static void InitDefaultsscc_info_AckMessage_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AckMessage_default_instance_;
    new (ptr) ::AckMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AckMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AckMessage_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AckMessage_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_CompositeLocationArea_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_CompositeLocationArea_default_instance_;
    new (ptr) ::CompositeLocationArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::CompositeLocationArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CompositeLocationArea_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CompositeLocationArea_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_GeoCircleArea_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_GeoRectangleArea_backend_5fmessage_5fformat_2eproto.base,}};

static void InitDefaultsscc_info_DataCollectionJobsListMessage_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataCollectionJobsListMessage_default_instance_;
    new (ptr) ::DataCollectionJobsListMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataCollectionJobsListMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataCollectionJobsListMessage_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataCollectionJobsListMessage_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_DataCollectionJob_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_GeoCircleArea_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GeoCircleArea_default_instance_;
    new (ptr) ::GeoCircleArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GeoCircleArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoCircleArea_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoCircleArea_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_GeoCoordinateArea_backend_5fmessage_5fformat_2eproto.base,}};

static void InitDefaultsscc_info_GeoCoordinateArea_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GeoCoordinateArea_default_instance_;
    new (ptr) ::GeoCoordinateArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GeoCoordinateArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoCoordinateArea_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoCoordinateArea_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_GeoHashMessage_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GeoHashMessage_default_instance_;
    new (ptr) ::GeoHashMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GeoHashMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoHashMessage_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoHashMessage_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_GeoRectangleArea_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GeoRectangleArea_default_instance_;
    new (ptr) ::GeoRectangleArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GeoRectangleArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoRectangleArea_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoRectangleArea_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_GeoCoordinateArea_backend_5fmessage_5fformat_2eproto.base,}};

static void InitDefaultsscc_info_GeohashStreamArea_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GeohashStreamArea_default_instance_;
    new (ptr) ::GeohashStreamArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GeohashStreamArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeohashStreamArea_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeohashStreamArea_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_CompositeLocationArea_backend_5fmessage_5fformat_2eproto.base,}};

static void InitDefaultsscc_info_GetDataCollectionJobsMessage_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetDataCollectionJobsMessage_default_instance_;
    new (ptr) ::GetDataCollectionJobsMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetDataCollectionJobsMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetDataCollectionJobsMessage_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetDataCollectionJobsMessage_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_GetStaticConfigMessage_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetStaticConfigMessage_default_instance_;
    new (ptr) ::GetStaticConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetStaticConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetStaticConfigMessage_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetStaticConfigMessage_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_SupportedSourceVersion_backend_5fmessage_5fformat_2eproto.base,}};

static void InitDefaultsscc_info_InitiateGeohashStreamMessage_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_InitiateGeohashStreamMessage_default_instance_;
    new (ptr) ::InitiateGeohashStreamMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::InitiateGeohashStreamMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitiateGeohashStreamMessage_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InitiateGeohashStreamMessage_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_GeohashStreamArea_backend_5fmessage_5fformat_2eproto.base,}};

static void InitDefaultsscc_info_Job_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Job_default_instance_;
    new (ptr) ::Job();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Job::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Job_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Job_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_JobStatus_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_JobStatusReason_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_JobStatistics_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_JobWarnings_backend_5fmessage_5fformat_2eproto.base,}};

static void InitDefaultsscc_info_JobStatistics_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JobStatistics_default_instance_;
    new (ptr) ::JobStatistics();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JobStatistics::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatistics_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JobStatistics_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_JobStatus_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JobStatus_default_instance_;
    new (ptr) ::JobStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JobStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatus_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JobStatus_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_JobStatusMessage_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JobStatusMessage_default_instance_;
    new (ptr) ::JobStatusMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JobStatusMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobStatusMessage_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JobStatusMessage_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_Job_backend_5fmessage_5fformat_2eproto.base,}};

static void InitDefaultsscc_info_JobStatusReason_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JobStatusReason_default_instance_;
    new (ptr) ::JobStatusReason();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JobStatusReason::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusReason_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JobStatusReason_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_JobStatusRequestMessage_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JobStatusRequestMessage_default_instance_;
    new (ptr) ::JobStatusRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JobStatusRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobStatusRequestMessage_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JobStatusRequestMessage_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_JobWarnings_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_JobWarnings_default_instance_;
    new (ptr) ::JobWarnings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::JobWarnings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_JobWarnings_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_JobWarnings_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_MessageBody_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessageBody_default_instance_;
    new (ptr) ::MessageBody();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessageBody::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_MessageBody_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_MessageBody_backend_5fmessage_5fformat_2eproto}, {
      &scc_info_JobStatusMessage_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_JobStatusRequestMessage_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_InitiateGeohashStreamMessage_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_GeoHashMessage_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_DataCollectionJobsListMessage_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_AckMessage_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_GetStaticConfigMessage_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_StaticConfigMessage_backend_5fmessage_5fformat_2eproto.base,
      &scc_info_GetDataCollectionJobsMessage_backend_5fmessage_5fformat_2eproto.base,}};

static void InitDefaultsscc_info_MessageHeader_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MessageHeader_default_instance_;
    new (ptr) ::MessageHeader();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MessageHeader::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageHeader_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageHeader_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_StaticConfigMessage_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_StaticConfigMessage_default_instance_;
    new (ptr) ::StaticConfigMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::StaticConfigMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StaticConfigMessage_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StaticConfigMessage_backend_5fmessage_5fformat_2eproto}, {}};

static void InitDefaultsscc_info_SupportedSourceVersion_backend_5fmessage_5fformat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SupportedSourceVersion_default_instance_;
    new (ptr) ::SupportedSourceVersion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SupportedSourceVersion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SupportedSourceVersion_backend_5fmessage_5fformat_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SupportedSourceVersion_backend_5fmessage_5fformat_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_backend_5fmessage_5fformat_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_backend_5fmessage_5fformat_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_backend_5fmessage_5fformat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MessageHeader, protocol_version_major_),
  PROTOBUF_FIELD_OFFSET(::MessageHeader, protocol_version_minor_),
  PROTOBUF_FIELD_OFFSET(::MessageHeader, message_type_),
  PROTOBUF_FIELD_OFFSET(::MessageHeader, payload_size_byte_),
  PROTOBUF_FIELD_OFFSET(::MessageHeader, transmission_compression_),
  PROTOBUF_FIELD_OFFSET(::MessageHeader, sequence_nb_),
  PROTOBUF_FIELD_OFFSET(::MessageHeader, ecu_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageBody, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::MessageBody, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::MessageBodyDefaultTypeInternal, job_status_),
  offsetof(::MessageBodyDefaultTypeInternal, job_status_request_),
  offsetof(::MessageBodyDefaultTypeInternal, initiate_geohash_stream_),
  offsetof(::MessageBodyDefaultTypeInternal, geo_hash_),
  offsetof(::MessageBodyDefaultTypeInternal, data_collection_jobs_list_),
  offsetof(::MessageBodyDefaultTypeInternal, jobstatus_ack_),
  offsetof(::MessageBodyDefaultTypeInternal, job_status_request_ack_),
  offsetof(::MessageBodyDefaultTypeInternal, initiate_geohash_ack_),
  offsetof(::MessageBodyDefaultTypeInternal, geohash_stream_ack_),
  offsetof(::MessageBodyDefaultTypeInternal, datacollection_job_ack_),
  offsetof(::MessageBodyDefaultTypeInternal, get_static_config_),
  offsetof(::MessageBodyDefaultTypeInternal, static_config_),
  offsetof(::MessageBodyDefaultTypeInternal, get_data_collection_jobs_),
  PROTOBUF_FIELD_OFFSET(::MessageBody, message_body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AckMessage, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JobStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JobStatusMessage, content_type_),
  PROTOBUF_FIELD_OFFSET(::JobStatusMessage, dc_job_),
  PROTOBUF_FIELD_OFFSET(::JobStatusMessage, max_supported_jobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JobStatusRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JobStatusRequestMessage, content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::InitiateGeohashStreamMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::InitiateGeohashStreamMessage, enabled_),
  PROTOBUF_FIELD_OFFSET(::InitiateGeohashStreamMessage, areas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GeohashStreamArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GeohashStreamArea, precision_),
  PROTOBUF_FIELD_OFFSET(::GeohashStreamArea, geo_area_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GeoHashMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GeoHashMessage, geo_hash_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Job, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Job, job_id_),
  PROTOBUF_FIELD_OFFSET(::Job, job_status_),
  PROTOBUF_FIELD_OFFSET(::Job, reason_),
  PROTOBUF_FIELD_OFFSET(::Job, job_statistics_),
  PROTOBUF_FIELD_OFFSET(::Job, job_warnings_),
  PROTOBUF_FIELD_OFFSET(::Job, utc_timestamp_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JobStatusReason, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JobStatusReason, reason_),
  PROTOBUF_FIELD_OFFSET(::JobStatusReason, detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JobWarnings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JobWarnings, warning_),
  PROTOBUF_FIELD_OFFSET(::JobWarnings, detail_),
  PROTOBUF_FIELD_OFFSET(::JobWarnings, utc_timestamp_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JobStatistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JobStatistics, driven_km_),
  PROTOBUF_FIELD_OFFSET(::JobStatistics, driven_time_),
  PROTOBUF_FIELD_OFFSET(::JobStatistics, num_of_uploaded_files_),
  PROTOBUF_FIELD_OFFSET(::JobStatistics, utc_timestamp_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::JobStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::JobStatus, job_status_),
  PROTOBUF_FIELD_OFFSET(::JobStatus, utc_timestamp_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GeoCoordinateArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GeoCoordinateArea, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::GeoCoordinateArea, longitude_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GeoRectangleArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GeoRectangleArea, top_left_),
  PROTOBUF_FIELD_OFFSET(::GeoRectangleArea, bottom_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GeoCircleArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GeoCircleArea, center_),
  PROTOBUF_FIELD_OFFSET(::GeoCircleArea, radius_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::CompositeLocationArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::CompositeLocationArea, geo_circles_),
  PROTOBUF_FIELD_OFFSET(::CompositeLocationArea, geo_rectangles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetStaticConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetStaticConfigMessage, udc_version_),
  PROTOBUF_FIELD_OFFSET(::GetStaticConfigMessage, supported_job_format_version_),
  PROTOBUF_FIELD_OFFSET(::GetStaticConfigMessage, supported_upload_format_version_),
  PROTOBUF_FIELD_OFFSET(::GetStaticConfigMessage, supported_source_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetDataCollectionJobsMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetDataCollectionJobsMessage, max_supported_jobs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataCollectionJobsListMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataCollectionJobsListMessage, new_jobs_),
  PROTOBUF_FIELD_OFFSET(::DataCollectionJobsListMessage, job_ids_to_terminate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::StaticConfigMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SupportedSourceVersion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SupportedSourceVersion, source_type_),
  PROTOBUF_FIELD_OFFSET(::SupportedSourceVersion, ecu_),
  PROTOBUF_FIELD_OFFSET(::SupportedSourceVersion, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::MessageHeader)},
  { 12, -1, sizeof(::MessageBody)},
  { 31, -1, sizeof(::AckMessage)},
  { 37, -1, sizeof(::JobStatusMessage)},
  { 45, -1, sizeof(::JobStatusRequestMessage)},
  { 51, -1, sizeof(::InitiateGeohashStreamMessage)},
  { 58, -1, sizeof(::GeohashStreamArea)},
  { 65, -1, sizeof(::GeoHashMessage)},
  { 71, -1, sizeof(::Job)},
  { 82, -1, sizeof(::JobStatusReason)},
  { 89, -1, sizeof(::JobWarnings)},
  { 97, -1, sizeof(::JobStatistics)},
  { 106, -1, sizeof(::JobStatus)},
  { 113, -1, sizeof(::GeoCoordinateArea)},
  { 120, -1, sizeof(::GeoRectangleArea)},
  { 127, -1, sizeof(::GeoCircleArea)},
  { 134, -1, sizeof(::CompositeLocationArea)},
  { 141, -1, sizeof(::GetStaticConfigMessage)},
  { 150, -1, sizeof(::GetDataCollectionJobsMessage)},
  { 156, -1, sizeof(::DataCollectionJobsListMessage)},
  { 163, -1, sizeof(::StaticConfigMessage)},
  { 168, -1, sizeof(::SupportedSourceVersion)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageBody_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AckMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JobStatusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JobStatusRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_InitiateGeohashStreamMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GeohashStreamArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GeoHashMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Job_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JobStatusReason_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JobWarnings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JobStatistics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_JobStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GeoCoordinateArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GeoRectangleArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GeoCircleArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_CompositeLocationArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetStaticConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetDataCollectionJobsMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataCollectionJobsListMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_StaticConfigMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SupportedSourceVersion_default_instance_),
};

const char descriptor_table_protodef_backend_5fmessage_5fformat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034backend_message_format.proto\032+data_col"
  "lection_configuration_request.proto\"\261\005\n\r"
  "MessageHeader\022\036\n\026protocol_version_major\030"
  "\001 \001(\005\022\036\n\026protocol_version_minor\030\002 \001(\005\0221\n"
  "\014message_type\030\003 \001(\0162\033.MessageHeader.Mess"
  "age_Type\022\031\n\021payload_size_byte\030\004 \001(\r\022A\n\030t"
  "ransmission_compression\030\005 \001(\0162\037.MessageH"
  "eader.Compression_Type\022\023\n\013sequence_nb\030\006 "
  "\001(\005\022$\n\003ecu\030\007 \001(\0162\027.MessageHeader.Ecu_Typ"
  "e\"\255\002\n\014Message_Type\022\016\n\nJOB_STATUS\020\000\022\026\n\022JO"
  "B_STATUS_REQUEST\020\001\022\034\n\030INITIATE_GEO_HASH_"
  "STREAM\020\002\022\014\n\010GEO_HASH\020\003\022\014\n\010JOB_LIST\020\004\022\022\n\016"
  "JOB_STATUS_ACK\020\005\022\032\n\026JOB_STATUS_REQUEST_A"
  "CK\020\006\022 \n\034INITIATE_GEO_HASH_STREAM_ACK\020\007\022\020"
  "\n\014GEO_HASH_ACK\020\010\022\020\n\014JOB_LIST_ACK\020\t\022\025\n\021GE"
  "T_STATIC_CONFIG\020\n\022\021\n\rSTATIC_CONFIG\020\013\022\033\n\027"
  "GET_DATA_COLLECTION_JOB\020\014\"<\n\020Compression"
  "_Type\022\022\n\016NO_COMPRESSION\020\000\022\024\n\020GZIP_COMPRE"
  "SSION\020\001\"&\n\010Ecu_Type\022\t\n\005CIVIC\020\000\022\007\n\003IDC\020\001\022"
  "\006\n\002CU\020\002\"\256\005\n\013MessageBody\022\'\n\njob_status\030\001 "
  "\001(\0132\021.JobStatusMessageH\000\0226\n\022job_status_r"
  "equest\030\002 \001(\0132\030.JobStatusRequestMessageH\000"
  "\022@\n\027initiate_geohash_stream\030\003 \001(\0132\035.Init"
  "iateGeohashStreamMessageH\000\022#\n\010geo_hash\030\004"
  " \001(\0132\017.GeoHashMessageH\000\022C\n\031data_collecti"
  "on_jobs_list\030\005 \001(\0132\036.DataCollectionJobsL"
  "istMessageH\000\022$\n\rjobstatus_ack\030\006 \001(\0132\013.Ac"
  "kMessageH\000\022-\n\026job_status_request_ack\030\007 \001"
  "(\0132\013.AckMessageH\000\022+\n\024initiate_geohash_ac"
  "k\030\010 \001(\0132\013.AckMessageH\000\022)\n\022geohash_stream"
  "_ack\030\t \001(\0132\013.AckMessageH\000\022-\n\026datacollect"
  "ion_job_ack\030\n \001(\0132\013.AckMessageH\000\0224\n\021get_"
  "static_config\030\013 \001(\0132\027.GetStaticConfigMes"
  "sageH\000\022-\n\rstatic_config\030\014 \001(\0132\024.StaticCo"
  "nfigMessageH\000\022A\n\030get_data_collection_job"
  "s\030\r \001(\0132\035.GetDataCollectionJobsMessageH\000"
  "B\016\n\014message_body\"X\n\nAckMessage\022\'\n\006status"
  "\030\001 \001(\0162\027.AckMessage.Status_Code\"!\n\013Statu"
  "s_Code\022\n\n\006FAILED\020\000\022\006\n\002OK\020\001\"i\n\020JobStatusM"
  "essage\022#\n\014content_type\030\001 \001(\0162\r.Content_T"
  "ype\022\024\n\006dc_job\030\002 \003(\0132\004.Job\022\032\n\022max_support"
  "ed_jobs\030\003 \001(\005\">\n\027JobStatusRequestMessage"
  "\022#\n\014content_type\030\001 \001(\0162\r.Content_Type\"R\n"
  "\034InitiateGeohashStreamMessage\022\017\n\007enabled"
  "\030\001 \001(\010\022!\n\005areas\030\002 \003(\0132\022.GeohashStreamAre"
  "a\"P\n\021GeohashStreamArea\022\021\n\tprecision\030\001 \001("
  "\005\022(\n\010geo_area\030\002 \001(\0132\026.CompositeLocationA"
  "rea\"(\n\016GeoHashMessage\022\026\n\016geo_hash_value\030"
  "\001 \001(\t\"\275\001\n\003Job\022\016\n\006job_id\030\001 \001(\t\022\036\n\njob_sta"
  "tus\030\002 \001(\0132\n.JobStatus\022 \n\006reason\030\003 \001(\0132\020."
  "JobStatusReason\022&\n\016job_statistics\030\004 \001(\0132"
  "\016.JobStatistics\022\"\n\014job_warnings\030\005 \003(\0132\014."
  "JobWarnings\022\030\n\020utc_timestamp_ms\030\006 \001(\004\"\224\002"
  "\n\017JobStatusReason\022\'\n\006reason\030\001 \001(\0162\027.JobS"
  "tatusReason.Reason\022\016\n\006detail\030\002 \001(\t\"\307\001\n\006R"
  "eason\022\021\n\rPARSING_ERROR\020\000\022\031\n\025INCORRECT_FI"
  "ELD_VALUE\020\001\022\024\n\020VERSION_MISMATCH\020\002\022\035\n\031TER"
  "MINATION_CONDITION_MET\020\003\022\025\n\021TERMINATED_B"
  "Y_DCM\020\004\022\020\n\014RECEIVED_NEW\020\005\022\030\n\024ACTIVE_COND"
  "ITION_MET\020\006\022\027\n\023PAUSE_CONDITION_MET\020\007\"\201\001\n"
  "\013JobWarnings\022&\n\007warning\030\001 \001(\0162\025.JobWarni"
  "ngs.Warnings\022\016\n\006detail\030\002 \001(\t\022\030\n\020utc_time"
  "stamp_ms\030\003 \001(\004\" \n\010Warnings\022\024\n\020SIGNAL_NOT"
  "_FOUND\020\000\"p\n\rJobStatistics\022\021\n\tdriven_km\030\001"
  " \001(\005\022\023\n\013driven_time\030\002 \001(\005\022\035\n\025num_Of_uplo"
  "aded_files\030\003 \001(\005\022\030\n\020utc_timestamp_ms\030\004 \001"
  "(\004\"\223\001\n\tJobStatus\022)\n\njob_status\030\001 \001(\0162\025.J"
  "obStatus.Job_Status\022\030\n\020utc_timestamp_ms\030"
  "\002 \001(\004\"A\n\nJob_Status\022\n\n\006ACTIVE\020\000\022\n\n\006PAUSE"
  "D\020\001\022\016\n\nTERMINATED\020\002\022\013\n\007INVALID\020\003\"@\n\021GeoC"
  "oordinateArea\022\024\n\014latitude_deg\030\001 \001(\001\022\025\n\rl"
  "ongitude_deg\030\002 \001(\001\"b\n\020GeoRectangleArea\022$"
  "\n\010top_left\030\001 \001(\0132\022.GeoCoordinateArea\022(\n\014"
  "bottom_right\030\002 \001(\0132\022.GeoCoordinateArea\"E"
  "\n\rGeoCircleArea\022\"\n\006center\030\001 \001(\0132\022.GeoCoo"
  "rdinateArea\022\020\n\010radius_m\030\002 \001(\001\"g\n\025Composi"
  "teLocationArea\022#\n\013geo_circles\030\001 \003(\0132\016.Ge"
  "oCircleArea\022)\n\016geo_rectangles\030\002 \003(\0132\021.Ge"
  "oRectangleArea\"\267\001\n\026GetStaticConfigMessag"
  "e\022\023\n\013udc_version\030\001 \001(\t\022$\n\034supported_job_"
  "format_version\030\002 \001(\t\022\'\n\037supported_upload"
  "_format_version\030\003 \001(\t\0229\n\030supported_sourc"
  "e_version\030\004 \003(\0132\027.SupportedSourceVersion"
  "\":\n\034GetDataCollectionJobsMessage\022\032\n\022max_"
  "supported_jobs\030\001 \001(\005\"\211\001\n\035DataCollectionJ"
  "obsListMessage\022J\n\010new_jobs\030\001 \003(\01328.data_"
  "collection_configuration_request.DataCol"
  "lectionJob\022\034\n\024job_ids_to_terminate\030\002 \003(\t"
  "\"\025\n\023StaticConfigMessage\"Y\n\026SupportedSour"
  "ceVersion\022!\n\013source_type\030\001 \001(\0162\014.Source_"
  "Type\022\013\n\003ecu\030\002 \001(\t\022\017\n\007version\030\003 \001(\t*#\n\014Co"
  "ntent_Type\022\010\n\004FULL\020\000\022\t\n\005DELTA\020\001*T\n\013Sourc"
  "e_Type\022\r\n\tUNDEFINED\020\000\022\013\n\007SOME_IP\020\001\022\024\n\020TH"
  "RIFTME_PASSIVE\020\002\022\023\n\017THRIFTME_ACTIVE\020\003b\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_backend_5fmessage_5fformat_2eproto_deps[1] = {
  &::descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_backend_5fmessage_5fformat_2eproto_sccs[22] = {
  &scc_info_AckMessage_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_CompositeLocationArea_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_DataCollectionJobsListMessage_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_GeoCircleArea_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_GeoCoordinateArea_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_GeoHashMessage_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_GeoRectangleArea_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_GeohashStreamArea_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_GetDataCollectionJobsMessage_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_GetStaticConfigMessage_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_InitiateGeohashStreamMessage_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_Job_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_JobStatistics_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_JobStatus_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_JobStatusMessage_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_JobStatusReason_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_JobStatusRequestMessage_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_JobWarnings_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_MessageBody_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_MessageHeader_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_StaticConfigMessage_backend_5fmessage_5fformat_2eproto.base,
  &scc_info_SupportedSourceVersion_backend_5fmessage_5fformat_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_backend_5fmessage_5fformat_2eproto_once;
static bool descriptor_table_backend_5fmessage_5fformat_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5fmessage_5fformat_2eproto = {
  &descriptor_table_backend_5fmessage_5fformat_2eproto_initialized, descriptor_table_protodef_backend_5fmessage_5fformat_2eproto, "backend_message_format.proto", 3765,
  &descriptor_table_backend_5fmessage_5fformat_2eproto_once, descriptor_table_backend_5fmessage_5fformat_2eproto_sccs, descriptor_table_backend_5fmessage_5fformat_2eproto_deps, 22, 1,
  schemas, file_default_instances, TableStruct_backend_5fmessage_5fformat_2eproto::offsets,
  file_level_metadata_backend_5fmessage_5fformat_2eproto, 22, file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto, file_level_service_descriptors_backend_5fmessage_5fformat_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_backend_5fmessage_5fformat_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_Message_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto);
  return file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[0];
}
bool MessageHeader_Message_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MessageHeader_Message_Type MessageHeader::JOB_STATUS;
constexpr MessageHeader_Message_Type MessageHeader::JOB_STATUS_REQUEST;
constexpr MessageHeader_Message_Type MessageHeader::INITIATE_GEO_HASH_STREAM;
constexpr MessageHeader_Message_Type MessageHeader::GEO_HASH;
constexpr MessageHeader_Message_Type MessageHeader::JOB_LIST;
constexpr MessageHeader_Message_Type MessageHeader::JOB_STATUS_ACK;
constexpr MessageHeader_Message_Type MessageHeader::JOB_STATUS_REQUEST_ACK;
constexpr MessageHeader_Message_Type MessageHeader::INITIATE_GEO_HASH_STREAM_ACK;
constexpr MessageHeader_Message_Type MessageHeader::GEO_HASH_ACK;
constexpr MessageHeader_Message_Type MessageHeader::JOB_LIST_ACK;
constexpr MessageHeader_Message_Type MessageHeader::GET_STATIC_CONFIG;
constexpr MessageHeader_Message_Type MessageHeader::STATIC_CONFIG;
constexpr MessageHeader_Message_Type MessageHeader::GET_DATA_COLLECTION_JOB;
constexpr MessageHeader_Message_Type MessageHeader::Message_Type_MIN;
constexpr MessageHeader_Message_Type MessageHeader::Message_Type_MAX;
constexpr int MessageHeader::Message_Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_Compression_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto);
  return file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[1];
}
bool MessageHeader_Compression_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MessageHeader_Compression_Type MessageHeader::NO_COMPRESSION;
constexpr MessageHeader_Compression_Type MessageHeader::GZIP_COMPRESSION;
constexpr MessageHeader_Compression_Type MessageHeader::Compression_Type_MIN;
constexpr MessageHeader_Compression_Type MessageHeader::Compression_Type_MAX;
constexpr int MessageHeader::Compression_Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_Ecu_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto);
  return file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[2];
}
bool MessageHeader_Ecu_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MessageHeader_Ecu_Type MessageHeader::CIVIC;
constexpr MessageHeader_Ecu_Type MessageHeader::IDC;
constexpr MessageHeader_Ecu_Type MessageHeader::CU;
constexpr MessageHeader_Ecu_Type MessageHeader::Ecu_Type_MIN;
constexpr MessageHeader_Ecu_Type MessageHeader::Ecu_Type_MAX;
constexpr int MessageHeader::Ecu_Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AckMessage_Status_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto);
  return file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[3];
}
bool AckMessage_Status_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr AckMessage_Status_Code AckMessage::FAILED;
constexpr AckMessage_Status_Code AckMessage::OK;
constexpr AckMessage_Status_Code AckMessage::Status_Code_MIN;
constexpr AckMessage_Status_Code AckMessage::Status_Code_MAX;
constexpr int AckMessage::Status_Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatusReason_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto);
  return file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[4];
}
bool JobStatusReason_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JobStatusReason_Reason JobStatusReason::PARSING_ERROR;
constexpr JobStatusReason_Reason JobStatusReason::INCORRECT_FIELD_VALUE;
constexpr JobStatusReason_Reason JobStatusReason::VERSION_MISMATCH;
constexpr JobStatusReason_Reason JobStatusReason::TERMINATION_CONDITION_MET;
constexpr JobStatusReason_Reason JobStatusReason::TERMINATED_BY_DCM;
constexpr JobStatusReason_Reason JobStatusReason::RECEIVED_NEW;
constexpr JobStatusReason_Reason JobStatusReason::ACTIVE_CONDITION_MET;
constexpr JobStatusReason_Reason JobStatusReason::PAUSE_CONDITION_MET;
constexpr JobStatusReason_Reason JobStatusReason::Reason_MIN;
constexpr JobStatusReason_Reason JobStatusReason::Reason_MAX;
constexpr int JobStatusReason::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobWarnings_Warnings_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto);
  return file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[5];
}
bool JobWarnings_Warnings_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JobWarnings_Warnings JobWarnings::SIGNAL_NOT_FOUND;
constexpr JobWarnings_Warnings JobWarnings::Warnings_MIN;
constexpr JobWarnings_Warnings JobWarnings::Warnings_MAX;
constexpr int JobWarnings::Warnings_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatus_Job_Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto);
  return file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[6];
}
bool JobStatus_Job_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr JobStatus_Job_Status JobStatus::ACTIVE;
constexpr JobStatus_Job_Status JobStatus::PAUSED;
constexpr JobStatus_Job_Status JobStatus::TERMINATED;
constexpr JobStatus_Job_Status JobStatus::INVALID;
constexpr JobStatus_Job_Status JobStatus::Job_Status_MIN;
constexpr JobStatus_Job_Status JobStatus::Job_Status_MAX;
constexpr int JobStatus::Job_Status_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Content_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto);
  return file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[7];
}
bool Content_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Source_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_backend_5fmessage_5fformat_2eproto);
  return file_level_enum_descriptors_backend_5fmessage_5fformat_2eproto[8];
}
bool Source_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MessageHeader::InitAsDefaultInstance() {
}
class MessageHeader::_Internal {
 public:
};

MessageHeader::MessageHeader()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageHeader)
}
MessageHeader::MessageHeader(const MessageHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&protocol_version_major_, &from.protocol_version_major_,
    static_cast<size_t>(reinterpret_cast<char*>(&ecu_) -
    reinterpret_cast<char*>(&protocol_version_major_)) + sizeof(ecu_));
  // @@protoc_insertion_point(copy_constructor:MessageHeader)
}

void MessageHeader::SharedCtor() {
  ::memset(&protocol_version_major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ecu_) -
      reinterpret_cast<char*>(&protocol_version_major_)) + sizeof(ecu_));
}

MessageHeader::~MessageHeader() {
  // @@protoc_insertion_point(destructor:MessageHeader)
  SharedDtor();
}

void MessageHeader::SharedDtor() {
}

void MessageHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageHeader& MessageHeader::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageHeader_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void MessageHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&protocol_version_major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ecu_) -
      reinterpret_cast<char*>(&protocol_version_major_)) + sizeof(ecu_));
  _internal_metadata_.Clear();
}

const char* MessageHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 protocol_version_major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          protocol_version_major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 protocol_version_minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          protocol_version_minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MessageHeader.Message_Type message_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::MessageHeader_Message_Type>(val));
        } else goto handle_unusual;
        continue;
      // uint32 payload_size_byte = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          payload_size_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MessageHeader.Compression_Type transmission_compression = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_transmission_compression(static_cast<::MessageHeader_Compression_Type>(val));
        } else goto handle_unusual;
        continue;
      // int32 sequence_nb = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          sequence_nb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .MessageHeader.Ecu_Type ecu = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_ecu(static_cast<::MessageHeader_Ecu_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageHeader::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageHeader)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 protocol_version_major = 1;
  if (this->protocol_version_major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_protocol_version_major(), target);
  }

  // int32 protocol_version_minor = 2;
  if (this->protocol_version_minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_protocol_version_minor(), target);
  }

  // .MessageHeader.Message_Type message_type = 3;
  if (this->message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_message_type(), target);
  }

  // uint32 payload_size_byte = 4;
  if (this->payload_size_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_payload_size_byte(), target);
  }

  // .MessageHeader.Compression_Type transmission_compression = 5;
  if (this->transmission_compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_transmission_compression(), target);
  }

  // int32 sequence_nb = 6;
  if (this->sequence_nb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_sequence_nb(), target);
  }

  // .MessageHeader.Ecu_Type ecu = 7;
  if (this->ecu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_ecu(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageHeader)
  return target;
}

size_t MessageHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageHeader)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 protocol_version_major = 1;
  if (this->protocol_version_major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_protocol_version_major());
  }

  // int32 protocol_version_minor = 2;
  if (this->protocol_version_minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_protocol_version_minor());
  }

  // .MessageHeader.Message_Type message_type = 3;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  // uint32 payload_size_byte = 4;
  if (this->payload_size_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_payload_size_byte());
  }

  // .MessageHeader.Compression_Type transmission_compression = 5;
  if (this->transmission_compression() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_transmission_compression());
  }

  // int32 sequence_nb = 6;
  if (this->sequence_nb() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence_nb());
  }

  // .MessageHeader.Ecu_Type ecu = 7;
  if (this->ecu() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ecu());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageHeader::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageHeader* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageHeader>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageHeader)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageHeader)
    MergeFrom(*source);
  }
}

void MessageHeader::MergeFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageHeader)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.protocol_version_major() != 0) {
    _internal_set_protocol_version_major(from._internal_protocol_version_major());
  }
  if (from.protocol_version_minor() != 0) {
    _internal_set_protocol_version_minor(from._internal_protocol_version_minor());
  }
  if (from.message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
  if (from.payload_size_byte() != 0) {
    _internal_set_payload_size_byte(from._internal_payload_size_byte());
  }
  if (from.transmission_compression() != 0) {
    _internal_set_transmission_compression(from._internal_transmission_compression());
  }
  if (from.sequence_nb() != 0) {
    _internal_set_sequence_nb(from._internal_sequence_nb());
  }
  if (from.ecu() != 0) {
    _internal_set_ecu(from._internal_ecu());
  }
}

void MessageHeader::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageHeader::CopyFrom(const MessageHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageHeader::IsInitialized() const {
  return true;
}

void MessageHeader::InternalSwap(MessageHeader* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(protocol_version_major_, other->protocol_version_major_);
  swap(protocol_version_minor_, other->protocol_version_minor_);
  swap(message_type_, other->message_type_);
  swap(payload_size_byte_, other->payload_size_byte_);
  swap(transmission_compression_, other->transmission_compression_);
  swap(sequence_nb_, other->sequence_nb_);
  swap(ecu_, other->ecu_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageHeader::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageBody::InitAsDefaultInstance() {
  ::_MessageBody_default_instance_.job_status_ = const_cast< ::JobStatusMessage*>(
      ::JobStatusMessage::internal_default_instance());
  ::_MessageBody_default_instance_.job_status_request_ = const_cast< ::JobStatusRequestMessage*>(
      ::JobStatusRequestMessage::internal_default_instance());
  ::_MessageBody_default_instance_.initiate_geohash_stream_ = const_cast< ::InitiateGeohashStreamMessage*>(
      ::InitiateGeohashStreamMessage::internal_default_instance());
  ::_MessageBody_default_instance_.geo_hash_ = const_cast< ::GeoHashMessage*>(
      ::GeoHashMessage::internal_default_instance());
  ::_MessageBody_default_instance_.data_collection_jobs_list_ = const_cast< ::DataCollectionJobsListMessage*>(
      ::DataCollectionJobsListMessage::internal_default_instance());
  ::_MessageBody_default_instance_.jobstatus_ack_ = const_cast< ::AckMessage*>(
      ::AckMessage::internal_default_instance());
  ::_MessageBody_default_instance_.job_status_request_ack_ = const_cast< ::AckMessage*>(
      ::AckMessage::internal_default_instance());
  ::_MessageBody_default_instance_.initiate_geohash_ack_ = const_cast< ::AckMessage*>(
      ::AckMessage::internal_default_instance());
  ::_MessageBody_default_instance_.geohash_stream_ack_ = const_cast< ::AckMessage*>(
      ::AckMessage::internal_default_instance());
  ::_MessageBody_default_instance_.datacollection_job_ack_ = const_cast< ::AckMessage*>(
      ::AckMessage::internal_default_instance());
  ::_MessageBody_default_instance_.get_static_config_ = const_cast< ::GetStaticConfigMessage*>(
      ::GetStaticConfigMessage::internal_default_instance());
  ::_MessageBody_default_instance_.static_config_ = const_cast< ::StaticConfigMessage*>(
      ::StaticConfigMessage::internal_default_instance());
  ::_MessageBody_default_instance_.get_data_collection_jobs_ = const_cast< ::GetDataCollectionJobsMessage*>(
      ::GetDataCollectionJobsMessage::internal_default_instance());
}
class MessageBody::_Internal {
 public:
  static const ::JobStatusMessage& job_status(const MessageBody* msg);
  static const ::JobStatusRequestMessage& job_status_request(const MessageBody* msg);
  static const ::InitiateGeohashStreamMessage& initiate_geohash_stream(const MessageBody* msg);
  static const ::GeoHashMessage& geo_hash(const MessageBody* msg);
  static const ::DataCollectionJobsListMessage& data_collection_jobs_list(const MessageBody* msg);
  static const ::AckMessage& jobstatus_ack(const MessageBody* msg);
  static const ::AckMessage& job_status_request_ack(const MessageBody* msg);
  static const ::AckMessage& initiate_geohash_ack(const MessageBody* msg);
  static const ::AckMessage& geohash_stream_ack(const MessageBody* msg);
  static const ::AckMessage& datacollection_job_ack(const MessageBody* msg);
  static const ::GetStaticConfigMessage& get_static_config(const MessageBody* msg);
  static const ::StaticConfigMessage& static_config(const MessageBody* msg);
  static const ::GetDataCollectionJobsMessage& get_data_collection_jobs(const MessageBody* msg);
};

const ::JobStatusMessage&
MessageBody::_Internal::job_status(const MessageBody* msg) {
  return *msg->message_body_.job_status_;
}
const ::JobStatusRequestMessage&
MessageBody::_Internal::job_status_request(const MessageBody* msg) {
  return *msg->message_body_.job_status_request_;
}
const ::InitiateGeohashStreamMessage&
MessageBody::_Internal::initiate_geohash_stream(const MessageBody* msg) {
  return *msg->message_body_.initiate_geohash_stream_;
}
const ::GeoHashMessage&
MessageBody::_Internal::geo_hash(const MessageBody* msg) {
  return *msg->message_body_.geo_hash_;
}
const ::DataCollectionJobsListMessage&
MessageBody::_Internal::data_collection_jobs_list(const MessageBody* msg) {
  return *msg->message_body_.data_collection_jobs_list_;
}
const ::AckMessage&
MessageBody::_Internal::jobstatus_ack(const MessageBody* msg) {
  return *msg->message_body_.jobstatus_ack_;
}
const ::AckMessage&
MessageBody::_Internal::job_status_request_ack(const MessageBody* msg) {
  return *msg->message_body_.job_status_request_ack_;
}
const ::AckMessage&
MessageBody::_Internal::initiate_geohash_ack(const MessageBody* msg) {
  return *msg->message_body_.initiate_geohash_ack_;
}
const ::AckMessage&
MessageBody::_Internal::geohash_stream_ack(const MessageBody* msg) {
  return *msg->message_body_.geohash_stream_ack_;
}
const ::AckMessage&
MessageBody::_Internal::datacollection_job_ack(const MessageBody* msg) {
  return *msg->message_body_.datacollection_job_ack_;
}
const ::GetStaticConfigMessage&
MessageBody::_Internal::get_static_config(const MessageBody* msg) {
  return *msg->message_body_.get_static_config_;
}
const ::StaticConfigMessage&
MessageBody::_Internal::static_config(const MessageBody* msg) {
  return *msg->message_body_.static_config_;
}
const ::GetDataCollectionJobsMessage&
MessageBody::_Internal::get_data_collection_jobs(const MessageBody* msg) {
  return *msg->message_body_.get_data_collection_jobs_;
}
void MessageBody::set_allocated_job_status(::JobStatusMessage* job_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (job_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      job_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_status, submessage_arena);
    }
    set_has_job_status();
    message_body_.job_status_ = job_status;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.job_status)
}
void MessageBody::set_allocated_job_status_request(::JobStatusRequestMessage* job_status_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (job_status_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      job_status_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_status_request, submessage_arena);
    }
    set_has_job_status_request();
    message_body_.job_status_request_ = job_status_request;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.job_status_request)
}
void MessageBody::set_allocated_initiate_geohash_stream(::InitiateGeohashStreamMessage* initiate_geohash_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (initiate_geohash_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      initiate_geohash_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initiate_geohash_stream, submessage_arena);
    }
    set_has_initiate_geohash_stream();
    message_body_.initiate_geohash_stream_ = initiate_geohash_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.initiate_geohash_stream)
}
void MessageBody::set_allocated_geo_hash(::GeoHashMessage* geo_hash) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (geo_hash) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geo_hash = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_hash, submessage_arena);
    }
    set_has_geo_hash();
    message_body_.geo_hash_ = geo_hash;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.geo_hash)
}
void MessageBody::set_allocated_data_collection_jobs_list(::DataCollectionJobsListMessage* data_collection_jobs_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (data_collection_jobs_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_collection_jobs_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_collection_jobs_list, submessage_arena);
    }
    set_has_data_collection_jobs_list();
    message_body_.data_collection_jobs_list_ = data_collection_jobs_list;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.data_collection_jobs_list)
}
void MessageBody::set_allocated_jobstatus_ack(::AckMessage* jobstatus_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (jobstatus_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      jobstatus_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, jobstatus_ack, submessage_arena);
    }
    set_has_jobstatus_ack();
    message_body_.jobstatus_ack_ = jobstatus_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.jobstatus_ack)
}
void MessageBody::set_allocated_job_status_request_ack(::AckMessage* job_status_request_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (job_status_request_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      job_status_request_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_status_request_ack, submessage_arena);
    }
    set_has_job_status_request_ack();
    message_body_.job_status_request_ack_ = job_status_request_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.job_status_request_ack)
}
void MessageBody::set_allocated_initiate_geohash_ack(::AckMessage* initiate_geohash_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (initiate_geohash_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      initiate_geohash_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initiate_geohash_ack, submessage_arena);
    }
    set_has_initiate_geohash_ack();
    message_body_.initiate_geohash_ack_ = initiate_geohash_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.initiate_geohash_ack)
}
void MessageBody::set_allocated_geohash_stream_ack(::AckMessage* geohash_stream_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (geohash_stream_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geohash_stream_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geohash_stream_ack, submessage_arena);
    }
    set_has_geohash_stream_ack();
    message_body_.geohash_stream_ack_ = geohash_stream_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.geohash_stream_ack)
}
void MessageBody::set_allocated_datacollection_job_ack(::AckMessage* datacollection_job_ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (datacollection_job_ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      datacollection_job_ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datacollection_job_ack, submessage_arena);
    }
    set_has_datacollection_job_ack();
    message_body_.datacollection_job_ack_ = datacollection_job_ack;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.datacollection_job_ack)
}
void MessageBody::set_allocated_get_static_config(::GetStaticConfigMessage* get_static_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (get_static_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_static_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_static_config, submessage_arena);
    }
    set_has_get_static_config();
    message_body_.get_static_config_ = get_static_config;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.get_static_config)
}
void MessageBody::set_allocated_static_config(::StaticConfigMessage* static_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (static_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      static_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, static_config, submessage_arena);
    }
    set_has_static_config();
    message_body_.static_config_ = static_config;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.static_config)
}
void MessageBody::set_allocated_get_data_collection_jobs(::GetDataCollectionJobsMessage* get_data_collection_jobs) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_message_body();
  if (get_data_collection_jobs) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      get_data_collection_jobs = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_data_collection_jobs, submessage_arena);
    }
    set_has_get_data_collection_jobs();
    message_body_.get_data_collection_jobs_ = get_data_collection_jobs;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageBody.get_data_collection_jobs)
}
MessageBody::MessageBody()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageBody)
}
MessageBody::MessageBody(const MessageBody& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_message_body();
  switch (from.message_body_case()) {
    case kJobStatus: {
      _internal_mutable_job_status()->::JobStatusMessage::MergeFrom(from._internal_job_status());
      break;
    }
    case kJobStatusRequest: {
      _internal_mutable_job_status_request()->::JobStatusRequestMessage::MergeFrom(from._internal_job_status_request());
      break;
    }
    case kInitiateGeohashStream: {
      _internal_mutable_initiate_geohash_stream()->::InitiateGeohashStreamMessage::MergeFrom(from._internal_initiate_geohash_stream());
      break;
    }
    case kGeoHash: {
      _internal_mutable_geo_hash()->::GeoHashMessage::MergeFrom(from._internal_geo_hash());
      break;
    }
    case kDataCollectionJobsList: {
      _internal_mutable_data_collection_jobs_list()->::DataCollectionJobsListMessage::MergeFrom(from._internal_data_collection_jobs_list());
      break;
    }
    case kJobstatusAck: {
      _internal_mutable_jobstatus_ack()->::AckMessage::MergeFrom(from._internal_jobstatus_ack());
      break;
    }
    case kJobStatusRequestAck: {
      _internal_mutable_job_status_request_ack()->::AckMessage::MergeFrom(from._internal_job_status_request_ack());
      break;
    }
    case kInitiateGeohashAck: {
      _internal_mutable_initiate_geohash_ack()->::AckMessage::MergeFrom(from._internal_initiate_geohash_ack());
      break;
    }
    case kGeohashStreamAck: {
      _internal_mutable_geohash_stream_ack()->::AckMessage::MergeFrom(from._internal_geohash_stream_ack());
      break;
    }
    case kDatacollectionJobAck: {
      _internal_mutable_datacollection_job_ack()->::AckMessage::MergeFrom(from._internal_datacollection_job_ack());
      break;
    }
    case kGetStaticConfig: {
      _internal_mutable_get_static_config()->::GetStaticConfigMessage::MergeFrom(from._internal_get_static_config());
      break;
    }
    case kStaticConfig: {
      _internal_mutable_static_config()->::StaticConfigMessage::MergeFrom(from._internal_static_config());
      break;
    }
    case kGetDataCollectionJobs: {
      _internal_mutable_get_data_collection_jobs()->::GetDataCollectionJobsMessage::MergeFrom(from._internal_get_data_collection_jobs());
      break;
    }
    case MESSAGE_BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MessageBody)
}

void MessageBody::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageBody_backend_5fmessage_5fformat_2eproto.base);
  clear_has_message_body();
}

MessageBody::~MessageBody() {
  // @@protoc_insertion_point(destructor:MessageBody)
  SharedDtor();
}

void MessageBody::SharedDtor() {
  if (has_message_body()) {
    clear_message_body();
  }
}

void MessageBody::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageBody& MessageBody::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageBody_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void MessageBody::clear_message_body() {
// @@protoc_insertion_point(one_of_clear_start:MessageBody)
  switch (message_body_case()) {
    case kJobStatus: {
      delete message_body_.job_status_;
      break;
    }
    case kJobStatusRequest: {
      delete message_body_.job_status_request_;
      break;
    }
    case kInitiateGeohashStream: {
      delete message_body_.initiate_geohash_stream_;
      break;
    }
    case kGeoHash: {
      delete message_body_.geo_hash_;
      break;
    }
    case kDataCollectionJobsList: {
      delete message_body_.data_collection_jobs_list_;
      break;
    }
    case kJobstatusAck: {
      delete message_body_.jobstatus_ack_;
      break;
    }
    case kJobStatusRequestAck: {
      delete message_body_.job_status_request_ack_;
      break;
    }
    case kInitiateGeohashAck: {
      delete message_body_.initiate_geohash_ack_;
      break;
    }
    case kGeohashStreamAck: {
      delete message_body_.geohash_stream_ack_;
      break;
    }
    case kDatacollectionJobAck: {
      delete message_body_.datacollection_job_ack_;
      break;
    }
    case kGetStaticConfig: {
      delete message_body_.get_static_config_;
      break;
    }
    case kStaticConfig: {
      delete message_body_.static_config_;
      break;
    }
    case kGetDataCollectionJobs: {
      delete message_body_.get_data_collection_jobs_;
      break;
    }
    case MESSAGE_BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_BODY_NOT_SET;
}


void MessageBody::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message_body();
  _internal_metadata_.Clear();
}

const char* MessageBody::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JobStatusMessage job_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JobStatusRequestMessage job_status_request = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_status_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .InitiateGeohashStreamMessage initiate_geohash_stream = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_initiate_geohash_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GeoHashMessage geo_hash = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_hash(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DataCollectionJobsListMessage data_collection_jobs_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_collection_jobs_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AckMessage jobstatus_ack = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_jobstatus_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AckMessage job_status_request_ack = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_status_request_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AckMessage initiate_geohash_ack = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_initiate_geohash_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AckMessage geohash_stream_ack = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_geohash_stream_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .AckMessage datacollection_job_ack = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_datacollection_job_ack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GetStaticConfigMessage get_static_config = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_static_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .StaticConfigMessage static_config = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_static_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GetDataCollectionJobsMessage get_data_collection_jobs = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_data_collection_jobs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageBody::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageBody)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JobStatusMessage job_status = 1;
  if (_internal_has_job_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::job_status(this), target, stream);
  }

  // .JobStatusRequestMessage job_status_request = 2;
  if (_internal_has_job_status_request()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::job_status_request(this), target, stream);
  }

  // .InitiateGeohashStreamMessage initiate_geohash_stream = 3;
  if (_internal_has_initiate_geohash_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::initiate_geohash_stream(this), target, stream);
  }

  // .GeoHashMessage geo_hash = 4;
  if (_internal_has_geo_hash()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::geo_hash(this), target, stream);
  }

  // .DataCollectionJobsListMessage data_collection_jobs_list = 5;
  if (_internal_has_data_collection_jobs_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::data_collection_jobs_list(this), target, stream);
  }

  // .AckMessage jobstatus_ack = 6;
  if (_internal_has_jobstatus_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::jobstatus_ack(this), target, stream);
  }

  // .AckMessage job_status_request_ack = 7;
  if (_internal_has_job_status_request_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::job_status_request_ack(this), target, stream);
  }

  // .AckMessage initiate_geohash_ack = 8;
  if (_internal_has_initiate_geohash_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::initiate_geohash_ack(this), target, stream);
  }

  // .AckMessage geohash_stream_ack = 9;
  if (_internal_has_geohash_stream_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::geohash_stream_ack(this), target, stream);
  }

  // .AckMessage datacollection_job_ack = 10;
  if (_internal_has_datacollection_job_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::datacollection_job_ack(this), target, stream);
  }

  // .GetStaticConfigMessage get_static_config = 11;
  if (_internal_has_get_static_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::get_static_config(this), target, stream);
  }

  // .StaticConfigMessage static_config = 12;
  if (_internal_has_static_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::static_config(this), target, stream);
  }

  // .GetDataCollectionJobsMessage get_data_collection_jobs = 13;
  if (_internal_has_get_data_collection_jobs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::get_data_collection_jobs(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageBody)
  return target;
}

size_t MessageBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageBody)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_body_case()) {
    // .JobStatusMessage job_status = 1;
    case kJobStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.job_status_);
      break;
    }
    // .JobStatusRequestMessage job_status_request = 2;
    case kJobStatusRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.job_status_request_);
      break;
    }
    // .InitiateGeohashStreamMessage initiate_geohash_stream = 3;
    case kInitiateGeohashStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.initiate_geohash_stream_);
      break;
    }
    // .GeoHashMessage geo_hash = 4;
    case kGeoHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.geo_hash_);
      break;
    }
    // .DataCollectionJobsListMessage data_collection_jobs_list = 5;
    case kDataCollectionJobsList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.data_collection_jobs_list_);
      break;
    }
    // .AckMessage jobstatus_ack = 6;
    case kJobstatusAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.jobstatus_ack_);
      break;
    }
    // .AckMessage job_status_request_ack = 7;
    case kJobStatusRequestAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.job_status_request_ack_);
      break;
    }
    // .AckMessage initiate_geohash_ack = 8;
    case kInitiateGeohashAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.initiate_geohash_ack_);
      break;
    }
    // .AckMessage geohash_stream_ack = 9;
    case kGeohashStreamAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.geohash_stream_ack_);
      break;
    }
    // .AckMessage datacollection_job_ack = 10;
    case kDatacollectionJobAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.datacollection_job_ack_);
      break;
    }
    // .GetStaticConfigMessage get_static_config = 11;
    case kGetStaticConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.get_static_config_);
      break;
    }
    // .StaticConfigMessage static_config = 12;
    case kStaticConfig: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.static_config_);
      break;
    }
    // .GetDataCollectionJobsMessage get_data_collection_jobs = 13;
    case kGetDataCollectionJobs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_body_.get_data_collection_jobs_);
      break;
    }
    case MESSAGE_BODY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageBody::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MessageBody)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageBody* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageBody>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MessageBody)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MessageBody)
    MergeFrom(*source);
  }
}

void MessageBody::MergeFrom(const MessageBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_body_case()) {
    case kJobStatus: {
      _internal_mutable_job_status()->::JobStatusMessage::MergeFrom(from._internal_job_status());
      break;
    }
    case kJobStatusRequest: {
      _internal_mutable_job_status_request()->::JobStatusRequestMessage::MergeFrom(from._internal_job_status_request());
      break;
    }
    case kInitiateGeohashStream: {
      _internal_mutable_initiate_geohash_stream()->::InitiateGeohashStreamMessage::MergeFrom(from._internal_initiate_geohash_stream());
      break;
    }
    case kGeoHash: {
      _internal_mutable_geo_hash()->::GeoHashMessage::MergeFrom(from._internal_geo_hash());
      break;
    }
    case kDataCollectionJobsList: {
      _internal_mutable_data_collection_jobs_list()->::DataCollectionJobsListMessage::MergeFrom(from._internal_data_collection_jobs_list());
      break;
    }
    case kJobstatusAck: {
      _internal_mutable_jobstatus_ack()->::AckMessage::MergeFrom(from._internal_jobstatus_ack());
      break;
    }
    case kJobStatusRequestAck: {
      _internal_mutable_job_status_request_ack()->::AckMessage::MergeFrom(from._internal_job_status_request_ack());
      break;
    }
    case kInitiateGeohashAck: {
      _internal_mutable_initiate_geohash_ack()->::AckMessage::MergeFrom(from._internal_initiate_geohash_ack());
      break;
    }
    case kGeohashStreamAck: {
      _internal_mutable_geohash_stream_ack()->::AckMessage::MergeFrom(from._internal_geohash_stream_ack());
      break;
    }
    case kDatacollectionJobAck: {
      _internal_mutable_datacollection_job_ack()->::AckMessage::MergeFrom(from._internal_datacollection_job_ack());
      break;
    }
    case kGetStaticConfig: {
      _internal_mutable_get_static_config()->::GetStaticConfigMessage::MergeFrom(from._internal_get_static_config());
      break;
    }
    case kStaticConfig: {
      _internal_mutable_static_config()->::StaticConfigMessage::MergeFrom(from._internal_static_config());
      break;
    }
    case kGetDataCollectionJobs: {
      _internal_mutable_get_data_collection_jobs()->::GetDataCollectionJobsMessage::MergeFrom(from._internal_get_data_collection_jobs());
      break;
    }
    case MESSAGE_BODY_NOT_SET: {
      break;
    }
  }
}

void MessageBody::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MessageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageBody::CopyFrom(const MessageBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageBody::IsInitialized() const {
  return true;
}

void MessageBody::InternalSwap(MessageBody* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_body_, other->message_body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageBody::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AckMessage::InitAsDefaultInstance() {
}
class AckMessage::_Internal {
 public:
};

AckMessage::AckMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AckMessage)
}
AckMessage::AckMessage(const AckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:AckMessage)
}

void AckMessage::SharedCtor() {
  status_ = 0;
}

AckMessage::~AckMessage() {
  // @@protoc_insertion_point(destructor:AckMessage)
  SharedDtor();
}

void AckMessage::SharedDtor() {
}

void AckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AckMessage& AckMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AckMessage_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void AckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:AckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  _internal_metadata_.Clear();
}

const char* AckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .AckMessage.Status_Code status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::AckMessage_Status_Code>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AckMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .AckMessage.Status_Code status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AckMessage)
  return target;
}

size_t AckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AckMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .AckMessage.Status_Code status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AckMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AckMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AckMessage)
    MergeFrom(*source);
  }
}

void AckMessage::MergeFrom(const AckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void AckMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckMessage::CopyFrom(const AckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMessage::IsInitialized() const {
  return true;
}

void AckMessage::InternalSwap(AckMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusMessage::InitAsDefaultInstance() {
}
class JobStatusMessage::_Internal {
 public:
};

JobStatusMessage::JobStatusMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobStatusMessage)
}
JobStatusMessage::JobStatusMessage(const JobStatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      dc_job_(from.dc_job_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&content_type_, &from.content_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_supported_jobs_) -
    reinterpret_cast<char*>(&content_type_)) + sizeof(max_supported_jobs_));
  // @@protoc_insertion_point(copy_constructor:JobStatusMessage)
}

void JobStatusMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStatusMessage_backend_5fmessage_5fformat_2eproto.base);
  ::memset(&content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_supported_jobs_) -
      reinterpret_cast<char*>(&content_type_)) + sizeof(max_supported_jobs_));
}

JobStatusMessage::~JobStatusMessage() {
  // @@protoc_insertion_point(destructor:JobStatusMessage)
  SharedDtor();
}

void JobStatusMessage::SharedDtor() {
}

void JobStatusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusMessage& JobStatusMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusMessage_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void JobStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JobStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dc_job_.Clear();
  ::memset(&content_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_supported_jobs_) -
      reinterpret_cast<char*>(&content_type_)) + sizeof(max_supported_jobs_));
  _internal_metadata_.Clear();
}

const char* JobStatusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Content_Type content_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::Content_Type>(val));
        } else goto handle_unusual;
        continue;
      // repeated .Job dc_job = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dc_job(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 max_supported_jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_supported_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobStatusMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Content_Type content_type = 1;
  if (this->content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_content_type(), target);
  }

  // repeated .Job dc_job = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dc_job_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_dc_job(i), target, stream);
  }

  // int32 max_supported_jobs = 3;
  if (this->max_supported_jobs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_supported_jobs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobStatusMessage)
  return target;
}

size_t JobStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JobStatusMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Job dc_job = 2;
  total_size += 1UL * this->_internal_dc_job_size();
  for (const auto& msg : this->dc_job_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Content_Type content_type = 1;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  // int32 max_supported_jobs = 3;
  if (this->max_supported_jobs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_supported_jobs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JobStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JobStatusMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JobStatusMessage)
    MergeFrom(*source);
  }
}

void JobStatusMessage::MergeFrom(const JobStatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JobStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dc_job_.MergeFrom(from.dc_job_);
  if (from.content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
  if (from.max_supported_jobs() != 0) {
    _internal_set_max_supported_jobs(from._internal_max_supported_jobs());
  }
}

void JobStatusMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JobStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusMessage::CopyFrom(const JobStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JobStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusMessage::IsInitialized() const {
  return true;
}

void JobStatusMessage::InternalSwap(JobStatusMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dc_job_.InternalSwap(&other->dc_job_);
  swap(content_type_, other->content_type_);
  swap(max_supported_jobs_, other->max_supported_jobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusRequestMessage::InitAsDefaultInstance() {
}
class JobStatusRequestMessage::_Internal {
 public:
};

JobStatusRequestMessage::JobStatusRequestMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobStatusRequestMessage)
}
JobStatusRequestMessage::JobStatusRequestMessage(const JobStatusRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  content_type_ = from.content_type_;
  // @@protoc_insertion_point(copy_constructor:JobStatusRequestMessage)
}

void JobStatusRequestMessage::SharedCtor() {
  content_type_ = 0;
}

JobStatusRequestMessage::~JobStatusRequestMessage() {
  // @@protoc_insertion_point(destructor:JobStatusRequestMessage)
  SharedDtor();
}

void JobStatusRequestMessage::SharedDtor() {
}

void JobStatusRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusRequestMessage& JobStatusRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusRequestMessage_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void JobStatusRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:JobStatusRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_type_ = 0;
  _internal_metadata_.Clear();
}

const char* JobStatusRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Content_Type content_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_content_type(static_cast<::Content_Type>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobStatusRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Content_Type content_type = 1;
  if (this->content_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobStatusRequestMessage)
  return target;
}

size_t JobStatusRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JobStatusRequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Content_Type content_type = 1;
  if (this->content_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_content_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusRequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JobStatusRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusRequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusRequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JobStatusRequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JobStatusRequestMessage)
    MergeFrom(*source);
  }
}

void JobStatusRequestMessage::MergeFrom(const JobStatusRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JobStatusRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.content_type() != 0) {
    _internal_set_content_type(from._internal_content_type());
  }
}

void JobStatusRequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JobStatusRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusRequestMessage::CopyFrom(const JobStatusRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JobStatusRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusRequestMessage::IsInitialized() const {
  return true;
}

void JobStatusRequestMessage::InternalSwap(JobStatusRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(content_type_, other->content_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusRequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InitiateGeohashStreamMessage::InitAsDefaultInstance() {
}
class InitiateGeohashStreamMessage::_Internal {
 public:
};

InitiateGeohashStreamMessage::InitiateGeohashStreamMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:InitiateGeohashStreamMessage)
}
InitiateGeohashStreamMessage::InitiateGeohashStreamMessage(const InitiateGeohashStreamMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      areas_(from.areas_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enabled_ = from.enabled_;
  // @@protoc_insertion_point(copy_constructor:InitiateGeohashStreamMessage)
}

void InitiateGeohashStreamMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitiateGeohashStreamMessage_backend_5fmessage_5fformat_2eproto.base);
  enabled_ = false;
}

InitiateGeohashStreamMessage::~InitiateGeohashStreamMessage() {
  // @@protoc_insertion_point(destructor:InitiateGeohashStreamMessage)
  SharedDtor();
}

void InitiateGeohashStreamMessage::SharedDtor() {
}

void InitiateGeohashStreamMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitiateGeohashStreamMessage& InitiateGeohashStreamMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitiateGeohashStreamMessage_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void InitiateGeohashStreamMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:InitiateGeohashStreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  areas_.Clear();
  enabled_ = false;
  _internal_metadata_.Clear();
}

const char* InitiateGeohashStreamMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .GeohashStreamArea areas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_areas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitiateGeohashStreamMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:InitiateGeohashStreamMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // repeated .GeohashStreamArea areas = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_areas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_areas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:InitiateGeohashStreamMessage)
  return target;
}

size_t InitiateGeohashStreamMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:InitiateGeohashStreamMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GeohashStreamArea areas = 2;
  total_size += 1UL * this->_internal_areas_size();
  for (const auto& msg : this->areas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool enabled = 1;
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitiateGeohashStreamMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:InitiateGeohashStreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const InitiateGeohashStreamMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitiateGeohashStreamMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:InitiateGeohashStreamMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:InitiateGeohashStreamMessage)
    MergeFrom(*source);
  }
}

void InitiateGeohashStreamMessage::MergeFrom(const InitiateGeohashStreamMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:InitiateGeohashStreamMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  areas_.MergeFrom(from.areas_);
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void InitiateGeohashStreamMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:InitiateGeohashStreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitiateGeohashStreamMessage::CopyFrom(const InitiateGeohashStreamMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:InitiateGeohashStreamMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiateGeohashStreamMessage::IsInitialized() const {
  return true;
}

void InitiateGeohashStreamMessage::InternalSwap(InitiateGeohashStreamMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  areas_.InternalSwap(&other->areas_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InitiateGeohashStreamMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeohashStreamArea::InitAsDefaultInstance() {
  ::_GeohashStreamArea_default_instance_._instance.get_mutable()->geo_area_ = const_cast< ::CompositeLocationArea*>(
      ::CompositeLocationArea::internal_default_instance());
}
class GeohashStreamArea::_Internal {
 public:
  static const ::CompositeLocationArea& geo_area(const GeohashStreamArea* msg);
};

const ::CompositeLocationArea&
GeohashStreamArea::_Internal::geo_area(const GeohashStreamArea* msg) {
  return *msg->geo_area_;
}
GeohashStreamArea::GeohashStreamArea()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GeohashStreamArea)
}
GeohashStreamArea::GeohashStreamArea(const GeohashStreamArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_geo_area()) {
    geo_area_ = new ::CompositeLocationArea(*from.geo_area_);
  } else {
    geo_area_ = nullptr;
  }
  precision_ = from.precision_;
  // @@protoc_insertion_point(copy_constructor:GeohashStreamArea)
}

void GeohashStreamArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeohashStreamArea_backend_5fmessage_5fformat_2eproto.base);
  ::memset(&geo_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&precision_) -
      reinterpret_cast<char*>(&geo_area_)) + sizeof(precision_));
}

GeohashStreamArea::~GeohashStreamArea() {
  // @@protoc_insertion_point(destructor:GeohashStreamArea)
  SharedDtor();
}

void GeohashStreamArea::SharedDtor() {
  if (this != internal_default_instance()) delete geo_area_;
}

void GeohashStreamArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeohashStreamArea& GeohashStreamArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeohashStreamArea_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void GeohashStreamArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GeohashStreamArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && geo_area_ != nullptr) {
    delete geo_area_;
  }
  geo_area_ = nullptr;
  precision_ = 0;
  _internal_metadata_.Clear();
}

const char* GeohashStreamArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 precision = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          precision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .CompositeLocationArea geo_area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeohashStreamArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GeohashStreamArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 precision = 1;
  if (this->precision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_precision(), target);
  }

  // .CompositeLocationArea geo_area = 2;
  if (this->has_geo_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geo_area(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GeohashStreamArea)
  return target;
}

size_t GeohashStreamArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GeohashStreamArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .CompositeLocationArea geo_area = 2;
  if (this->has_geo_area()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_area_);
  }

  // int32 precision = 1;
  if (this->precision() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_precision());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeohashStreamArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GeohashStreamArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GeohashStreamArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeohashStreamArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GeohashStreamArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GeohashStreamArea)
    MergeFrom(*source);
  }
}

void GeohashStreamArea::MergeFrom(const GeohashStreamArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GeohashStreamArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_geo_area()) {
    _internal_mutable_geo_area()->::CompositeLocationArea::MergeFrom(from._internal_geo_area());
  }
  if (from.precision() != 0) {
    _internal_set_precision(from._internal_precision());
  }
}

void GeohashStreamArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GeohashStreamArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeohashStreamArea::CopyFrom(const GeohashStreamArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GeohashStreamArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeohashStreamArea::IsInitialized() const {
  return true;
}

void GeohashStreamArea::InternalSwap(GeohashStreamArea* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(geo_area_, other->geo_area_);
  swap(precision_, other->precision_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeohashStreamArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoHashMessage::InitAsDefaultInstance() {
}
class GeoHashMessage::_Internal {
 public:
};

GeoHashMessage::GeoHashMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GeoHashMessage)
}
GeoHashMessage::GeoHashMessage(const GeoHashMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  geo_hash_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_geo_hash_value().empty()) {
    geo_hash_value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geo_hash_value_);
  }
  // @@protoc_insertion_point(copy_constructor:GeoHashMessage)
}

void GeoHashMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoHashMessage_backend_5fmessage_5fformat_2eproto.base);
  geo_hash_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GeoHashMessage::~GeoHashMessage() {
  // @@protoc_insertion_point(destructor:GeoHashMessage)
  SharedDtor();
}

void GeoHashMessage::SharedDtor() {
  geo_hash_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeoHashMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoHashMessage& GeoHashMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoHashMessage_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void GeoHashMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GeoHashMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_hash_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GeoHashMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string geo_hash_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_geo_hash_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GeoHashMessage.geo_hash_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoHashMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GeoHashMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string geo_hash_value = 1;
  if (this->geo_hash_value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_geo_hash_value().data(), static_cast<int>(this->_internal_geo_hash_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GeoHashMessage.geo_hash_value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_geo_hash_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GeoHashMessage)
  return target;
}

size_t GeoHashMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GeoHashMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string geo_hash_value = 1;
  if (this->geo_hash_value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_geo_hash_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoHashMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GeoHashMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoHashMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoHashMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GeoHashMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GeoHashMessage)
    MergeFrom(*source);
  }
}

void GeoHashMessage::MergeFrom(const GeoHashMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GeoHashMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.geo_hash_value().size() > 0) {

    geo_hash_value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.geo_hash_value_);
  }
}

void GeoHashMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GeoHashMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoHashMessage::CopyFrom(const GeoHashMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GeoHashMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoHashMessage::IsInitialized() const {
  return true;
}

void GeoHashMessage::InternalSwap(GeoHashMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geo_hash_value_.Swap(&other->geo_hash_value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoHashMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Job::InitAsDefaultInstance() {
  ::_Job_default_instance_._instance.get_mutable()->job_status_ = const_cast< ::JobStatus*>(
      ::JobStatus::internal_default_instance());
  ::_Job_default_instance_._instance.get_mutable()->reason_ = const_cast< ::JobStatusReason*>(
      ::JobStatusReason::internal_default_instance());
  ::_Job_default_instance_._instance.get_mutable()->job_statistics_ = const_cast< ::JobStatistics*>(
      ::JobStatistics::internal_default_instance());
}
class Job::_Internal {
 public:
  static const ::JobStatus& job_status(const Job* msg);
  static const ::JobStatusReason& reason(const Job* msg);
  static const ::JobStatistics& job_statistics(const Job* msg);
};

const ::JobStatus&
Job::_Internal::job_status(const Job* msg) {
  return *msg->job_status_;
}
const ::JobStatusReason&
Job::_Internal::reason(const Job* msg) {
  return *msg->reason_;
}
const ::JobStatistics&
Job::_Internal::job_statistics(const Job* msg) {
  return *msg->job_statistics_;
}
Job::Job()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Job)
}
Job::Job(const Job& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      job_warnings_(from.job_warnings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_id().empty()) {
    job_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_id_);
  }
  if (from._internal_has_job_status()) {
    job_status_ = new ::JobStatus(*from.job_status_);
  } else {
    job_status_ = nullptr;
  }
  if (from._internal_has_reason()) {
    reason_ = new ::JobStatusReason(*from.reason_);
  } else {
    reason_ = nullptr;
  }
  if (from._internal_has_job_statistics()) {
    job_statistics_ = new ::JobStatistics(*from.job_statistics_);
  } else {
    job_statistics_ = nullptr;
  }
  utc_timestamp_ms_ = from.utc_timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:Job)
}

void Job::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Job_backend_5fmessage_5fformat_2eproto.base);
  job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&job_status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utc_timestamp_ms_) -
      reinterpret_cast<char*>(&job_status_)) + sizeof(utc_timestamp_ms_));
}

Job::~Job() {
  // @@protoc_insertion_point(destructor:Job)
  SharedDtor();
}

void Job::SharedDtor() {
  job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete job_status_;
  if (this != internal_default_instance()) delete reason_;
  if (this != internal_default_instance()) delete job_statistics_;
}

void Job::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Job& Job::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Job_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void Job::Clear() {
// @@protoc_insertion_point(message_clear_start:Job)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_warnings_.Clear();
  job_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && job_status_ != nullptr) {
    delete job_status_;
  }
  job_status_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reason_ != nullptr) {
    delete reason_;
  }
  reason_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && job_statistics_ != nullptr) {
    delete job_statistics_;
  }
  job_statistics_ = nullptr;
  utc_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* Job::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Job.job_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JobStatus job_status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JobStatusReason reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reason(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .JobStatistics job_statistics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_statistics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .JobWarnings job_warnings = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_job_warnings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // uint64 utc_timestamp_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          utc_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Job::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Job)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_id().data(), static_cast<int>(this->_internal_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Job.job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_id(), target);
  }

  // .JobStatus job_status = 2;
  if (this->has_job_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::job_status(this), target, stream);
  }

  // .JobStatusReason reason = 3;
  if (this->has_reason()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reason(this), target, stream);
  }

  // .JobStatistics job_statistics = 4;
  if (this->has_job_statistics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::job_statistics(this), target, stream);
  }

  // repeated .JobWarnings job_warnings = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_job_warnings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_job_warnings(i), target, stream);
  }

  // uint64 utc_timestamp_ms = 6;
  if (this->utc_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_utc_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Job)
  return target;
}

size_t Job::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Job)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .JobWarnings job_warnings = 5;
  total_size += 1UL * this->_internal_job_warnings_size();
  for (const auto& msg : this->job_warnings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string job_id = 1;
  if (this->job_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_id());
  }

  // .JobStatus job_status = 2;
  if (this->has_job_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_status_);
  }

  // .JobStatusReason reason = 3;
  if (this->has_reason()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reason_);
  }

  // .JobStatistics job_statistics = 4;
  if (this->has_job_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_statistics_);
  }

  // uint64 utc_timestamp_ms = 6;
  if (this->utc_timestamp_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc_timestamp_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Job::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Job)
  GOOGLE_DCHECK_NE(&from, this);
  const Job* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Job>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Job)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Job)
    MergeFrom(*source);
  }
}

void Job::MergeFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Job)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  job_warnings_.MergeFrom(from.job_warnings_);
  if (from.job_id().size() > 0) {

    job_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_id_);
  }
  if (from.has_job_status()) {
    _internal_mutable_job_status()->::JobStatus::MergeFrom(from._internal_job_status());
  }
  if (from.has_reason()) {
    _internal_mutable_reason()->::JobStatusReason::MergeFrom(from._internal_reason());
  }
  if (from.has_job_statistics()) {
    _internal_mutable_job_statistics()->::JobStatistics::MergeFrom(from._internal_job_statistics());
  }
  if (from.utc_timestamp_ms() != 0) {
    _internal_set_utc_timestamp_ms(from._internal_utc_timestamp_ms());
  }
}

void Job::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Job::CopyFrom(const Job& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Job)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Job::IsInitialized() const {
  return true;
}

void Job::InternalSwap(Job* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  job_warnings_.InternalSwap(&other->job_warnings_);
  job_id_.Swap(&other->job_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(job_status_, other->job_status_);
  swap(reason_, other->reason_);
  swap(job_statistics_, other->job_statistics_);
  swap(utc_timestamp_ms_, other->utc_timestamp_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Job::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatusReason::InitAsDefaultInstance() {
}
class JobStatusReason::_Internal {
 public:
};

JobStatusReason::JobStatusReason()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobStatusReason)
}
JobStatusReason::JobStatusReason(const JobStatusReason& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:JobStatusReason)
}

void JobStatusReason::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobStatusReason_backend_5fmessage_5fformat_2eproto.base);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_ = 0;
}

JobStatusReason::~JobStatusReason() {
  // @@protoc_insertion_point(destructor:JobStatusReason)
  SharedDtor();
}

void JobStatusReason::SharedDtor() {
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobStatusReason::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatusReason& JobStatusReason::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatusReason_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void JobStatusReason::Clear() {
// @@protoc_insertion_point(message_clear_start:JobStatusReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reason_ = 0;
  _internal_metadata_.Clear();
}

const char* JobStatusReason::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JobStatusReason.Reason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::JobStatusReason_Reason>(val));
        } else goto handle_unusual;
        continue;
      // string detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JobStatusReason.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatusReason::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobStatusReason)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JobStatusReason.Reason reason = 1;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  // string detail = 2;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JobStatusReason.detail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobStatusReason)
  return target;
}

size_t JobStatusReason::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JobStatusReason)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 2;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // .JobStatusReason.Reason reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatusReason::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JobStatusReason)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatusReason* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatusReason>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JobStatusReason)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JobStatusReason)
    MergeFrom(*source);
  }
}

void JobStatusReason::MergeFrom(const JobStatusReason& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JobStatusReason)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void JobStatusReason::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JobStatusReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatusReason::CopyFrom(const JobStatusReason& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JobStatusReason)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatusReason::IsInitialized() const {
  return true;
}

void JobStatusReason::InternalSwap(JobStatusReason* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatusReason::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobWarnings::InitAsDefaultInstance() {
}
class JobWarnings::_Internal {
 public:
};

JobWarnings::JobWarnings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobWarnings)
}
JobWarnings::JobWarnings(const JobWarnings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_detail().empty()) {
    detail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  ::memcpy(&utc_timestamp_ms_, &from.utc_timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&warning_) -
    reinterpret_cast<char*>(&utc_timestamp_ms_)) + sizeof(warning_));
  // @@protoc_insertion_point(copy_constructor:JobWarnings)
}

void JobWarnings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobWarnings_backend_5fmessage_5fformat_2eproto.base);
  detail_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&utc_timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warning_) -
      reinterpret_cast<char*>(&utc_timestamp_ms_)) + sizeof(warning_));
}

JobWarnings::~JobWarnings() {
  // @@protoc_insertion_point(destructor:JobWarnings)
  SharedDtor();
}

void JobWarnings::SharedDtor() {
  detail_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void JobWarnings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobWarnings& JobWarnings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobWarnings_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void JobWarnings::Clear() {
// @@protoc_insertion_point(message_clear_start:JobWarnings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&utc_timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&warning_) -
      reinterpret_cast<char*>(&utc_timestamp_ms_)) + sizeof(warning_));
  _internal_metadata_.Clear();
}

const char* JobWarnings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JobWarnings.Warnings warning = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_warning(static_cast<::JobWarnings_Warnings>(val));
        } else goto handle_unusual;
        continue;
      // string detail = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_detail();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "JobWarnings.detail"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 utc_timestamp_ms = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          utc_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobWarnings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobWarnings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JobWarnings.Warnings warning = 1;
  if (this->warning() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_warning(), target);
  }

  // string detail = 2;
  if (this->detail().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail().data(), static_cast<int>(this->_internal_detail().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "JobWarnings.detail");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_detail(), target);
  }

  // uint64 utc_timestamp_ms = 3;
  if (this->utc_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_utc_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobWarnings)
  return target;
}

size_t JobWarnings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JobWarnings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string detail = 2;
  if (this->detail().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail());
  }

  // uint64 utc_timestamp_ms = 3;
  if (this->utc_timestamp_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc_timestamp_ms());
  }

  // .JobWarnings.Warnings warning = 1;
  if (this->warning() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_warning());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobWarnings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JobWarnings)
  GOOGLE_DCHECK_NE(&from, this);
  const JobWarnings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobWarnings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JobWarnings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JobWarnings)
    MergeFrom(*source);
  }
}

void JobWarnings::MergeFrom(const JobWarnings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JobWarnings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.detail().size() > 0) {

    detail_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.detail_);
  }
  if (from.utc_timestamp_ms() != 0) {
    _internal_set_utc_timestamp_ms(from._internal_utc_timestamp_ms());
  }
  if (from.warning() != 0) {
    _internal_set_warning(from._internal_warning());
  }
}

void JobWarnings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JobWarnings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobWarnings::CopyFrom(const JobWarnings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JobWarnings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobWarnings::IsInitialized() const {
  return true;
}

void JobWarnings::InternalSwap(JobWarnings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  detail_.Swap(&other->detail_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(utc_timestamp_ms_, other->utc_timestamp_ms_);
  swap(warning_, other->warning_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobWarnings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatistics::InitAsDefaultInstance() {
}
class JobStatistics::_Internal {
 public:
};

JobStatistics::JobStatistics()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobStatistics)
}
JobStatistics::JobStatistics(const JobStatistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&driven_km_, &from.driven_km_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_of_uploaded_files_) -
    reinterpret_cast<char*>(&driven_km_)) + sizeof(num_of_uploaded_files_));
  // @@protoc_insertion_point(copy_constructor:JobStatistics)
}

void JobStatistics::SharedCtor() {
  ::memset(&driven_km_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_of_uploaded_files_) -
      reinterpret_cast<char*>(&driven_km_)) + sizeof(num_of_uploaded_files_));
}

JobStatistics::~JobStatistics() {
  // @@protoc_insertion_point(destructor:JobStatistics)
  SharedDtor();
}

void JobStatistics::SharedDtor() {
}

void JobStatistics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatistics& JobStatistics::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatistics_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void JobStatistics::Clear() {
// @@protoc_insertion_point(message_clear_start:JobStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&driven_km_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_of_uploaded_files_) -
      reinterpret_cast<char*>(&driven_km_)) + sizeof(num_of_uploaded_files_));
  _internal_metadata_.Clear();
}

const char* JobStatistics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 driven_km = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          driven_km_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 driven_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          driven_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 num_Of_uploaded_files = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          num_of_uploaded_files_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 utc_timestamp_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          utc_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatistics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobStatistics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 driven_km = 1;
  if (this->driven_km() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_driven_km(), target);
  }

  // int32 driven_time = 2;
  if (this->driven_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_driven_time(), target);
  }

  // int32 num_Of_uploaded_files = 3;
  if (this->num_of_uploaded_files() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_num_of_uploaded_files(), target);
  }

  // uint64 utc_timestamp_ms = 4;
  if (this->utc_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_utc_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobStatistics)
  return target;
}

size_t JobStatistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JobStatistics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 driven_km = 1;
  if (this->driven_km() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_driven_km());
  }

  // int32 driven_time = 2;
  if (this->driven_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_driven_time());
  }

  // uint64 utc_timestamp_ms = 4;
  if (this->utc_timestamp_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc_timestamp_ms());
  }

  // int32 num_Of_uploaded_files = 3;
  if (this->num_of_uploaded_files() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_of_uploaded_files());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatistics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JobStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatistics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatistics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JobStatistics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JobStatistics)
    MergeFrom(*source);
  }
}

void JobStatistics::MergeFrom(const JobStatistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JobStatistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.driven_km() != 0) {
    _internal_set_driven_km(from._internal_driven_km());
  }
  if (from.driven_time() != 0) {
    _internal_set_driven_time(from._internal_driven_time());
  }
  if (from.utc_timestamp_ms() != 0) {
    _internal_set_utc_timestamp_ms(from._internal_utc_timestamp_ms());
  }
  if (from.num_of_uploaded_files() != 0) {
    _internal_set_num_of_uploaded_files(from._internal_num_of_uploaded_files());
  }
}

void JobStatistics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JobStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatistics::CopyFrom(const JobStatistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JobStatistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatistics::IsInitialized() const {
  return true;
}

void JobStatistics::InternalSwap(JobStatistics* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(driven_km_, other->driven_km_);
  swap(driven_time_, other->driven_time_);
  swap(utc_timestamp_ms_, other->utc_timestamp_ms_);
  swap(num_of_uploaded_files_, other->num_of_uploaded_files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatistics::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobStatus::InitAsDefaultInstance() {
}
class JobStatus::_Internal {
 public:
};

JobStatus::JobStatus()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:JobStatus)
}
JobStatus::JobStatus(const JobStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&utc_timestamp_ms_, &from.utc_timestamp_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&job_status_) -
    reinterpret_cast<char*>(&utc_timestamp_ms_)) + sizeof(job_status_));
  // @@protoc_insertion_point(copy_constructor:JobStatus)
}

void JobStatus::SharedCtor() {
  ::memset(&utc_timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_status_) -
      reinterpret_cast<char*>(&utc_timestamp_ms_)) + sizeof(job_status_));
}

JobStatus::~JobStatus() {
  // @@protoc_insertion_point(destructor:JobStatus)
  SharedDtor();
}

void JobStatus::SharedDtor() {
}

void JobStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobStatus& JobStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobStatus_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void JobStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:JobStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&utc_timestamp_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&job_status_) -
      reinterpret_cast<char*>(&utc_timestamp_ms_)) + sizeof(job_status_));
  _internal_metadata_.Clear();
}

const char* JobStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .JobStatus.Job_Status job_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_job_status(static_cast<::JobStatus_Job_Status>(val));
        } else goto handle_unusual;
        continue;
      // uint64 utc_timestamp_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          utc_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:JobStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .JobStatus.Job_Status job_status = 1;
  if (this->job_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_job_status(), target);
  }

  // uint64 utc_timestamp_ms = 2;
  if (this->utc_timestamp_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_utc_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:JobStatus)
  return target;
}

size_t JobStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:JobStatus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 utc_timestamp_ms = 2;
  if (this->utc_timestamp_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc_timestamp_ms());
  }

  // .JobStatus.Job_Status job_status = 1;
  if (this->job_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_job_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:JobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const JobStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:JobStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:JobStatus)
    MergeFrom(*source);
  }
}

void JobStatus::MergeFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:JobStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.utc_timestamp_ms() != 0) {
    _internal_set_utc_timestamp_ms(from._internal_utc_timestamp_ms());
  }
  if (from.job_status() != 0) {
    _internal_set_job_status(from._internal_job_status());
  }
}

void JobStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobStatus::CopyFrom(const JobStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:JobStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobStatus::IsInitialized() const {
  return true;
}

void JobStatus::InternalSwap(JobStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(utc_timestamp_ms_, other->utc_timestamp_ms_);
  swap(job_status_, other->job_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoCoordinateArea::InitAsDefaultInstance() {
}
class GeoCoordinateArea::_Internal {
 public:
};

GeoCoordinateArea::GeoCoordinateArea()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GeoCoordinateArea)
}
GeoCoordinateArea::GeoCoordinateArea(const GeoCoordinateArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_deg_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(longitude_deg_));
  // @@protoc_insertion_point(copy_constructor:GeoCoordinateArea)
}

void GeoCoordinateArea::SharedCtor() {
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_deg_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(longitude_deg_));
}

GeoCoordinateArea::~GeoCoordinateArea() {
  // @@protoc_insertion_point(destructor:GeoCoordinateArea)
  SharedDtor();
}

void GeoCoordinateArea::SharedDtor() {
}

void GeoCoordinateArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoCoordinateArea& GeoCoordinateArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoCoordinateArea_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void GeoCoordinateArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GeoCoordinateArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_deg_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(longitude_deg_));
  _internal_metadata_.Clear();
}

const char* GeoCoordinateArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoCoordinateArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GeoCoordinateArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GeoCoordinateArea)
  return target;
}

size_t GeoCoordinateArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GeoCoordinateArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoCoordinateArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GeoCoordinateArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoCoordinateArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoCoordinateArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GeoCoordinateArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GeoCoordinateArea)
    MergeFrom(*source);
  }
}

void GeoCoordinateArea::MergeFrom(const GeoCoordinateArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GeoCoordinateArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
}

void GeoCoordinateArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GeoCoordinateArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoCoordinateArea::CopyFrom(const GeoCoordinateArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GeoCoordinateArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoCoordinateArea::IsInitialized() const {
  return true;
}

void GeoCoordinateArea::InternalSwap(GeoCoordinateArea* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_deg_, other->latitude_deg_);
  swap(longitude_deg_, other->longitude_deg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoCoordinateArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoRectangleArea::InitAsDefaultInstance() {
  ::_GeoRectangleArea_default_instance_._instance.get_mutable()->top_left_ = const_cast< ::GeoCoordinateArea*>(
      ::GeoCoordinateArea::internal_default_instance());
  ::_GeoRectangleArea_default_instance_._instance.get_mutable()->bottom_right_ = const_cast< ::GeoCoordinateArea*>(
      ::GeoCoordinateArea::internal_default_instance());
}
class GeoRectangleArea::_Internal {
 public:
  static const ::GeoCoordinateArea& top_left(const GeoRectangleArea* msg);
  static const ::GeoCoordinateArea& bottom_right(const GeoRectangleArea* msg);
};

const ::GeoCoordinateArea&
GeoRectangleArea::_Internal::top_left(const GeoRectangleArea* msg) {
  return *msg->top_left_;
}
const ::GeoCoordinateArea&
GeoRectangleArea::_Internal::bottom_right(const GeoRectangleArea* msg) {
  return *msg->bottom_right_;
}
GeoRectangleArea::GeoRectangleArea()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GeoRectangleArea)
}
GeoRectangleArea::GeoRectangleArea(const GeoRectangleArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_top_left()) {
    top_left_ = new ::GeoCoordinateArea(*from.top_left_);
  } else {
    top_left_ = nullptr;
  }
  if (from._internal_has_bottom_right()) {
    bottom_right_ = new ::GeoCoordinateArea(*from.bottom_right_);
  } else {
    bottom_right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:GeoRectangleArea)
}

void GeoRectangleArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoRectangleArea_backend_5fmessage_5fformat_2eproto.base);
  ::memset(&top_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_right_) -
      reinterpret_cast<char*>(&top_left_)) + sizeof(bottom_right_));
}

GeoRectangleArea::~GeoRectangleArea() {
  // @@protoc_insertion_point(destructor:GeoRectangleArea)
  SharedDtor();
}

void GeoRectangleArea::SharedDtor() {
  if (this != internal_default_instance()) delete top_left_;
  if (this != internal_default_instance()) delete bottom_right_;
}

void GeoRectangleArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoRectangleArea& GeoRectangleArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoRectangleArea_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void GeoRectangleArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GeoRectangleArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && top_left_ != nullptr) {
    delete top_left_;
  }
  top_left_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bottom_right_ != nullptr) {
    delete bottom_right_;
  }
  bottom_right_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GeoRectangleArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GeoCoordinateArea top_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GeoCoordinateArea bottom_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoRectangleArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GeoRectangleArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GeoCoordinateArea top_left = 1;
  if (this->has_top_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::top_left(this), target, stream);
  }

  // .GeoCoordinateArea bottom_right = 2;
  if (this->has_bottom_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bottom_right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GeoRectangleArea)
  return target;
}

size_t GeoRectangleArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GeoRectangleArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GeoCoordinateArea top_left = 1;
  if (this->has_top_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_left_);
  }

  // .GeoCoordinateArea bottom_right = 2;
  if (this->has_bottom_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bottom_right_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoRectangleArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GeoRectangleArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoRectangleArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoRectangleArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GeoRectangleArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GeoRectangleArea)
    MergeFrom(*source);
  }
}

void GeoRectangleArea::MergeFrom(const GeoRectangleArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GeoRectangleArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_top_left()) {
    _internal_mutable_top_left()->::GeoCoordinateArea::MergeFrom(from._internal_top_left());
  }
  if (from.has_bottom_right()) {
    _internal_mutable_bottom_right()->::GeoCoordinateArea::MergeFrom(from._internal_bottom_right());
  }
}

void GeoRectangleArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GeoRectangleArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoRectangleArea::CopyFrom(const GeoRectangleArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GeoRectangleArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRectangleArea::IsInitialized() const {
  return true;
}

void GeoRectangleArea::InternalSwap(GeoRectangleArea* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(top_left_, other->top_left_);
  swap(bottom_right_, other->bottom_right_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoRectangleArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoCircleArea::InitAsDefaultInstance() {
  ::_GeoCircleArea_default_instance_._instance.get_mutable()->center_ = const_cast< ::GeoCoordinateArea*>(
      ::GeoCoordinateArea::internal_default_instance());
}
class GeoCircleArea::_Internal {
 public:
  static const ::GeoCoordinateArea& center(const GeoCircleArea* msg);
};

const ::GeoCoordinateArea&
GeoCircleArea::_Internal::center(const GeoCircleArea* msg) {
  return *msg->center_;
}
GeoCircleArea::GeoCircleArea()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GeoCircleArea)
}
GeoCircleArea::GeoCircleArea(const GeoCircleArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::GeoCoordinateArea(*from.center_);
  } else {
    center_ = nullptr;
  }
  radius_m_ = from.radius_m_;
  // @@protoc_insertion_point(copy_constructor:GeoCircleArea)
}

void GeoCircleArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoCircleArea_backend_5fmessage_5fformat_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_m_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_m_));
}

GeoCircleArea::~GeoCircleArea() {
  // @@protoc_insertion_point(destructor:GeoCircleArea)
  SharedDtor();
}

void GeoCircleArea::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void GeoCircleArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoCircleArea& GeoCircleArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoCircleArea_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void GeoCircleArea::Clear() {
// @@protoc_insertion_point(message_clear_start:GeoCircleArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  radius_m_ = 0;
  _internal_metadata_.Clear();
}

const char* GeoCircleArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .GeoCoordinateArea center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoCircleArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GeoCircleArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .GeoCoordinateArea center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // double radius_m = 2;
  if (!(this->radius_m() <= 0 && this->radius_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GeoCircleArea)
  return target;
}

size_t GeoCircleArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GeoCircleArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .GeoCoordinateArea center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // double radius_m = 2;
  if (!(this->radius_m() <= 0 && this->radius_m() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoCircleArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GeoCircleArea)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoCircleArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoCircleArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GeoCircleArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GeoCircleArea)
    MergeFrom(*source);
  }
}

void GeoCircleArea::MergeFrom(const GeoCircleArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GeoCircleArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::GeoCoordinateArea::MergeFrom(from._internal_center());
  }
  if (!(from.radius_m() <= 0 && from.radius_m() >= 0)) {
    _internal_set_radius_m(from._internal_radius_m());
  }
}

void GeoCircleArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GeoCircleArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoCircleArea::CopyFrom(const GeoCircleArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GeoCircleArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoCircleArea::IsInitialized() const {
  return true;
}

void GeoCircleArea::InternalSwap(GeoCircleArea* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(center_, other->center_);
  swap(radius_m_, other->radius_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoCircleArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompositeLocationArea::InitAsDefaultInstance() {
}
class CompositeLocationArea::_Internal {
 public:
};

CompositeLocationArea::CompositeLocationArea()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CompositeLocationArea)
}
CompositeLocationArea::CompositeLocationArea(const CompositeLocationArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      geo_circles_(from.geo_circles_),
      geo_rectangles_(from.geo_rectangles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:CompositeLocationArea)
}

void CompositeLocationArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompositeLocationArea_backend_5fmessage_5fformat_2eproto.base);
}

CompositeLocationArea::~CompositeLocationArea() {
  // @@protoc_insertion_point(destructor:CompositeLocationArea)
  SharedDtor();
}

void CompositeLocationArea::SharedDtor() {
}

void CompositeLocationArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompositeLocationArea& CompositeLocationArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompositeLocationArea_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void CompositeLocationArea::Clear() {
// @@protoc_insertion_point(message_clear_start:CompositeLocationArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_circles_.Clear();
  geo_rectangles_.Clear();
  _internal_metadata_.Clear();
}

const char* CompositeLocationArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .GeoCircleArea geo_circles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_circles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .GeoRectangleArea geo_rectangles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_rectangles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompositeLocationArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CompositeLocationArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .GeoCircleArea geo_circles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geo_circles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_geo_circles(i), target, stream);
  }

  // repeated .GeoRectangleArea geo_rectangles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geo_rectangles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_geo_rectangles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CompositeLocationArea)
  return target;
}

size_t CompositeLocationArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CompositeLocationArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .GeoCircleArea geo_circles = 1;
  total_size += 1UL * this->_internal_geo_circles_size();
  for (const auto& msg : this->geo_circles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .GeoRectangleArea geo_rectangles = 2;
  total_size += 1UL * this->_internal_geo_rectangles_size();
  for (const auto& msg : this->geo_rectangles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompositeLocationArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CompositeLocationArea)
  GOOGLE_DCHECK_NE(&from, this);
  const CompositeLocationArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompositeLocationArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CompositeLocationArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CompositeLocationArea)
    MergeFrom(*source);
  }
}

void CompositeLocationArea::MergeFrom(const CompositeLocationArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CompositeLocationArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_circles_.MergeFrom(from.geo_circles_);
  geo_rectangles_.MergeFrom(from.geo_rectangles_);
}

void CompositeLocationArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CompositeLocationArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeLocationArea::CopyFrom(const CompositeLocationArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CompositeLocationArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeLocationArea::IsInitialized() const {
  return true;
}

void CompositeLocationArea::InternalSwap(CompositeLocationArea* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geo_circles_.InternalSwap(&other->geo_circles_);
  geo_rectangles_.InternalSwap(&other->geo_rectangles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompositeLocationArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetStaticConfigMessage::InitAsDefaultInstance() {
}
class GetStaticConfigMessage::_Internal {
 public:
};

GetStaticConfigMessage::GetStaticConfigMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetStaticConfigMessage)
}
GetStaticConfigMessage::GetStaticConfigMessage(const GetStaticConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      supported_source_version_(from.supported_source_version_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  udc_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_udc_version().empty()) {
    udc_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.udc_version_);
  }
  supported_job_format_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_supported_job_format_version().empty()) {
    supported_job_format_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.supported_job_format_version_);
  }
  supported_upload_format_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_supported_upload_format_version().empty()) {
    supported_upload_format_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.supported_upload_format_version_);
  }
  // @@protoc_insertion_point(copy_constructor:GetStaticConfigMessage)
}

void GetStaticConfigMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetStaticConfigMessage_backend_5fmessage_5fformat_2eproto.base);
  udc_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supported_job_format_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supported_upload_format_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetStaticConfigMessage::~GetStaticConfigMessage() {
  // @@protoc_insertion_point(destructor:GetStaticConfigMessage)
  SharedDtor();
}

void GetStaticConfigMessage::SharedDtor() {
  udc_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supported_job_format_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supported_upload_format_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetStaticConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetStaticConfigMessage& GetStaticConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetStaticConfigMessage_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void GetStaticConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GetStaticConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_source_version_.Clear();
  udc_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supported_job_format_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  supported_upload_format_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* GetStaticConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string udc_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_udc_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetStaticConfigMessage.udc_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string supported_job_format_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_supported_job_format_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetStaticConfigMessage.supported_job_format_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string supported_upload_format_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_supported_upload_format_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetStaticConfigMessage.supported_upload_format_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .SupportedSourceVersion supported_source_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supported_source_version(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStaticConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetStaticConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string udc_version = 1;
  if (this->udc_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_udc_version().data(), static_cast<int>(this->_internal_udc_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetStaticConfigMessage.udc_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_udc_version(), target);
  }

  // string supported_job_format_version = 2;
  if (this->supported_job_format_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_supported_job_format_version().data(), static_cast<int>(this->_internal_supported_job_format_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetStaticConfigMessage.supported_job_format_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_supported_job_format_version(), target);
  }

  // string supported_upload_format_version = 3;
  if (this->supported_upload_format_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_supported_upload_format_version().data(), static_cast<int>(this->_internal_supported_upload_format_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetStaticConfigMessage.supported_upload_format_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_supported_upload_format_version(), target);
  }

  // repeated .SupportedSourceVersion supported_source_version = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supported_source_version_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_supported_source_version(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetStaticConfigMessage)
  return target;
}

size_t GetStaticConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetStaticConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .SupportedSourceVersion supported_source_version = 4;
  total_size += 1UL * this->_internal_supported_source_version_size();
  for (const auto& msg : this->supported_source_version_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string udc_version = 1;
  if (this->udc_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_udc_version());
  }

  // string supported_job_format_version = 2;
  if (this->supported_job_format_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_supported_job_format_version());
  }

  // string supported_upload_format_version = 3;
  if (this->supported_upload_format_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_supported_upload_format_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetStaticConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetStaticConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GetStaticConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetStaticConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetStaticConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetStaticConfigMessage)
    MergeFrom(*source);
  }
}

void GetStaticConfigMessage::MergeFrom(const GetStaticConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetStaticConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  supported_source_version_.MergeFrom(from.supported_source_version_);
  if (from.udc_version().size() > 0) {

    udc_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.udc_version_);
  }
  if (from.supported_job_format_version().size() > 0) {

    supported_job_format_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.supported_job_format_version_);
  }
  if (from.supported_upload_format_version().size() > 0) {

    supported_upload_format_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.supported_upload_format_version_);
  }
}

void GetStaticConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetStaticConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetStaticConfigMessage::CopyFrom(const GetStaticConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetStaticConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStaticConfigMessage::IsInitialized() const {
  return true;
}

void GetStaticConfigMessage::InternalSwap(GetStaticConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  supported_source_version_.InternalSwap(&other->supported_source_version_);
  udc_version_.Swap(&other->udc_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  supported_job_format_version_.Swap(&other->supported_job_format_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  supported_upload_format_version_.Swap(&other->supported_upload_format_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStaticConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetDataCollectionJobsMessage::InitAsDefaultInstance() {
}
class GetDataCollectionJobsMessage::_Internal {
 public:
};

GetDataCollectionJobsMessage::GetDataCollectionJobsMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetDataCollectionJobsMessage)
}
GetDataCollectionJobsMessage::GetDataCollectionJobsMessage(const GetDataCollectionJobsMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  max_supported_jobs_ = from.max_supported_jobs_;
  // @@protoc_insertion_point(copy_constructor:GetDataCollectionJobsMessage)
}

void GetDataCollectionJobsMessage::SharedCtor() {
  max_supported_jobs_ = 0;
}

GetDataCollectionJobsMessage::~GetDataCollectionJobsMessage() {
  // @@protoc_insertion_point(destructor:GetDataCollectionJobsMessage)
  SharedDtor();
}

void GetDataCollectionJobsMessage::SharedDtor() {
}

void GetDataCollectionJobsMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetDataCollectionJobsMessage& GetDataCollectionJobsMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetDataCollectionJobsMessage_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void GetDataCollectionJobsMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:GetDataCollectionJobsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  max_supported_jobs_ = 0;
  _internal_metadata_.Clear();
}

const char* GetDataCollectionJobsMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 max_supported_jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          max_supported_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetDataCollectionJobsMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetDataCollectionJobsMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_supported_jobs = 1;
  if (this->max_supported_jobs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_supported_jobs(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetDataCollectionJobsMessage)
  return target;
}

size_t GetDataCollectionJobsMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetDataCollectionJobsMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 max_supported_jobs = 1;
  if (this->max_supported_jobs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_supported_jobs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDataCollectionJobsMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetDataCollectionJobsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDataCollectionJobsMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetDataCollectionJobsMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetDataCollectionJobsMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetDataCollectionJobsMessage)
    MergeFrom(*source);
  }
}

void GetDataCollectionJobsMessage::MergeFrom(const GetDataCollectionJobsMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetDataCollectionJobsMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.max_supported_jobs() != 0) {
    _internal_set_max_supported_jobs(from._internal_max_supported_jobs());
  }
}

void GetDataCollectionJobsMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetDataCollectionJobsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDataCollectionJobsMessage::CopyFrom(const GetDataCollectionJobsMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetDataCollectionJobsMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDataCollectionJobsMessage::IsInitialized() const {
  return true;
}

void GetDataCollectionJobsMessage::InternalSwap(GetDataCollectionJobsMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(max_supported_jobs_, other->max_supported_jobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetDataCollectionJobsMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataCollectionJobsListMessage::InitAsDefaultInstance() {
}
class DataCollectionJobsListMessage::_Internal {
 public:
};

void DataCollectionJobsListMessage::clear_new_jobs() {
  new_jobs_.Clear();
}
DataCollectionJobsListMessage::DataCollectionJobsListMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataCollectionJobsListMessage)
}
DataCollectionJobsListMessage::DataCollectionJobsListMessage(const DataCollectionJobsListMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      new_jobs_(from.new_jobs_),
      job_ids_to_terminate_(from.job_ids_to_terminate_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DataCollectionJobsListMessage)
}

void DataCollectionJobsListMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataCollectionJobsListMessage_backend_5fmessage_5fformat_2eproto.base);
}

DataCollectionJobsListMessage::~DataCollectionJobsListMessage() {
  // @@protoc_insertion_point(destructor:DataCollectionJobsListMessage)
  SharedDtor();
}

void DataCollectionJobsListMessage::SharedDtor() {
}

void DataCollectionJobsListMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataCollectionJobsListMessage& DataCollectionJobsListMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataCollectionJobsListMessage_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void DataCollectionJobsListMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DataCollectionJobsListMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  new_jobs_.Clear();
  job_ids_to_terminate_.Clear();
  _internal_metadata_.Clear();
}

const char* DataCollectionJobsListMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.DataCollectionJob new_jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_new_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string job_ids_to_terminate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_job_ids_to_terminate();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DataCollectionJobsListMessage.job_ids_to_terminate"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCollectionJobsListMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataCollectionJobsListMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.DataCollectionJob new_jobs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_new_jobs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_new_jobs(i), target, stream);
  }

  // repeated string job_ids_to_terminate = 2;
  for (int i = 0, n = this->_internal_job_ids_to_terminate_size(); i < n; i++) {
    const auto& s = this->_internal_job_ids_to_terminate(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DataCollectionJobsListMessage.job_ids_to_terminate");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataCollectionJobsListMessage)
  return target;
}

size_t DataCollectionJobsListMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataCollectionJobsListMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.DataCollectionJob new_jobs = 1;
  total_size += 1UL * this->_internal_new_jobs_size();
  for (const auto& msg : this->new_jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string job_ids_to_terminate = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(job_ids_to_terminate_.size());
  for (int i = 0, n = job_ids_to_terminate_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      job_ids_to_terminate_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCollectionJobsListMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataCollectionJobsListMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCollectionJobsListMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataCollectionJobsListMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataCollectionJobsListMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataCollectionJobsListMessage)
    MergeFrom(*source);
  }
}

void DataCollectionJobsListMessage::MergeFrom(const DataCollectionJobsListMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataCollectionJobsListMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  new_jobs_.MergeFrom(from.new_jobs_);
  job_ids_to_terminate_.MergeFrom(from.job_ids_to_terminate_);
}

void DataCollectionJobsListMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataCollectionJobsListMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCollectionJobsListMessage::CopyFrom(const DataCollectionJobsListMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataCollectionJobsListMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCollectionJobsListMessage::IsInitialized() const {
  return true;
}

void DataCollectionJobsListMessage::InternalSwap(DataCollectionJobsListMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  new_jobs_.InternalSwap(&other->new_jobs_);
  job_ids_to_terminate_.InternalSwap(&other->job_ids_to_terminate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCollectionJobsListMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StaticConfigMessage::InitAsDefaultInstance() {
}
class StaticConfigMessage::_Internal {
 public:
};

StaticConfigMessage::StaticConfigMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StaticConfigMessage)
}
StaticConfigMessage::StaticConfigMessage(const StaticConfigMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:StaticConfigMessage)
}

void StaticConfigMessage::SharedCtor() {
}

StaticConfigMessage::~StaticConfigMessage() {
  // @@protoc_insertion_point(destructor:StaticConfigMessage)
  SharedDtor();
}

void StaticConfigMessage::SharedDtor() {
}

void StaticConfigMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticConfigMessage& StaticConfigMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticConfigMessage_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void StaticConfigMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:StaticConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* StaticConfigMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticConfigMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StaticConfigMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StaticConfigMessage)
  return target;
}

size_t StaticConfigMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StaticConfigMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticConfigMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:StaticConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticConfigMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticConfigMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:StaticConfigMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:StaticConfigMessage)
    MergeFrom(*source);
  }
}

void StaticConfigMessage::MergeFrom(const StaticConfigMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:StaticConfigMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StaticConfigMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:StaticConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticConfigMessage::CopyFrom(const StaticConfigMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StaticConfigMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticConfigMessage::IsInitialized() const {
  return true;
}

void StaticConfigMessage::InternalSwap(StaticConfigMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticConfigMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SupportedSourceVersion::InitAsDefaultInstance() {
}
class SupportedSourceVersion::_Internal {
 public:
};

SupportedSourceVersion::SupportedSourceVersion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SupportedSourceVersion)
}
SupportedSourceVersion::SupportedSourceVersion(const SupportedSourceVersion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ecu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ecu().empty()) {
    ecu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ecu_);
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_version().empty()) {
    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  source_type_ = from.source_type_;
  // @@protoc_insertion_point(copy_constructor:SupportedSourceVersion)
}

void SupportedSourceVersion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SupportedSourceVersion_backend_5fmessage_5fformat_2eproto.base);
  ecu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_type_ = 0;
}

SupportedSourceVersion::~SupportedSourceVersion() {
  // @@protoc_insertion_point(destructor:SupportedSourceVersion)
  SharedDtor();
}

void SupportedSourceVersion::SharedDtor() {
  ecu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SupportedSourceVersion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SupportedSourceVersion& SupportedSourceVersion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SupportedSourceVersion_backend_5fmessage_5fformat_2eproto.base);
  return *internal_default_instance();
}


void SupportedSourceVersion::Clear() {
// @@protoc_insertion_point(message_clear_start:SupportedSourceVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ecu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_type_ = 0;
  _internal_metadata_.Clear();
}

const char* SupportedSourceVersion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Source_Type source_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_source_type(static_cast<::Source_Type>(val));
        } else goto handle_unusual;
        continue;
      // string ecu = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ecu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SupportedSourceVersion.ecu"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SupportedSourceVersion.version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SupportedSourceVersion::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SupportedSourceVersion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Source_Type source_type = 1;
  if (this->source_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_source_type(), target);
  }

  // string ecu = 2;
  if (this->ecu().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ecu().data(), static_cast<int>(this->_internal_ecu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SupportedSourceVersion.ecu");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ecu(), target);
  }

  // string version = 3;
  if (this->version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SupportedSourceVersion.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SupportedSourceVersion)
  return target;
}

size_t SupportedSourceVersion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SupportedSourceVersion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ecu = 2;
  if (this->ecu().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ecu());
  }

  // string version = 3;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .Source_Type source_type = 1;
  if (this->source_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_source_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SupportedSourceVersion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SupportedSourceVersion)
  GOOGLE_DCHECK_NE(&from, this);
  const SupportedSourceVersion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SupportedSourceVersion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SupportedSourceVersion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SupportedSourceVersion)
    MergeFrom(*source);
  }
}

void SupportedSourceVersion::MergeFrom(const SupportedSourceVersion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SupportedSourceVersion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ecu().size() > 0) {

    ecu_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.ecu_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.source_type() != 0) {
    _internal_set_source_type(from._internal_source_type());
  }
}

void SupportedSourceVersion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SupportedSourceVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportedSourceVersion::CopyFrom(const SupportedSourceVersion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SupportedSourceVersion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportedSourceVersion::IsInitialized() const {
  return true;
}

void SupportedSourceVersion::InternalSwap(SupportedSourceVersion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ecu_.Swap(&other->ecu_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  version_.Swap(&other->version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(source_type_, other->source_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SupportedSourceVersion::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MessageHeader* Arena::CreateMaybeMessage< ::MessageHeader >(Arena* arena) {
  return Arena::CreateInternal< ::MessageHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageBody* Arena::CreateMaybeMessage< ::MessageBody >(Arena* arena) {
  return Arena::CreateInternal< ::MessageBody >(arena);
}
template<> PROTOBUF_NOINLINE ::AckMessage* Arena::CreateMaybeMessage< ::AckMessage >(Arena* arena) {
  return Arena::CreateInternal< ::AckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JobStatusMessage* Arena::CreateMaybeMessage< ::JobStatusMessage >(Arena* arena) {
  return Arena::CreateInternal< ::JobStatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::JobStatusRequestMessage* Arena::CreateMaybeMessage< ::JobStatusRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::JobStatusRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::InitiateGeohashStreamMessage* Arena::CreateMaybeMessage< ::InitiateGeohashStreamMessage >(Arena* arena) {
  return Arena::CreateInternal< ::InitiateGeohashStreamMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GeohashStreamArea* Arena::CreateMaybeMessage< ::GeohashStreamArea >(Arena* arena) {
  return Arena::CreateInternal< ::GeohashStreamArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GeoHashMessage* Arena::CreateMaybeMessage< ::GeoHashMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GeoHashMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::Job* Arena::CreateMaybeMessage< ::Job >(Arena* arena) {
  return Arena::CreateInternal< ::Job >(arena);
}
template<> PROTOBUF_NOINLINE ::JobStatusReason* Arena::CreateMaybeMessage< ::JobStatusReason >(Arena* arena) {
  return Arena::CreateInternal< ::JobStatusReason >(arena);
}
template<> PROTOBUF_NOINLINE ::JobWarnings* Arena::CreateMaybeMessage< ::JobWarnings >(Arena* arena) {
  return Arena::CreateInternal< ::JobWarnings >(arena);
}
template<> PROTOBUF_NOINLINE ::JobStatistics* Arena::CreateMaybeMessage< ::JobStatistics >(Arena* arena) {
  return Arena::CreateInternal< ::JobStatistics >(arena);
}
template<> PROTOBUF_NOINLINE ::JobStatus* Arena::CreateMaybeMessage< ::JobStatus >(Arena* arena) {
  return Arena::CreateInternal< ::JobStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::GeoCoordinateArea* Arena::CreateMaybeMessage< ::GeoCoordinateArea >(Arena* arena) {
  return Arena::CreateInternal< ::GeoCoordinateArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GeoRectangleArea* Arena::CreateMaybeMessage< ::GeoRectangleArea >(Arena* arena) {
  return Arena::CreateInternal< ::GeoRectangleArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GeoCircleArea* Arena::CreateMaybeMessage< ::GeoCircleArea >(Arena* arena) {
  return Arena::CreateInternal< ::GeoCircleArea >(arena);
}
template<> PROTOBUF_NOINLINE ::CompositeLocationArea* Arena::CreateMaybeMessage< ::CompositeLocationArea >(Arena* arena) {
  return Arena::CreateInternal< ::CompositeLocationArea >(arena);
}
template<> PROTOBUF_NOINLINE ::GetStaticConfigMessage* Arena::CreateMaybeMessage< ::GetStaticConfigMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GetStaticConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::GetDataCollectionJobsMessage* Arena::CreateMaybeMessage< ::GetDataCollectionJobsMessage >(Arena* arena) {
  return Arena::CreateInternal< ::GetDataCollectionJobsMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DataCollectionJobsListMessage* Arena::CreateMaybeMessage< ::DataCollectionJobsListMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DataCollectionJobsListMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::StaticConfigMessage* Arena::CreateMaybeMessage< ::StaticConfigMessage >(Arena* arena) {
  return Arena::CreateInternal< ::StaticConfigMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SupportedSourceVersion* Arena::CreateMaybeMessage< ::SupportedSourceVersion >(Arena* arena) {
  return Arena::CreateInternal< ::SupportedSourceVersion >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
