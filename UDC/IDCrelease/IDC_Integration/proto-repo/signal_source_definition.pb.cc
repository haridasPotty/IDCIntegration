// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signal_source_definition.proto

#include "signal_source_definition.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataMembers_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Element_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventGroup_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parameters_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamplingRate_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scaling_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SternbildAPI_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ToolMetadata_signal_5fsource_5fdefinition_2eproto;
namespace signal_source_definition {
class DefaultSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultSource> _instance;
} _DefaultSource_default_instance_;
class CollectdSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectdSource> _instance;
} _CollectdSource_default_instance_;
class EELSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EELSource> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exact_filename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_filename_;
} _EELSource_default_instance_;
class CanSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CanSource> _instance;
} _CanSource_default_instance_;
class LinSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LinSource> _instance;
} _LinSource_default_instance_;
class EthernetSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EthernetSource> _instance;
} _EthernetSource_default_instance_;
class ScalingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Scaling> _instance;
} _Scaling_default_instance_;
class NetworkSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkSource> _instance;
} _NetworkSource_default_instance_;
class EventGroupDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EventGroup> _instance;
} _EventGroup_default_instance_;
class ElementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Element> _instance;
} _Element_default_instance_;
class SternbildAPIDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SternbildAPI> _instance;
} _SternbildAPI_default_instance_;
class InternalSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InternalSource> _instance;
} _InternalSource_default_instance_;
class ProcessingToolboxSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProcessingToolboxSource> _instance;
} _ProcessingToolboxSource_default_instance_;
class ToolMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToolMetadata> _instance;
} _ToolMetadata_default_instance_;
class SamplingRateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SamplingRate> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_rate_time_ms_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_rate_injection_count_;
} _SamplingRate_default_instance_;
class ThriftmeSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThriftmeSource> _instance;
} _ThriftmeSource_default_instance_;
class ThriftmeSourceActiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ThriftmeSourceActive> _instance;
} _ThriftmeSourceActive_default_instance_;
class ParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Parameters> _instance;
  double double_value_;
  float float_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value_;
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value_;
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value_;
  bool bool_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
} _Parameters_default_instance_;
class DataMembersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataMembers> _instance;
} _DataMembers_default_instance_;
}  // namespace signal_source_definition
static void InitDefaultsscc_info_CanSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_CanSource_default_instance_;
    new (ptr) ::signal_source_definition::CanSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::CanSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CanSource_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_CollectdSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_CollectdSource_default_instance_;
    new (ptr) ::signal_source_definition::CollectdSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::CollectdSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectdSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CollectdSource_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_DataMembers_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_DataMembers_default_instance_;
    new (ptr) ::signal_source_definition::DataMembers();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::DataMembers::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataMembers_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataMembers_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_DefaultSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_DefaultSource_default_instance_;
    new (ptr) ::signal_source_definition::DefaultSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::DefaultSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DefaultSource_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_EELSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_EELSource_default_instance_;
    new (ptr) ::signal_source_definition::EELSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::EELSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EELSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EELSource_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_Element_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_Element_default_instance_;
    new (ptr) ::signal_source_definition::Element();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::Element::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Element_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Element_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_EthernetSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_EthernetSource_default_instance_;
    new (ptr) ::signal_source_definition::EthernetSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::EthernetSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthernetSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EthernetSource_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_EventGroup_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_EventGroup_default_instance_;
    new (ptr) ::signal_source_definition::EventGroup();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::EventGroup::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EventGroup_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EventGroup_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_InternalSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_InternalSource_default_instance_;
    new (ptr) ::signal_source_definition::InternalSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::InternalSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InternalSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InternalSource_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_LinSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_LinSource_default_instance_;
    new (ptr) ::signal_source_definition::LinSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::LinSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LinSource_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_NetworkSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_NetworkSource_default_instance_;
    new (ptr) ::signal_source_definition::NetworkSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::NetworkSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NetworkSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_NetworkSource_signal_5fsource_5fdefinition_2eproto}, {
      &scc_info_EventGroup_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_Element_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_Scaling_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_SternbildAPI_signal_5fsource_5fdefinition_2eproto.base,}};

static void InitDefaultsscc_info_Parameters_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_Parameters_default_instance_;
    new (ptr) ::signal_source_definition::Parameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::Parameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Parameters_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Parameters_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_ProcessingToolboxSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_ProcessingToolboxSource_default_instance_;
    new (ptr) ::signal_source_definition::ProcessingToolboxSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::ProcessingToolboxSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessingToolboxSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ProcessingToolboxSource_signal_5fsource_5fdefinition_2eproto}, {
      &scc_info_ToolMetadata_signal_5fsource_5fdefinition_2eproto.base,}};

static void InitDefaultsscc_info_SamplingRate_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_SamplingRate_default_instance_;
    new (ptr) ::signal_source_definition::SamplingRate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::SamplingRate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SamplingRate_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SamplingRate_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_Scaling_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_Scaling_default_instance_;
    new (ptr) ::signal_source_definition::Scaling();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::Scaling::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Scaling_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Scaling_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_SternbildAPI_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_SternbildAPI_default_instance_;
    new (ptr) ::signal_source_definition::SternbildAPI();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::SternbildAPI::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SternbildAPI_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SternbildAPI_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_ThriftmeSource_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_ThriftmeSource_default_instance_;
    new (ptr) ::signal_source_definition::ThriftmeSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::ThriftmeSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThriftmeSource_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ThriftmeSource_signal_5fsource_5fdefinition_2eproto}, {}};

static void InitDefaultsscc_info_ThriftmeSourceActive_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_ThriftmeSourceActive_default_instance_;
    new (ptr) ::signal_source_definition::ThriftmeSourceActive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::ThriftmeSourceActive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ThriftmeSourceActive_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ThriftmeSourceActive_signal_5fsource_5fdefinition_2eproto}, {
      &scc_info_DataMembers_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_Parameters_signal_5fsource_5fdefinition_2eproto.base,}};

static void InitDefaultsscc_info_ToolMetadata_signal_5fsource_5fdefinition_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::signal_source_definition::_ToolMetadata_default_instance_;
    new (ptr) ::signal_source_definition::ToolMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::signal_source_definition::ToolMetadata::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ToolMetadata_signal_5fsource_5fdefinition_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ToolMetadata_signal_5fsource_5fdefinition_2eproto}, {
      &scc_info_SamplingRate_signal_5fsource_5fdefinition_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_signal_5fsource_5fdefinition_2eproto[19];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_signal_5fsource_5fdefinition_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_signal_5fsource_5fdefinition_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_signal_5fsource_5fdefinition_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::DefaultSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::DefaultSource, signal_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::CollectdSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::CollectdSource, commandtype_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::CollectdSource, identifier_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::CollectdSource, datasourcename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EELSource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EELSource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EELSource, absolute_directory_path_),
  offsetof(::signal_source_definition::EELSourceDefaultTypeInternal, exact_filename_),
  offsetof(::signal_source_definition::EELSourceDefaultTypeInternal, regex_filename_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EELSource, file_type_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EELSource, file_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::CanSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::CanSource, source_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::CanSource, source_version_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::CanSource, frame_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::CanSource, signal_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::LinSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::LinSource, source_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::LinSource, source_version_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::LinSource, frame_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::LinSource, signal_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EthernetSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EthernetSource, source_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EthernetSource, source_version_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EthernetSource, vlan_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EthernetSource, frame_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EthernetSource, signal_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Scaling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Scaling, numerator_linear_factor_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Scaling, numerator_offset_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Scaling, denominator_offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, service_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, service_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, event_group_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, event_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, event_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, pdu_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, signal_group_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, signal_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, element_path_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, scaling_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, scaling_values_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::NetworkSource, sternbild_api_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EventGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EventGroup, event_group_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::EventGroup, event_group_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Element, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Element, index_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Element, sequence_number_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Element, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::SternbildAPI, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::SternbildAPI, sternbild_service_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::SternbildAPI, sternbild_signal_group_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::SternbildAPI, sternbild_event_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::InternalSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::InternalSource, source_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::InternalSource, source_version_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::InternalSource, signal_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ProcessingToolboxSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ProcessingToolboxSource, toolbox_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ProcessingToolboxSource, toolbox_version_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ProcessingToolboxSource, format_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ProcessingToolboxSource, format_version_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ProcessingToolboxSource, signal_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ProcessingToolboxSource, tool_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ToolMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ToolMetadata, dpj_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ToolMetadata, named_output_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ToolMetadata, output_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ToolMetadata, input_config_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ToolMetadata, sampling_rate_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ToolMetadata, failsafe_option_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::SamplingRate, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::SamplingRate, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::signal_source_definition::SamplingRateDefaultTypeInternal, sampling_rate_time_ms_),
  offsetof(::signal_source_definition::SamplingRateDefaultTypeInternal, sampling_rate_injection_count_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::SamplingRate, sampling_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSource, service_hash_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSource, function_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSource, service_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSource, function_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSource, message_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSourceActive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSourceActive, service_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSourceActive, service_hash_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSourceActive, broker_url_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSourceActive, function_name_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSourceActive, function_id_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSourceActive, member_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::ThriftmeSourceActive, parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Parameters, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Parameters, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Parameters, parameter_name_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, double_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, float_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, int32_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, int64_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, uint32_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, uint64_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, sint32_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, sint64_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, fixed32_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, fixed64_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, sfixed32_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, sfixed64_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, bool_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, string_value_),
  offsetof(::signal_source_definition::ParametersDefaultTypeInternal, bytes_value_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::Parameters, parameter_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::DataMembers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::DataMembers, slug_),
  PROTOBUF_FIELD_OFFSET(::signal_source_definition::DataMembers, member_name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::signal_source_definition::DefaultSource)},
  { 6, -1, sizeof(::signal_source_definition::CollectdSource)},
  { 14, -1, sizeof(::signal_source_definition::EELSource)},
  { 24, -1, sizeof(::signal_source_definition::CanSource)},
  { 33, -1, sizeof(::signal_source_definition::LinSource)},
  { 42, -1, sizeof(::signal_source_definition::EthernetSource)},
  { 52, -1, sizeof(::signal_source_definition::Scaling)},
  { 60, -1, sizeof(::signal_source_definition::NetworkSource)},
  { 77, -1, sizeof(::signal_source_definition::EventGroup)},
  { 84, -1, sizeof(::signal_source_definition::Element)},
  { 92, -1, sizeof(::signal_source_definition::SternbildAPI)},
  { 100, -1, sizeof(::signal_source_definition::InternalSource)},
  { 108, -1, sizeof(::signal_source_definition::ProcessingToolboxSource)},
  { 119, -1, sizeof(::signal_source_definition::ToolMetadata)},
  { 130, -1, sizeof(::signal_source_definition::SamplingRate)},
  { 138, -1, sizeof(::signal_source_definition::ThriftmeSource)},
  { 148, -1, sizeof(::signal_source_definition::ThriftmeSourceActive)},
  { 160, -1, sizeof(::signal_source_definition::Parameters)},
  { 182, -1, sizeof(::signal_source_definition::DataMembers)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_DefaultSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_CollectdSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_EELSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_CanSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_LinSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_EthernetSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_Scaling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_NetworkSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_EventGroup_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_Element_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_SternbildAPI_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_InternalSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_ProcessingToolboxSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_ToolMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_SamplingRate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_ThriftmeSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_ThriftmeSourceActive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_Parameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::signal_source_definition::_DataMembers_default_instance_),
};

const char descriptor_table_protodef_signal_5fsource_5fdefinition_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036signal_source_definition.proto\022\030signal"
  "_source_definition\"$\n\rDefaultSource\022\023\n\013s"
  "ignal_name\030\001 \001(\t\"\306\001\n\016CollectdSource\022M\n\013c"
  "ommandtype\030\001 \001(\01628.signal_source_definit"
  "ion.CollectdSource.CommandTypeEnum\022\022\n\nid"
  "entifier\030\002 \001(\t\022\026\n\016DataSourceName\030\003 \001(\t\"9"
  "\n\017CommandTypeEnum\022\r\n\tUndefined\020\000\022\n\n\006Getv"
  "al\020\001\022\013\n\007Listval\020\002\"\200\001\n\tEELSource\022\037\n\027absol"
  "ute_directory_path\030\001 \001(\t\022\030\n\016exact_filena"
  "me\030\002 \001(\tH\000\022\030\n\016regex_filename\030\003 \001(\tH\000\022\021\n\t"
  "file_type\030\004 \001(\tB\013\n\tfile_name\"a\n\tCanSourc"
  "e\022\023\n\013source_name\030\001 \001(\t\022\026\n\016source_version"
  "\030\002 \001(\t\022\022\n\nframe_name\030\003 \001(\t\022\023\n\013signal_nam"
  "e\030\004 \001(\t\"a\n\tLinSource\022\023\n\013source_name\030\001 \001("
  "\t\022\026\n\016source_version\030\002 \001(\t\022\022\n\nframe_name\030"
  "\003 \001(\t\022\023\n\013signal_name\030\004 \001(\t\"w\n\016EthernetSo"
  "urce\022\023\n\013source_name\030\001 \001(\t\022\026\n\016source_vers"
  "ion\030\002 \001(\t\022\017\n\007vlan_id\030\003 \001(\r\022\022\n\nframe_name"
  "\030\004 \001(\t\022\023\n\013signal_name\030\005 \001(\t\"`\n\007Scaling\022\037"
  "\n\027numerator_linear_factor\030\001 \001(\001\022\030\n\020numer"
  "ator_offset\030\002 \001(\001\022\032\n\022denominator_offset\030"
  "\003 \001(\001\"\240\003\n\rNetworkSource\022\022\n\nservice_id\030\001 "
  "\001(\r\022\024\n\014service_name\030\002 \001(\t\0229\n\013event_group"
  "\030\003 \003(\0132$.signal_source_definition.EventG"
  "roup\022\020\n\010event_id\030\004 \001(\r\022\022\n\nevent_name\030\005 \001"
  "(\t\022\020\n\010pdu_name\030\006 \001(\t\022\031\n\021signal_group_nam"
  "e\030\007 \001(\t\022\023\n\013signal_name\030\010 \001(\t\0227\n\014element_"
  "path\030\t \003(\0132!.signal_source_definition.El"
  "ement\022\017\n\007scaling\030\n \001(\010\0229\n\016scaling_values"
  "\030\013 \001(\0132!.signal_source_definition.Scalin"
  "g\022=\n\rsternbild_api\030\014 \001(\0132&.signal_source"
  "_definition.SternbildAPI\">\n\nEventGroup\022\026"
  "\n\016event_group_id\030\001 \001(\r\022\030\n\020event_group_na"
  "me\030\002 \001(\t\"\?\n\007Element\022\r\n\005index\030\001 \001(\005\022\027\n\017se"
  "quence_number\030\002 \001(\r\022\014\n\004name\030\003 \001(\t\"q\n\014Ste"
  "rnbildAPI\022\036\n\026sternbild_service_name\030\001 \001("
  "\t\022#\n\033sternbild_signal_group_name\030\002 \001(\t\022\034"
  "\n\024sternbild_event_name\030\003 \001(\t\"R\n\016Internal"
  "Source\022\023\n\013source_name\030\001 \001(\t\022\026\n\016source_ve"
  "rsion\030\002 \001(\t\022\023\n\013signal_name\030\003 \001(\t\"\307\001\n\027Pro"
  "cessingToolboxSource\022\022\n\ntoolbox_id\030\001 \001(\t"
  "\022\027\n\017toolbox_version\030\002 \001(\t\022\023\n\013format_name"
  "\030\003 \001(\t\022\026\n\016format_version\030\004 \001(\t\022\023\n\013signal"
  "_name\030\005 \001(\t\022=\n\rtool_metadata\030\006 \003(\0132&.sig"
  "nal_source_definition.ToolMetadata\"\217\003\n\014T"
  "oolMetadata\022\016\n\006dpj_id\030\001 \001(\t\022\024\n\014named_out"
  "put\030\002 \001(\t\022\021\n\toutput_id\030\003 \001(\005\022H\n\014input_co"
  "nfig\030\004 \001(\01622.signal_source_definition.To"
  "olMetadata.INPUTCONFIG\022=\n\rsampling_rate\030"
  "\005 \001(\0132&.signal_source_definition.Samplin"
  "gRate\022H\n\017failsafe_option\030\006 \001(\0162/.signal_"
  "source_definition.ToolMetadata.FAILSAFE\""
  "=\n\013INPUTCONFIG\022\n\n\006TYPE_A\020\000\022\n\n\006TYPE_B\020\001\022\n"
  "\n\006TYPE_C\020\002\022\n\n\006TYPE_D\020\003\"4\n\010FAILSAFE\022\r\n\tUN"
  "DEFINED\020\000\022\010\n\004SKIP\020\001\022\017\n\013CAPTURE_RAW\020\002\"i\n\014"
  "SamplingRate\022\037\n\025sampling_rate_time_ms\030\001 "
  "\001(\rH\000\022\'\n\035sampling_rate_injection_count\030\002"
  " \001(\rH\000B\017\n\rsampling_rate\"\266\002\n\016ThriftmeSour"
  "ce\022\027\n\017service_hash_id\030\001 \001(\005\022\023\n\013function_"
  "id\030\002 \001(\005\022\024\n\014service_name\030\003 \001(\t\022\025\n\rfuncti"
  "on_name\030\004 \001(\t\022N\n\014message_type\030\005 \001(\01628.si"
  "gnal_source_definition.ThriftmeSource.Me"
  "ssageTypeEnum\"y\n\017MessageTypeEnum\022\021\n\rTHRI"
  "FTME_CALL\020\000\022\022\n\016THRIFTME_REPLY\020\001\022\026\n\022THRIF"
  "TME_EXCEPTION\020\002\022\023\n\017THRIFTME_ONEWAY\020\003\022\022\n\016"
  "THRIFTME_EVENT\020\004\"\365\001\n\024ThriftmeSourceActiv"
  "e\022\024\n\014service_name\030\001 \001(\t\022\027\n\017service_hash_"
  "id\030\002 \001(\005\022\022\n\nbroker_url\030\003 \001(\t\022\025\n\rfunction"
  "_name\030\004 \001(\t\022\023\n\013function_id\030\005 \001(\005\0225\n\006memb"
  "er\030\006 \003(\0132%.signal_source_definition.Data"
  "Members\0227\n\tparameter\030\007 \003(\0132$.signal_sour"
  "ce_definition.Parameters\"\237\003\n\nParameters\022"
  "\026\n\016parameter_name\030\001 \001(\t\022\026\n\014double_value\030"
  "\002 \001(\001H\000\022\025\n\013float_value\030\003 \001(\002H\000\022\025\n\013int32_"
  "value\030\004 \001(\005H\000\022\025\n\013int64_value\030\005 \001(\003H\000\022\026\n\014"
  "uint32_value\030\006 \001(\rH\000\022\026\n\014uint64_value\030\007 \001"
  "(\004H\000\022\026\n\014sint32_value\030\010 \001(\021H\000\022\026\n\014sint64_v"
  "alue\030\t \001(\022H\000\022\027\n\rfixed32_value\030\n \001(\007H\000\022\027\n"
  "\rfixed64_value\030\013 \001(\006H\000\022\030\n\016sfixed32_value"
  "\030\014 \001(\017H\000\022\030\n\016sfixed64_value\030\r \001(\020H\000\022\024\n\nbo"
  "ol_value\030\016 \001(\010H\000\022\026\n\014string_value\030\017 \001(\tH\000"
  "\022\025\n\013bytes_value\030\020 \001(\014H\000B\021\n\017parameter_val"
  "ue\"0\n\013DataMembers\022\014\n\004slug\030\001 \001(\t\022\023\n\013membe"
  "r_name\030\002 \001(\tb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_signal_5fsource_5fdefinition_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_signal_5fsource_5fdefinition_2eproto_sccs[19] = {
  &scc_info_CanSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_CollectdSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_DataMembers_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_DefaultSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_EELSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_Element_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_EthernetSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_EventGroup_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_InternalSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_LinSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_NetworkSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_Parameters_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_ProcessingToolboxSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_SamplingRate_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_Scaling_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_SternbildAPI_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_ThriftmeSource_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_ThriftmeSourceActive_signal_5fsource_5fdefinition_2eproto.base,
  &scc_info_ToolMetadata_signal_5fsource_5fdefinition_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_signal_5fsource_5fdefinition_2eproto_once;
static bool descriptor_table_signal_5fsource_5fdefinition_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_signal_5fsource_5fdefinition_2eproto = {
  &descriptor_table_signal_5fsource_5fdefinition_2eproto_initialized, descriptor_table_protodef_signal_5fsource_5fdefinition_2eproto, "signal_source_definition.proto", 3340,
  &descriptor_table_signal_5fsource_5fdefinition_2eproto_once, descriptor_table_signal_5fsource_5fdefinition_2eproto_sccs, descriptor_table_signal_5fsource_5fdefinition_2eproto_deps, 19, 0,
  schemas, file_default_instances, TableStruct_signal_5fsource_5fdefinition_2eproto::offsets,
  file_level_metadata_signal_5fsource_5fdefinition_2eproto, 19, file_level_enum_descriptors_signal_5fsource_5fdefinition_2eproto, file_level_service_descriptors_signal_5fsource_5fdefinition_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_signal_5fsource_5fdefinition_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_signal_5fsource_5fdefinition_2eproto), true);
namespace signal_source_definition {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectdSource_CommandTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_signal_5fsource_5fdefinition_2eproto);
  return file_level_enum_descriptors_signal_5fsource_5fdefinition_2eproto[0];
}
bool CollectdSource_CommandTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CollectdSource_CommandTypeEnum CollectdSource::Undefined;
constexpr CollectdSource_CommandTypeEnum CollectdSource::Getval;
constexpr CollectdSource_CommandTypeEnum CollectdSource::Listval;
constexpr CollectdSource_CommandTypeEnum CollectdSource::CommandTypeEnum_MIN;
constexpr CollectdSource_CommandTypeEnum CollectdSource::CommandTypeEnum_MAX;
constexpr int CollectdSource::CommandTypeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToolMetadata_INPUTCONFIG_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_signal_5fsource_5fdefinition_2eproto);
  return file_level_enum_descriptors_signal_5fsource_5fdefinition_2eproto[1];
}
bool ToolMetadata_INPUTCONFIG_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ToolMetadata_INPUTCONFIG ToolMetadata::TYPE_A;
constexpr ToolMetadata_INPUTCONFIG ToolMetadata::TYPE_B;
constexpr ToolMetadata_INPUTCONFIG ToolMetadata::TYPE_C;
constexpr ToolMetadata_INPUTCONFIG ToolMetadata::TYPE_D;
constexpr ToolMetadata_INPUTCONFIG ToolMetadata::INPUTCONFIG_MIN;
constexpr ToolMetadata_INPUTCONFIG ToolMetadata::INPUTCONFIG_MAX;
constexpr int ToolMetadata::INPUTCONFIG_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToolMetadata_FAILSAFE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_signal_5fsource_5fdefinition_2eproto);
  return file_level_enum_descriptors_signal_5fsource_5fdefinition_2eproto[2];
}
bool ToolMetadata_FAILSAFE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ToolMetadata_FAILSAFE ToolMetadata::UNDEFINED;
constexpr ToolMetadata_FAILSAFE ToolMetadata::SKIP;
constexpr ToolMetadata_FAILSAFE ToolMetadata::CAPTURE_RAW;
constexpr ToolMetadata_FAILSAFE ToolMetadata::FAILSAFE_MIN;
constexpr ToolMetadata_FAILSAFE ToolMetadata::FAILSAFE_MAX;
constexpr int ToolMetadata::FAILSAFE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThriftmeSource_MessageTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_signal_5fsource_5fdefinition_2eproto);
  return file_level_enum_descriptors_signal_5fsource_5fdefinition_2eproto[3];
}
bool ThriftmeSource_MessageTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ThriftmeSource_MessageTypeEnum ThriftmeSource::THRIFTME_CALL;
constexpr ThriftmeSource_MessageTypeEnum ThriftmeSource::THRIFTME_REPLY;
constexpr ThriftmeSource_MessageTypeEnum ThriftmeSource::THRIFTME_EXCEPTION;
constexpr ThriftmeSource_MessageTypeEnum ThriftmeSource::THRIFTME_ONEWAY;
constexpr ThriftmeSource_MessageTypeEnum ThriftmeSource::THRIFTME_EVENT;
constexpr ThriftmeSource_MessageTypeEnum ThriftmeSource::MessageTypeEnum_MIN;
constexpr ThriftmeSource_MessageTypeEnum ThriftmeSource::MessageTypeEnum_MAX;
constexpr int ThriftmeSource::MessageTypeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void DefaultSource::InitAsDefaultInstance() {
}
class DefaultSource::_Internal {
 public:
};

DefaultSource::DefaultSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.DefaultSource)
}
DefaultSource::DefaultSource(const DefaultSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal_name().empty()) {
    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.DefaultSource)
}

void DefaultSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefaultSource_signal_5fsource_5fdefinition_2eproto.base);
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DefaultSource::~DefaultSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.DefaultSource)
  SharedDtor();
}

void DefaultSource::SharedDtor() {
  signal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DefaultSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultSource& DefaultSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void DefaultSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.DefaultSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DefaultSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string signal_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_signal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.DefaultSource.signal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.DefaultSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string signal_name = 1;
  if (this->signal_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal_name().data(), static_cast<int>(this->_internal_signal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.DefaultSource.signal_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_signal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.DefaultSource)
  return target;
}

size_t DefaultSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.DefaultSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signal_name = 1;
  if (this->signal_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.DefaultSource)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.DefaultSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.DefaultSource)
    MergeFrom(*source);
  }
}

void DefaultSource::MergeFrom(const DefaultSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.DefaultSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signal_name().size() > 0) {

    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
}

void DefaultSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.DefaultSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultSource::CopyFrom(const DefaultSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.DefaultSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultSource::IsInitialized() const {
  return true;
}

void DefaultSource::InternalSwap(DefaultSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signal_name_.Swap(&other->signal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectdSource::InitAsDefaultInstance() {
}
class CollectdSource::_Internal {
 public:
};

CollectdSource::CollectdSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.CollectdSource)
}
CollectdSource::CollectdSource(const CollectdSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_identifier().empty()) {
    identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  datasourcename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datasourcename().empty()) {
    datasourcename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datasourcename_);
  }
  commandtype_ = from.commandtype_;
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.CollectdSource)
}

void CollectdSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectdSource_signal_5fsource_5fdefinition_2eproto.base);
  identifier_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datasourcename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commandtype_ = 0;
}

CollectdSource::~CollectdSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.CollectdSource)
  SharedDtor();
}

void CollectdSource::SharedDtor() {
  identifier_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datasourcename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CollectdSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectdSource& CollectdSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectdSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void CollectdSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.CollectdSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datasourcename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  commandtype_ = 0;
  _internal_metadata_.Clear();
}

const char* CollectdSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .signal_source_definition.CollectdSource.CommandTypeEnum commandtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_commandtype(static_cast<::signal_source_definition::CollectdSource_CommandTypeEnum>(val));
        } else goto handle_unusual;
        continue;
      // string identifier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_identifier();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.CollectdSource.identifier"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string DataSourceName = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_datasourcename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.CollectdSource.DataSourceName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectdSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.CollectdSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .signal_source_definition.CollectdSource.CommandTypeEnum commandtype = 1;
  if (this->commandtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_commandtype(), target);
  }

  // string identifier = 2;
  if (this->identifier().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_identifier().data(), static_cast<int>(this->_internal_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.CollectdSource.identifier");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_identifier(), target);
  }

  // string DataSourceName = 3;
  if (this->datasourcename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datasourcename().data(), static_cast<int>(this->_internal_datasourcename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.CollectdSource.DataSourceName");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_datasourcename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.CollectdSource)
  return target;
}

size_t CollectdSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.CollectdSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string identifier = 2;
  if (this->identifier().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_identifier());
  }

  // string DataSourceName = 3;
  if (this->datasourcename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datasourcename());
  }

  // .signal_source_definition.CollectdSource.CommandTypeEnum commandtype = 1;
  if (this->commandtype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_commandtype());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectdSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.CollectdSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectdSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectdSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.CollectdSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.CollectdSource)
    MergeFrom(*source);
  }
}

void CollectdSource::MergeFrom(const CollectdSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.CollectdSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.identifier().size() > 0) {

    identifier_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.identifier_);
  }
  if (from.datasourcename().size() > 0) {

    datasourcename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datasourcename_);
  }
  if (from.commandtype() != 0) {
    _internal_set_commandtype(from._internal_commandtype());
  }
}

void CollectdSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.CollectdSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectdSource::CopyFrom(const CollectdSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.CollectdSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectdSource::IsInitialized() const {
  return true;
}

void CollectdSource::InternalSwap(CollectdSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  identifier_.Swap(&other->identifier_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  datasourcename_.Swap(&other->datasourcename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(commandtype_, other->commandtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectdSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EELSource::InitAsDefaultInstance() {
  ::signal_source_definition::_EELSource_default_instance_.exact_filename_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::signal_source_definition::_EELSource_default_instance_.regex_filename_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class EELSource::_Internal {
 public:
};

EELSource::EELSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.EELSource)
}
EELSource::EELSource(const EELSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  absolute_directory_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_absolute_directory_path().empty()) {
    absolute_directory_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.absolute_directory_path_);
  }
  file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_type().empty()) {
    file_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_type_);
  }
  clear_has_file_name();
  switch (from.file_name_case()) {
    case kExactFilename: {
      _internal_set_exact_filename(from._internal_exact_filename());
      break;
    }
    case kRegexFilename: {
      _internal_set_regex_filename(from._internal_regex_filename());
      break;
    }
    case FILE_NAME_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.EELSource)
}

void EELSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EELSource_signal_5fsource_5fdefinition_2eproto.base);
  absolute_directory_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_file_name();
}

EELSource::~EELSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.EELSource)
  SharedDtor();
}

void EELSource::SharedDtor() {
  absolute_directory_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_file_name()) {
    clear_file_name();
  }
}

void EELSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EELSource& EELSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EELSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void EELSource::clear_file_name() {
// @@protoc_insertion_point(one_of_clear_start:signal_source_definition.EELSource)
  switch (file_name_case()) {
    case kExactFilename: {
      file_name_.exact_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRegexFilename: {
      file_name_.regex_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case FILE_NAME_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FILE_NAME_NOT_SET;
}


void EELSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.EELSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  absolute_directory_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_file_name();
  _internal_metadata_.Clear();
}

const char* EELSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string absolute_directory_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_absolute_directory_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.EELSource.absolute_directory_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exact_filename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_exact_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.EELSource.exact_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regex_filename = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_regex_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.EELSource.regex_filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_file_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.EELSource.file_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EELSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.EELSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string absolute_directory_path = 1;
  if (this->absolute_directory_path().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_absolute_directory_path().data(), static_cast<int>(this->_internal_absolute_directory_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.EELSource.absolute_directory_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_absolute_directory_path(), target);
  }

  // string exact_filename = 2;
  if (_internal_has_exact_filename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exact_filename().data(), static_cast<int>(this->_internal_exact_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.EELSource.exact_filename");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_exact_filename(), target);
  }

  // string regex_filename = 3;
  if (_internal_has_regex_filename()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex_filename().data(), static_cast<int>(this->_internal_regex_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.EELSource.regex_filename");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_regex_filename(), target);
  }

  // string file_type = 4;
  if (this->file_type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_type().data(), static_cast<int>(this->_internal_file_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.EELSource.file_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_file_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.EELSource)
  return target;
}

size_t EELSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.EELSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string absolute_directory_path = 1;
  if (this->absolute_directory_path().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_absolute_directory_path());
  }

  // string file_type = 4;
  if (this->file_type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_type());
  }

  switch (file_name_case()) {
    // string exact_filename = 2;
    case kExactFilename: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_exact_filename());
      break;
    }
    // string regex_filename = 3;
    case kRegexFilename: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_regex_filename());
      break;
    }
    case FILE_NAME_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EELSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.EELSource)
  GOOGLE_DCHECK_NE(&from, this);
  const EELSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EELSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.EELSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.EELSource)
    MergeFrom(*source);
  }
}

void EELSource::MergeFrom(const EELSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.EELSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.absolute_directory_path().size() > 0) {

    absolute_directory_path_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.absolute_directory_path_);
  }
  if (from.file_type().size() > 0) {

    file_type_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_type_);
  }
  switch (from.file_name_case()) {
    case kExactFilename: {
      _internal_set_exact_filename(from._internal_exact_filename());
      break;
    }
    case kRegexFilename: {
      _internal_set_regex_filename(from._internal_regex_filename());
      break;
    }
    case FILE_NAME_NOT_SET: {
      break;
    }
  }
}

void EELSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.EELSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EELSource::CopyFrom(const EELSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.EELSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EELSource::IsInitialized() const {
  return true;
}

void EELSource::InternalSwap(EELSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  absolute_directory_path_.Swap(&other->absolute_directory_path_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_type_.Swap(&other->file_type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_name_, other->file_name_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EELSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CanSource::InitAsDefaultInstance() {
}
class CanSource::_Internal {
 public:
};

CanSource::CanSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.CanSource)
}
CanSource::CanSource(const CanSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_name().empty()) {
    source_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  source_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_version().empty()) {
    source_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name().empty()) {
    frame_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_name_);
  }
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal_name().empty()) {
    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.CanSource)
}

void CanSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CanSource_signal_5fsource_5fdefinition_2eproto.base);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CanSource::~CanSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.CanSource)
  SharedDtor();
}

void CanSource::SharedDtor() {
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CanSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CanSource& CanSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CanSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void CanSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.CanSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CanSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.CanSource.source_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.CanSource.source_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.CanSource.frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signal_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.CanSource.signal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CanSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.CanSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.CanSource.source_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_name(), target);
  }

  // string source_version = 2;
  if (this->source_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_version().data(), static_cast<int>(this->_internal_source_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.CanSource.source_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_version(), target);
  }

  // string frame_name = 3;
  if (this->frame_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name().data(), static_cast<int>(this->_internal_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.CanSource.frame_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_name(), target);
  }

  // string signal_name = 4;
  if (this->signal_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal_name().data(), static_cast<int>(this->_internal_signal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.CanSource.signal_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_signal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.CanSource)
  return target;
}

size_t CanSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.CanSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_name());
  }

  // string source_version = 2;
  if (this->source_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_version());
  }

  // string frame_name = 3;
  if (this->frame_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name());
  }

  // string signal_name = 4;
  if (this->signal_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.CanSource)
  GOOGLE_DCHECK_NE(&from, this);
  const CanSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CanSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.CanSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.CanSource)
    MergeFrom(*source);
  }
}

void CanSource::MergeFrom(const CanSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.CanSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_name().size() > 0) {

    source_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  if (from.source_version().size() > 0) {

    source_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  if (from.frame_name().size() > 0) {

    frame_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_name_);
  }
  if (from.signal_name().size() > 0) {

    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
}

void CanSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.CanSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanSource::CopyFrom(const CanSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.CanSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanSource::IsInitialized() const {
  return true;
}

void CanSource::InternalSwap(CanSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_version_.Swap(&other->source_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_name_.Swap(&other->frame_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signal_name_.Swap(&other->signal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CanSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LinSource::InitAsDefaultInstance() {
}
class LinSource::_Internal {
 public:
};

LinSource::LinSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.LinSource)
}
LinSource::LinSource(const LinSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_name().empty()) {
    source_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  source_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_version().empty()) {
    source_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name().empty()) {
    frame_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_name_);
  }
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal_name().empty()) {
    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.LinSource)
}

void LinSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LinSource_signal_5fsource_5fdefinition_2eproto.base);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LinSource::~LinSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.LinSource)
  SharedDtor();
}

void LinSource::SharedDtor() {
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LinSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LinSource& LinSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LinSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void LinSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.LinSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* LinSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.LinSource.source_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.LinSource.source_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.LinSource.frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signal_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_signal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.LinSource.signal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LinSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.LinSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.LinSource.source_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_name(), target);
  }

  // string source_version = 2;
  if (this->source_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_version().data(), static_cast<int>(this->_internal_source_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.LinSource.source_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_version(), target);
  }

  // string frame_name = 3;
  if (this->frame_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name().data(), static_cast<int>(this->_internal_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.LinSource.frame_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_name(), target);
  }

  // string signal_name = 4;
  if (this->signal_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal_name().data(), static_cast<int>(this->_internal_signal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.LinSource.signal_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_signal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.LinSource)
  return target;
}

size_t LinSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.LinSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_name());
  }

  // string source_version = 2;
  if (this->source_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_version());
  }

  // string frame_name = 3;
  if (this->frame_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name());
  }

  // string signal_name = 4;
  if (this->signal_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.LinSource)
  GOOGLE_DCHECK_NE(&from, this);
  const LinSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LinSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.LinSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.LinSource)
    MergeFrom(*source);
  }
}

void LinSource::MergeFrom(const LinSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.LinSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_name().size() > 0) {

    source_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  if (from.source_version().size() > 0) {

    source_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  if (from.frame_name().size() > 0) {

    frame_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_name_);
  }
  if (from.signal_name().size() > 0) {

    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
}

void LinSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.LinSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinSource::CopyFrom(const LinSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.LinSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinSource::IsInitialized() const {
  return true;
}

void LinSource::InternalSwap(LinSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_version_.Swap(&other->source_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_name_.Swap(&other->frame_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signal_name_.Swap(&other->signal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata LinSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EthernetSource::InitAsDefaultInstance() {
}
class EthernetSource::_Internal {
 public:
};

EthernetSource::EthernetSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.EthernetSource)
}
EthernetSource::EthernetSource(const EthernetSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_name().empty()) {
    source_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  source_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_version().empty()) {
    source_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_frame_name().empty()) {
    frame_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_name_);
  }
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal_name().empty()) {
    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  vlan_id_ = from.vlan_id_;
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.EthernetSource)
}

void EthernetSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EthernetSource_signal_5fsource_5fdefinition_2eproto.base);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vlan_id_ = 0u;
}

EthernetSource::~EthernetSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.EthernetSource)
  SharedDtor();
}

void EthernetSource::SharedDtor() {
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EthernetSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EthernetSource& EthernetSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EthernetSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void EthernetSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.EthernetSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  frame_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vlan_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* EthernetSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.EthernetSource.source_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.EthernetSource.source_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 vlan_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vlan_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string frame_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_frame_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.EthernetSource.frame_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signal_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.EthernetSource.signal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EthernetSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.EthernetSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.EthernetSource.source_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_name(), target);
  }

  // string source_version = 2;
  if (this->source_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_version().data(), static_cast<int>(this->_internal_source_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.EthernetSource.source_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_version(), target);
  }

  // uint32 vlan_id = 3;
  if (this->vlan_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_vlan_id(), target);
  }

  // string frame_name = 4;
  if (this->frame_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_name().data(), static_cast<int>(this->_internal_frame_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.EthernetSource.frame_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_frame_name(), target);
  }

  // string signal_name = 5;
  if (this->signal_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal_name().data(), static_cast<int>(this->_internal_signal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.EthernetSource.signal_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_signal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.EthernetSource)
  return target;
}

size_t EthernetSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.EthernetSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_name());
  }

  // string source_version = 2;
  if (this->source_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_version());
  }

  // string frame_name = 4;
  if (this->frame_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_name());
  }

  // string signal_name = 5;
  if (this->signal_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal_name());
  }

  // uint32 vlan_id = 3;
  if (this->vlan_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vlan_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EthernetSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.EthernetSource)
  GOOGLE_DCHECK_NE(&from, this);
  const EthernetSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EthernetSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.EthernetSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.EthernetSource)
    MergeFrom(*source);
  }
}

void EthernetSource::MergeFrom(const EthernetSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.EthernetSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_name().size() > 0) {

    source_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  if (from.source_version().size() > 0) {

    source_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  if (from.frame_name().size() > 0) {

    frame_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.frame_name_);
  }
  if (from.signal_name().size() > 0) {

    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  if (from.vlan_id() != 0) {
    _internal_set_vlan_id(from._internal_vlan_id());
  }
}

void EthernetSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.EthernetSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EthernetSource::CopyFrom(const EthernetSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.EthernetSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EthernetSource::IsInitialized() const {
  return true;
}

void EthernetSource::InternalSwap(EthernetSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_version_.Swap(&other->source_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  frame_name_.Swap(&other->frame_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signal_name_.Swap(&other->signal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(vlan_id_, other->vlan_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EthernetSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Scaling::InitAsDefaultInstance() {
}
class Scaling::_Internal {
 public:
};

Scaling::Scaling()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.Scaling)
}
Scaling::Scaling(const Scaling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&numerator_linear_factor_, &from.numerator_linear_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&denominator_offset_) -
    reinterpret_cast<char*>(&numerator_linear_factor_)) + sizeof(denominator_offset_));
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.Scaling)
}

void Scaling::SharedCtor() {
  ::memset(&numerator_linear_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denominator_offset_) -
      reinterpret_cast<char*>(&numerator_linear_factor_)) + sizeof(denominator_offset_));
}

Scaling::~Scaling() {
  // @@protoc_insertion_point(destructor:signal_source_definition.Scaling)
  SharedDtor();
}

void Scaling::SharedDtor() {
}

void Scaling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Scaling& Scaling::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Scaling_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void Scaling::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.Scaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&numerator_linear_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&denominator_offset_) -
      reinterpret_cast<char*>(&numerator_linear_factor_)) + sizeof(denominator_offset_));
  _internal_metadata_.Clear();
}

const char* Scaling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double numerator_linear_factor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          numerator_linear_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double numerator_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          numerator_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double denominator_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          denominator_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scaling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.Scaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double numerator_linear_factor = 1;
  if (!(this->numerator_linear_factor() <= 0 && this->numerator_linear_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_numerator_linear_factor(), target);
  }

  // double numerator_offset = 2;
  if (!(this->numerator_offset() <= 0 && this->numerator_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_numerator_offset(), target);
  }

  // double denominator_offset = 3;
  if (!(this->denominator_offset() <= 0 && this->denominator_offset() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_denominator_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.Scaling)
  return target;
}

size_t Scaling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.Scaling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double numerator_linear_factor = 1;
  if (!(this->numerator_linear_factor() <= 0 && this->numerator_linear_factor() >= 0)) {
    total_size += 1 + 8;
  }

  // double numerator_offset = 2;
  if (!(this->numerator_offset() <= 0 && this->numerator_offset() >= 0)) {
    total_size += 1 + 8;
  }

  // double denominator_offset = 3;
  if (!(this->denominator_offset() <= 0 && this->denominator_offset() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Scaling::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.Scaling)
  GOOGLE_DCHECK_NE(&from, this);
  const Scaling* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Scaling>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.Scaling)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.Scaling)
    MergeFrom(*source);
  }
}

void Scaling::MergeFrom(const Scaling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.Scaling)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.numerator_linear_factor() <= 0 && from.numerator_linear_factor() >= 0)) {
    _internal_set_numerator_linear_factor(from._internal_numerator_linear_factor());
  }
  if (!(from.numerator_offset() <= 0 && from.numerator_offset() >= 0)) {
    _internal_set_numerator_offset(from._internal_numerator_offset());
  }
  if (!(from.denominator_offset() <= 0 && from.denominator_offset() >= 0)) {
    _internal_set_denominator_offset(from._internal_denominator_offset());
  }
}

void Scaling::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.Scaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scaling::CopyFrom(const Scaling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.Scaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scaling::IsInitialized() const {
  return true;
}

void Scaling::InternalSwap(Scaling* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(numerator_linear_factor_, other->numerator_linear_factor_);
  swap(numerator_offset_, other->numerator_offset_);
  swap(denominator_offset_, other->denominator_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Scaling::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NetworkSource::InitAsDefaultInstance() {
  ::signal_source_definition::_NetworkSource_default_instance_._instance.get_mutable()->scaling_values_ = const_cast< ::signal_source_definition::Scaling*>(
      ::signal_source_definition::Scaling::internal_default_instance());
  ::signal_source_definition::_NetworkSource_default_instance_._instance.get_mutable()->sternbild_api_ = const_cast< ::signal_source_definition::SternbildAPI*>(
      ::signal_source_definition::SternbildAPI::internal_default_instance());
}
class NetworkSource::_Internal {
 public:
  static const ::signal_source_definition::Scaling& scaling_values(const NetworkSource* msg);
  static const ::signal_source_definition::SternbildAPI& sternbild_api(const NetworkSource* msg);
};

const ::signal_source_definition::Scaling&
NetworkSource::_Internal::scaling_values(const NetworkSource* msg) {
  return *msg->scaling_values_;
}
const ::signal_source_definition::SternbildAPI&
NetworkSource::_Internal::sternbild_api(const NetworkSource* msg) {
  return *msg->sternbild_api_;
}
NetworkSource::NetworkSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.NetworkSource)
}
NetworkSource::NetworkSource(const NetworkSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      event_group_(from.event_group_),
      element_path_(from.element_path_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_name().empty()) {
    event_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  pdu_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pdu_name().empty()) {
    pdu_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pdu_name_);
  }
  signal_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal_group_name().empty()) {
    signal_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_group_name_);
  }
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal_name().empty()) {
    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  if (from._internal_has_scaling_values()) {
    scaling_values_ = new ::signal_source_definition::Scaling(*from.scaling_values_);
  } else {
    scaling_values_ = nullptr;
  }
  if (from._internal_has_sternbild_api()) {
    sternbild_api_ = new ::signal_source_definition::SternbildAPI(*from.sternbild_api_);
  } else {
    sternbild_api_ = nullptr;
  }
  ::memcpy(&service_id_, &from.service_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scaling_) -
    reinterpret_cast<char*>(&service_id_)) + sizeof(scaling_));
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.NetworkSource)
}

void NetworkSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkSource_signal_5fsource_5fdefinition_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pdu_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&scaling_values_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scaling_) -
      reinterpret_cast<char*>(&scaling_values_)) + sizeof(scaling_));
}

NetworkSource::~NetworkSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.NetworkSource)
  SharedDtor();
}

void NetworkSource::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pdu_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scaling_values_;
  if (this != internal_default_instance()) delete sternbild_api_;
}

void NetworkSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkSource& NetworkSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void NetworkSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.NetworkSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_group_.Clear();
  element_path_.Clear();
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pdu_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && scaling_values_ != nullptr) {
    delete scaling_values_;
  }
  scaling_values_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && sternbild_api_ != nullptr) {
    delete sternbild_api_;
  }
  sternbild_api_ = nullptr;
  ::memset(&service_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scaling_) -
      reinterpret_cast<char*>(&service_id_)) + sizeof(scaling_));
  _internal_metadata_.Clear();
}

const char* NetworkSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          service_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.NetworkSource.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .signal_source_definition.EventGroup event_group = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_group(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // uint32 event_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          event_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string event_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.NetworkSource.event_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pdu_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_pdu_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.NetworkSource.pdu_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signal_group_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_signal_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.NetworkSource.signal_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signal_name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_signal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.NetworkSource.signal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .signal_source_definition.Element element_path = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_element_path(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // bool scaling = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          scaling_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.Scaling scaling_values = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaling_values(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.SternbildAPI sternbild_api = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_sternbild_api(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.NetworkSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 service_id = 1;
  if (this->service_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_service_id(), target);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.NetworkSource.service_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_name(), target);
  }

  // repeated .signal_source_definition.EventGroup event_group = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_group_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_event_group(i), target, stream);
  }

  // uint32 event_id = 4;
  if (this->event_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_event_id(), target);
  }

  // string event_name = 5;
  if (this->event_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_name().data(), static_cast<int>(this->_internal_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.NetworkSource.event_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_event_name(), target);
  }

  // string pdu_name = 6;
  if (this->pdu_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pdu_name().data(), static_cast<int>(this->_internal_pdu_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.NetworkSource.pdu_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pdu_name(), target);
  }

  // string signal_group_name = 7;
  if (this->signal_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal_group_name().data(), static_cast<int>(this->_internal_signal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.NetworkSource.signal_group_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_signal_group_name(), target);
  }

  // string signal_name = 8;
  if (this->signal_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal_name().data(), static_cast<int>(this->_internal_signal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.NetworkSource.signal_name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_signal_name(), target);
  }

  // repeated .signal_source_definition.Element element_path = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_element_path_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_element_path(i), target, stream);
  }

  // bool scaling = 10;
  if (this->scaling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_scaling(), target);
  }

  // .signal_source_definition.Scaling scaling_values = 11;
  if (this->has_scaling_values()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::scaling_values(this), target, stream);
  }

  // .signal_source_definition.SternbildAPI sternbild_api = 12;
  if (this->has_sternbild_api()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::sternbild_api(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.NetworkSource)
  return target;
}

size_t NetworkSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.NetworkSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .signal_source_definition.EventGroup event_group = 3;
  total_size += 1UL * this->_internal_event_group_size();
  for (const auto& msg : this->event_group_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .signal_source_definition.Element element_path = 9;
  total_size += 1UL * this->_internal_element_path_size();
  for (const auto& msg : this->element_path_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string service_name = 2;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string event_name = 5;
  if (this->event_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_name());
  }

  // string pdu_name = 6;
  if (this->pdu_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pdu_name());
  }

  // string signal_group_name = 7;
  if (this->signal_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal_group_name());
  }

  // string signal_name = 8;
  if (this->signal_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal_name());
  }

  // .signal_source_definition.Scaling scaling_values = 11;
  if (this->has_scaling_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaling_values_);
  }

  // .signal_source_definition.SternbildAPI sternbild_api = 12;
  if (this->has_sternbild_api()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sternbild_api_);
  }

  // uint32 service_id = 1;
  if (this->service_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_service_id());
  }

  // uint32 event_id = 4;
  if (this->event_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_id());
  }

  // bool scaling = 10;
  if (this->scaling() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.NetworkSource)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.NetworkSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.NetworkSource)
    MergeFrom(*source);
  }
}

void NetworkSource::MergeFrom(const NetworkSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.NetworkSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_group_.MergeFrom(from.event_group_);
  element_path_.MergeFrom(from.element_path_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.event_name().size() > 0) {

    event_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  if (from.pdu_name().size() > 0) {

    pdu_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pdu_name_);
  }
  if (from.signal_group_name().size() > 0) {

    signal_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_group_name_);
  }
  if (from.signal_name().size() > 0) {

    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  if (from.has_scaling_values()) {
    _internal_mutable_scaling_values()->::signal_source_definition::Scaling::MergeFrom(from._internal_scaling_values());
  }
  if (from.has_sternbild_api()) {
    _internal_mutable_sternbild_api()->::signal_source_definition::SternbildAPI::MergeFrom(from._internal_sternbild_api());
  }
  if (from.service_id() != 0) {
    _internal_set_service_id(from._internal_service_id());
  }
  if (from.event_id() != 0) {
    _internal_set_event_id(from._internal_event_id());
  }
  if (from.scaling() != 0) {
    _internal_set_scaling(from._internal_scaling());
  }
}

void NetworkSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.NetworkSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkSource::CopyFrom(const NetworkSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.NetworkSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkSource::IsInitialized() const {
  return true;
}

void NetworkSource::InternalSwap(NetworkSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  event_group_.InternalSwap(&other->event_group_);
  element_path_.InternalSwap(&other->element_path_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  event_name_.Swap(&other->event_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pdu_name_.Swap(&other->pdu_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signal_group_name_.Swap(&other->signal_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signal_name_.Swap(&other->signal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(scaling_values_, other->scaling_values_);
  swap(sternbild_api_, other->sternbild_api_);
  swap(service_id_, other->service_id_);
  swap(event_id_, other->event_id_);
  swap(scaling_, other->scaling_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EventGroup::InitAsDefaultInstance() {
}
class EventGroup::_Internal {
 public:
};

EventGroup::EventGroup()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.EventGroup)
}
EventGroup::EventGroup(const EventGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_event_group_name().empty()) {
    event_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_group_name_);
  }
  event_group_id_ = from.event_group_id_;
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.EventGroup)
}

void EventGroup::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EventGroup_signal_5fsource_5fdefinition_2eproto.base);
  event_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_group_id_ = 0u;
}

EventGroup::~EventGroup() {
  // @@protoc_insertion_point(destructor:signal_source_definition.EventGroup)
  SharedDtor();
}

void EventGroup::SharedDtor() {
  event_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EventGroup& EventGroup::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EventGroup_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void EventGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.EventGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  event_group_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* EventGroup::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 event_group_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          event_group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string event_group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_event_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.EventGroup.event_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EventGroup::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.EventGroup)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 event_group_id = 1;
  if (this->event_group_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_event_group_id(), target);
  }

  // string event_group_name = 2;
  if (this->event_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event_group_name().data(), static_cast<int>(this->_internal_event_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.EventGroup.event_group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event_group_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.EventGroup)
  return target;
}

size_t EventGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.EventGroup)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string event_group_name = 2;
  if (this->event_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event_group_name());
  }

  // uint32 event_group_id = 1;
  if (this->event_group_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_event_group_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EventGroup::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.EventGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const EventGroup* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EventGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.EventGroup)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.EventGroup)
    MergeFrom(*source);
  }
}

void EventGroup::MergeFrom(const EventGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.EventGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_group_name().size() > 0) {

    event_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.event_group_name_);
  }
  if (from.event_group_id() != 0) {
    _internal_set_event_group_id(from._internal_event_group_id());
  }
}

void EventGroup::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.EventGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventGroup::CopyFrom(const EventGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.EventGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventGroup::IsInitialized() const {
  return true;
}

void EventGroup::InternalSwap(EventGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  event_group_name_.Swap(&other->event_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_group_id_, other->event_group_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventGroup::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Element::InitAsDefaultInstance() {
}
class Element::_Internal {
 public:
};

Element::Element()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.Element)
}
Element::Element(const Element& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&sequence_number_) -
    reinterpret_cast<char*>(&index_)) + sizeof(sequence_number_));
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.Element)
}

void Element::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Element_signal_5fsource_5fdefinition_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&index_)) + sizeof(sequence_number_));
}

Element::~Element() {
  // @@protoc_insertion_point(destructor:signal_source_definition.Element)
  SharedDtor();
}

void Element::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Element::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Element& Element::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Element_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void Element::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.Element)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sequence_number_) -
      reinterpret_cast<char*>(&index_)) + sizeof(sequence_number_));
  _internal_metadata_.Clear();
}

const char* Element::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.Element.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Element::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.Element)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sequence_number(), target);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.Element.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.Element)
  return target;
}

size_t Element::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.Element)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // uint32 sequence_number = 2;
  if (this->sequence_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_sequence_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Element::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.Element)
  GOOGLE_DCHECK_NE(&from, this);
  const Element* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Element>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.Element)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.Element)
    MergeFrom(*source);
  }
}

void Element::MergeFrom(const Element& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.Element)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from.sequence_number() != 0) {
    _internal_set_sequence_number(from._internal_sequence_number());
  }
}

void Element::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Element::CopyFrom(const Element& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.Element)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Element::IsInitialized() const {
  return true;
}

void Element::InternalSwap(Element* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(index_, other->index_);
  swap(sequence_number_, other->sequence_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Element::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SternbildAPI::InitAsDefaultInstance() {
}
class SternbildAPI::_Internal {
 public:
};

SternbildAPI::SternbildAPI()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.SternbildAPI)
}
SternbildAPI::SternbildAPI(const SternbildAPI& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sternbild_service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sternbild_service_name().empty()) {
    sternbild_service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sternbild_service_name_);
  }
  sternbild_signal_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sternbild_signal_group_name().empty()) {
    sternbild_signal_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sternbild_signal_group_name_);
  }
  sternbild_event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sternbild_event_name().empty()) {
    sternbild_event_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sternbild_event_name_);
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.SternbildAPI)
}

void SternbildAPI::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SternbildAPI_signal_5fsource_5fdefinition_2eproto.base);
  sternbild_service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sternbild_signal_group_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sternbild_event_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SternbildAPI::~SternbildAPI() {
  // @@protoc_insertion_point(destructor:signal_source_definition.SternbildAPI)
  SharedDtor();
}

void SternbildAPI::SharedDtor() {
  sternbild_service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sternbild_signal_group_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sternbild_event_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SternbildAPI::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SternbildAPI& SternbildAPI::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SternbildAPI_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void SternbildAPI::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.SternbildAPI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sternbild_service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sternbild_signal_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sternbild_event_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SternbildAPI::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sternbild_service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_sternbild_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.SternbildAPI.sternbild_service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sternbild_signal_group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sternbild_signal_group_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.SternbildAPI.sternbild_signal_group_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sternbild_event_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_sternbild_event_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.SternbildAPI.sternbild_event_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SternbildAPI::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.SternbildAPI)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sternbild_service_name = 1;
  if (this->sternbild_service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sternbild_service_name().data(), static_cast<int>(this->_internal_sternbild_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.SternbildAPI.sternbild_service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sternbild_service_name(), target);
  }

  // string sternbild_signal_group_name = 2;
  if (this->sternbild_signal_group_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sternbild_signal_group_name().data(), static_cast<int>(this->_internal_sternbild_signal_group_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.SternbildAPI.sternbild_signal_group_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sternbild_signal_group_name(), target);
  }

  // string sternbild_event_name = 3;
  if (this->sternbild_event_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sternbild_event_name().data(), static_cast<int>(this->_internal_sternbild_event_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.SternbildAPI.sternbild_event_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sternbild_event_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.SternbildAPI)
  return target;
}

size_t SternbildAPI::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.SternbildAPI)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sternbild_service_name = 1;
  if (this->sternbild_service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sternbild_service_name());
  }

  // string sternbild_signal_group_name = 2;
  if (this->sternbild_signal_group_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sternbild_signal_group_name());
  }

  // string sternbild_event_name = 3;
  if (this->sternbild_event_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sternbild_event_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SternbildAPI::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.SternbildAPI)
  GOOGLE_DCHECK_NE(&from, this);
  const SternbildAPI* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SternbildAPI>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.SternbildAPI)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.SternbildAPI)
    MergeFrom(*source);
  }
}

void SternbildAPI::MergeFrom(const SternbildAPI& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.SternbildAPI)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sternbild_service_name().size() > 0) {

    sternbild_service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sternbild_service_name_);
  }
  if (from.sternbild_signal_group_name().size() > 0) {

    sternbild_signal_group_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sternbild_signal_group_name_);
  }
  if (from.sternbild_event_name().size() > 0) {

    sternbild_event_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sternbild_event_name_);
  }
}

void SternbildAPI::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.SternbildAPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SternbildAPI::CopyFrom(const SternbildAPI& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.SternbildAPI)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SternbildAPI::IsInitialized() const {
  return true;
}

void SternbildAPI::InternalSwap(SternbildAPI* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sternbild_service_name_.Swap(&other->sternbild_service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sternbild_signal_group_name_.Swap(&other->sternbild_signal_group_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sternbild_event_name_.Swap(&other->sternbild_event_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SternbildAPI::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InternalSource::InitAsDefaultInstance() {
}
class InternalSource::_Internal {
 public:
};

InternalSource::InternalSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.InternalSource)
}
InternalSource::InternalSource(const InternalSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_name().empty()) {
    source_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  source_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source_version().empty()) {
    source_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal_name().empty()) {
    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.InternalSource)
}

void InternalSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InternalSource_signal_5fsource_5fdefinition_2eproto.base);
  source_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

InternalSource::~InternalSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.InternalSource)
  SharedDtor();
}

void InternalSource::SharedDtor() {
  source_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InternalSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InternalSource& InternalSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InternalSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void InternalSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.InternalSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  source_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* InternalSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string source_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_source_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.InternalSource.source_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.InternalSource.source_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signal_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.InternalSource.signal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InternalSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.InternalSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_name().data(), static_cast<int>(this->_internal_source_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.InternalSource.source_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_source_name(), target);
  }

  // string source_version = 2;
  if (this->source_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source_version().data(), static_cast<int>(this->_internal_source_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.InternalSource.source_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_version(), target);
  }

  // string signal_name = 3;
  if (this->signal_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal_name().data(), static_cast<int>(this->_internal_signal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.InternalSource.signal_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_signal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.InternalSource)
  return target;
}

size_t InternalSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.InternalSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source_name = 1;
  if (this->source_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_name());
  }

  // string source_version = 2;
  if (this->source_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source_version());
  }

  // string signal_name = 3;
  if (this->signal_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InternalSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.InternalSource)
  GOOGLE_DCHECK_NE(&from, this);
  const InternalSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InternalSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.InternalSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.InternalSource)
    MergeFrom(*source);
  }
}

void InternalSource::MergeFrom(const InternalSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.InternalSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source_name().size() > 0) {

    source_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_name_);
  }
  if (from.source_version().size() > 0) {

    source_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.source_version_);
  }
  if (from.signal_name().size() > 0) {

    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
}

void InternalSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.InternalSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InternalSource::CopyFrom(const InternalSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.InternalSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalSource::IsInitialized() const {
  return true;
}

void InternalSource::InternalSwap(InternalSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  source_name_.Swap(&other->source_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  source_version_.Swap(&other->source_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signal_name_.Swap(&other->signal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProcessingToolboxSource::InitAsDefaultInstance() {
}
class ProcessingToolboxSource::_Internal {
 public:
};

ProcessingToolboxSource::ProcessingToolboxSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.ProcessingToolboxSource)
}
ProcessingToolboxSource::ProcessingToolboxSource(const ProcessingToolboxSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tool_metadata_(from.tool_metadata_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  toolbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_toolbox_id().empty()) {
    toolbox_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toolbox_id_);
  }
  toolbox_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_toolbox_version().empty()) {
    toolbox_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toolbox_version_);
  }
  format_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format_name().empty()) {
    format_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_name_);
  }
  format_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format_version().empty()) {
    format_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_version_);
  }
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signal_name().empty()) {
    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.ProcessingToolboxSource)
}

void ProcessingToolboxSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProcessingToolboxSource_signal_5fsource_5fdefinition_2eproto.base);
  toolbox_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toolbox_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ProcessingToolboxSource::~ProcessingToolboxSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.ProcessingToolboxSource)
  SharedDtor();
}

void ProcessingToolboxSource::SharedDtor() {
  toolbox_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toolbox_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProcessingToolboxSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProcessingToolboxSource& ProcessingToolboxSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProcessingToolboxSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void ProcessingToolboxSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.ProcessingToolboxSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tool_metadata_.Clear();
  toolbox_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  toolbox_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* ProcessingToolboxSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string toolbox_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_toolbox_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ProcessingToolboxSource.toolbox_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string toolbox_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_toolbox_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ProcessingToolboxSource.toolbox_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_format_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ProcessingToolboxSource.format_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string format_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_format_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ProcessingToolboxSource.format_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signal_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_signal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ProcessingToolboxSource.signal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .signal_source_definition.ToolMetadata tool_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tool_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProcessingToolboxSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.ProcessingToolboxSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string toolbox_id = 1;
  if (this->toolbox_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_toolbox_id().data(), static_cast<int>(this->_internal_toolbox_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ProcessingToolboxSource.toolbox_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_toolbox_id(), target);
  }

  // string toolbox_version = 2;
  if (this->toolbox_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_toolbox_version().data(), static_cast<int>(this->_internal_toolbox_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ProcessingToolboxSource.toolbox_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_toolbox_version(), target);
  }

  // string format_name = 3;
  if (this->format_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format_name().data(), static_cast<int>(this->_internal_format_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ProcessingToolboxSource.format_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_format_name(), target);
  }

  // string format_version = 4;
  if (this->format_version().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format_version().data(), static_cast<int>(this->_internal_format_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ProcessingToolboxSource.format_version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_format_version(), target);
  }

  // string signal_name = 5;
  if (this->signal_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signal_name().data(), static_cast<int>(this->_internal_signal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ProcessingToolboxSource.signal_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_signal_name(), target);
  }

  // repeated .signal_source_definition.ToolMetadata tool_metadata = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tool_metadata_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_tool_metadata(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.ProcessingToolboxSource)
  return target;
}

size_t ProcessingToolboxSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.ProcessingToolboxSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .signal_source_definition.ToolMetadata tool_metadata = 6;
  total_size += 1UL * this->_internal_tool_metadata_size();
  for (const auto& msg : this->tool_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string toolbox_id = 1;
  if (this->toolbox_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toolbox_id());
  }

  // string toolbox_version = 2;
  if (this->toolbox_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_toolbox_version());
  }

  // string format_name = 3;
  if (this->format_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format_name());
  }

  // string format_version = 4;
  if (this->format_version().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format_version());
  }

  // string signal_name = 5;
  if (this->signal_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProcessingToolboxSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.ProcessingToolboxSource)
  GOOGLE_DCHECK_NE(&from, this);
  const ProcessingToolboxSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProcessingToolboxSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.ProcessingToolboxSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.ProcessingToolboxSource)
    MergeFrom(*source);
  }
}

void ProcessingToolboxSource::MergeFrom(const ProcessingToolboxSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.ProcessingToolboxSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tool_metadata_.MergeFrom(from.tool_metadata_);
  if (from.toolbox_id().size() > 0) {

    toolbox_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toolbox_id_);
  }
  if (from.toolbox_version().size() > 0) {

    toolbox_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.toolbox_version_);
  }
  if (from.format_name().size() > 0) {

    format_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_name_);
  }
  if (from.format_version().size() > 0) {

    format_version_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_version_);
  }
  if (from.signal_name().size() > 0) {

    signal_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signal_name_);
  }
}

void ProcessingToolboxSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.ProcessingToolboxSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProcessingToolboxSource::CopyFrom(const ProcessingToolboxSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.ProcessingToolboxSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessingToolboxSource::IsInitialized() const {
  return true;
}

void ProcessingToolboxSource::InternalSwap(ProcessingToolboxSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tool_metadata_.InternalSwap(&other->tool_metadata_);
  toolbox_id_.Swap(&other->toolbox_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  toolbox_version_.Swap(&other->toolbox_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_name_.Swap(&other->format_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  format_version_.Swap(&other->format_version_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signal_name_.Swap(&other->signal_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessingToolboxSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ToolMetadata::InitAsDefaultInstance() {
  ::signal_source_definition::_ToolMetadata_default_instance_._instance.get_mutable()->sampling_rate_ = const_cast< ::signal_source_definition::SamplingRate*>(
      ::signal_source_definition::SamplingRate::internal_default_instance());
}
class ToolMetadata::_Internal {
 public:
  static const ::signal_source_definition::SamplingRate& sampling_rate(const ToolMetadata* msg);
};

const ::signal_source_definition::SamplingRate&
ToolMetadata::_Internal::sampling_rate(const ToolMetadata* msg) {
  return *msg->sampling_rate_;
}
ToolMetadata::ToolMetadata()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.ToolMetadata)
}
ToolMetadata::ToolMetadata(const ToolMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dpj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dpj_id().empty()) {
    dpj_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpj_id_);
  }
  named_output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_named_output().empty()) {
    named_output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.named_output_);
  }
  if (from._internal_has_sampling_rate()) {
    sampling_rate_ = new ::signal_source_definition::SamplingRate(*from.sampling_rate_);
  } else {
    sampling_rate_ = nullptr;
  }
  ::memcpy(&output_id_, &from.output_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&failsafe_option_) -
    reinterpret_cast<char*>(&output_id_)) + sizeof(failsafe_option_));
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.ToolMetadata)
}

void ToolMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ToolMetadata_signal_5fsource_5fdefinition_2eproto.base);
  dpj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  named_output_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sampling_rate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failsafe_option_) -
      reinterpret_cast<char*>(&sampling_rate_)) + sizeof(failsafe_option_));
}

ToolMetadata::~ToolMetadata() {
  // @@protoc_insertion_point(destructor:signal_source_definition.ToolMetadata)
  SharedDtor();
}

void ToolMetadata::SharedDtor() {
  dpj_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  named_output_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sampling_rate_;
}

void ToolMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolMetadata& ToolMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ToolMetadata_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void ToolMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.ToolMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dpj_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  named_output_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && sampling_rate_ != nullptr) {
    delete sampling_rate_;
  }
  sampling_rate_ = nullptr;
  ::memset(&output_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&failsafe_option_) -
      reinterpret_cast<char*>(&output_id_)) + sizeof(failsafe_option_));
  _internal_metadata_.Clear();
}

const char* ToolMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dpj_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_dpj_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ToolMetadata.dpj_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string named_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_named_output();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ToolMetadata.named_output"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 output_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          output_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.ToolMetadata.INPUTCONFIG input_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_input_config(static_cast<::signal_source_definition::ToolMetadata_INPUTCONFIG>(val));
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.SamplingRate sampling_rate = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_sampling_rate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.ToolMetadata.FAILSAFE failsafe_option = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_failsafe_option(static_cast<::signal_source_definition::ToolMetadata_FAILSAFE>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.ToolMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dpj_id = 1;
  if (this->dpj_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dpj_id().data(), static_cast<int>(this->_internal_dpj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ToolMetadata.dpj_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dpj_id(), target);
  }

  // string named_output = 2;
  if (this->named_output().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_named_output().data(), static_cast<int>(this->_internal_named_output().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ToolMetadata.named_output");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_named_output(), target);
  }

  // int32 output_id = 3;
  if (this->output_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_output_id(), target);
  }

  // .signal_source_definition.ToolMetadata.INPUTCONFIG input_config = 4;
  if (this->input_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_input_config(), target);
  }

  // .signal_source_definition.SamplingRate sampling_rate = 5;
  if (this->has_sampling_rate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::sampling_rate(this), target, stream);
  }

  // .signal_source_definition.ToolMetadata.FAILSAFE failsafe_option = 6;
  if (this->failsafe_option() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_failsafe_option(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.ToolMetadata)
  return target;
}

size_t ToolMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.ToolMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dpj_id = 1;
  if (this->dpj_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dpj_id());
  }

  // string named_output = 2;
  if (this->named_output().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_named_output());
  }

  // .signal_source_definition.SamplingRate sampling_rate = 5;
  if (this->has_sampling_rate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sampling_rate_);
  }

  // int32 output_id = 3;
  if (this->output_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_output_id());
  }

  // .signal_source_definition.ToolMetadata.INPUTCONFIG input_config = 4;
  if (this->input_config() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_input_config());
  }

  // .signal_source_definition.ToolMetadata.FAILSAFE failsafe_option = 6;
  if (this->failsafe_option() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_failsafe_option());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.ToolMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.ToolMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.ToolMetadata)
    MergeFrom(*source);
  }
}

void ToolMetadata::MergeFrom(const ToolMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.ToolMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dpj_id().size() > 0) {

    dpj_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpj_id_);
  }
  if (from.named_output().size() > 0) {

    named_output_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.named_output_);
  }
  if (from.has_sampling_rate()) {
    _internal_mutable_sampling_rate()->::signal_source_definition::SamplingRate::MergeFrom(from._internal_sampling_rate());
  }
  if (from.output_id() != 0) {
    _internal_set_output_id(from._internal_output_id());
  }
  if (from.input_config() != 0) {
    _internal_set_input_config(from._internal_input_config());
  }
  if (from.failsafe_option() != 0) {
    _internal_set_failsafe_option(from._internal_failsafe_option());
  }
}

void ToolMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.ToolMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolMetadata::CopyFrom(const ToolMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.ToolMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolMetadata::IsInitialized() const {
  return true;
}

void ToolMetadata::InternalSwap(ToolMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dpj_id_.Swap(&other->dpj_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  named_output_.Swap(&other->named_output_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sampling_rate_, other->sampling_rate_);
  swap(output_id_, other->output_id_);
  swap(input_config_, other->input_config_);
  swap(failsafe_option_, other->failsafe_option_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SamplingRate::InitAsDefaultInstance() {
  ::signal_source_definition::_SamplingRate_default_instance_.sampling_rate_time_ms_ = 0u;
  ::signal_source_definition::_SamplingRate_default_instance_.sampling_rate_injection_count_ = 0u;
}
class SamplingRate::_Internal {
 public:
};

SamplingRate::SamplingRate()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.SamplingRate)
}
SamplingRate::SamplingRate(const SamplingRate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_sampling_rate();
  switch (from.sampling_rate_case()) {
    case kSamplingRateTimeMs: {
      _internal_set_sampling_rate_time_ms(from._internal_sampling_rate_time_ms());
      break;
    }
    case kSamplingRateInjectionCount: {
      _internal_set_sampling_rate_injection_count(from._internal_sampling_rate_injection_count());
      break;
    }
    case SAMPLING_RATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.SamplingRate)
}

void SamplingRate::SharedCtor() {
  clear_has_sampling_rate();
}

SamplingRate::~SamplingRate() {
  // @@protoc_insertion_point(destructor:signal_source_definition.SamplingRate)
  SharedDtor();
}

void SamplingRate::SharedDtor() {
  if (has_sampling_rate()) {
    clear_sampling_rate();
  }
}

void SamplingRate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SamplingRate& SamplingRate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SamplingRate_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void SamplingRate::clear_sampling_rate() {
// @@protoc_insertion_point(one_of_clear_start:signal_source_definition.SamplingRate)
  switch (sampling_rate_case()) {
    case kSamplingRateTimeMs: {
      // No need to clear
      break;
    }
    case kSamplingRateInjectionCount: {
      // No need to clear
      break;
    }
    case SAMPLING_RATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SAMPLING_RATE_NOT_SET;
}


void SamplingRate::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.SamplingRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_sampling_rate();
  _internal_metadata_.Clear();
}

const char* SamplingRate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 sampling_rate_time_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _internal_set_sampling_rate_time_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 sampling_rate_injection_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_sampling_rate_injection_count(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SamplingRate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.SamplingRate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 sampling_rate_time_ms = 1;
  if (_internal_has_sampling_rate_time_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_sampling_rate_time_ms(), target);
  }

  // uint32 sampling_rate_injection_count = 2;
  if (_internal_has_sampling_rate_injection_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sampling_rate_injection_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.SamplingRate)
  return target;
}

size_t SamplingRate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.SamplingRate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (sampling_rate_case()) {
    // uint32 sampling_rate_time_ms = 1;
    case kSamplingRateTimeMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sampling_rate_time_ms());
      break;
    }
    // uint32 sampling_rate_injection_count = 2;
    case kSamplingRateInjectionCount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_sampling_rate_injection_count());
      break;
    }
    case SAMPLING_RATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SamplingRate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.SamplingRate)
  GOOGLE_DCHECK_NE(&from, this);
  const SamplingRate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SamplingRate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.SamplingRate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.SamplingRate)
    MergeFrom(*source);
  }
}

void SamplingRate::MergeFrom(const SamplingRate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.SamplingRate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.sampling_rate_case()) {
    case kSamplingRateTimeMs: {
      _internal_set_sampling_rate_time_ms(from._internal_sampling_rate_time_ms());
      break;
    }
    case kSamplingRateInjectionCount: {
      _internal_set_sampling_rate_injection_count(from._internal_sampling_rate_injection_count());
      break;
    }
    case SAMPLING_RATE_NOT_SET: {
      break;
    }
  }
}

void SamplingRate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.SamplingRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SamplingRate::CopyFrom(const SamplingRate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.SamplingRate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SamplingRate::IsInitialized() const {
  return true;
}

void SamplingRate::InternalSwap(SamplingRate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(sampling_rate_, other->sampling_rate_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SamplingRate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThriftmeSource::InitAsDefaultInstance() {
}
class ThriftmeSource::_Internal {
 public:
};

ThriftmeSource::ThriftmeSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.ThriftmeSource)
}
ThriftmeSource::ThriftmeSource(const ThriftmeSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function_name().empty()) {
    function_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.function_name_);
  }
  ::memcpy(&service_hash_id_, &from.service_hash_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&message_type_) -
    reinterpret_cast<char*>(&service_hash_id_)) + sizeof(message_type_));
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.ThriftmeSource)
}

void ThriftmeSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThriftmeSource_signal_5fsource_5fdefinition_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&service_hash_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&service_hash_id_)) + sizeof(message_type_));
}

ThriftmeSource::~ThriftmeSource() {
  // @@protoc_insertion_point(destructor:signal_source_definition.ThriftmeSource)
  SharedDtor();
}

void ThriftmeSource::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThriftmeSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThriftmeSource& ThriftmeSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThriftmeSource_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void ThriftmeSource::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.ThriftmeSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&service_hash_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&message_type_) -
      reinterpret_cast<char*>(&service_hash_id_)) + sizeof(message_type_));
  _internal_metadata_.Clear();
}

const char* ThriftmeSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 service_hash_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          service_hash_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 function_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          function_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ThriftmeSource.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string function_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ThriftmeSource.function_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.ThriftmeSource.MessageTypeEnum message_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_message_type(static_cast<::signal_source_definition::ThriftmeSource_MessageTypeEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThriftmeSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.ThriftmeSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 service_hash_id = 1;
  if (this->service_hash_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_service_hash_id(), target);
  }

  // int32 function_id = 2;
  if (this->function_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_function_id(), target);
  }

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ThriftmeSource.service_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_name(), target);
  }

  // string function_name = 4;
  if (this->function_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ThriftmeSource.function_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_function_name(), target);
  }

  // .signal_source_definition.ThriftmeSource.MessageTypeEnum message_type = 5;
  if (this->message_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_message_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.ThriftmeSource)
  return target;
}

size_t ThriftmeSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.ThriftmeSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 3;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string function_name = 4;
  if (this->function_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }

  // int32 service_hash_id = 1;
  if (this->service_hash_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_service_hash_id());
  }

  // int32 function_id = 2;
  if (this->function_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_function_id());
  }

  // .signal_source_definition.ThriftmeSource.MessageTypeEnum message_type = 5;
  if (this->message_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_message_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThriftmeSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.ThriftmeSource)
  GOOGLE_DCHECK_NE(&from, this);
  const ThriftmeSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThriftmeSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.ThriftmeSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.ThriftmeSource)
    MergeFrom(*source);
  }
}

void ThriftmeSource::MergeFrom(const ThriftmeSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.ThriftmeSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.function_name().size() > 0) {

    function_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.function_name_);
  }
  if (from.service_hash_id() != 0) {
    _internal_set_service_hash_id(from._internal_service_hash_id());
  }
  if (from.function_id() != 0) {
    _internal_set_function_id(from._internal_function_id());
  }
  if (from.message_type() != 0) {
    _internal_set_message_type(from._internal_message_type());
  }
}

void ThriftmeSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.ThriftmeSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThriftmeSource::CopyFrom(const ThriftmeSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.ThriftmeSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThriftmeSource::IsInitialized() const {
  return true;
}

void ThriftmeSource::InternalSwap(ThriftmeSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  function_name_.Swap(&other->function_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(service_hash_id_, other->service_hash_id_);
  swap(function_id_, other->function_id_);
  swap(message_type_, other->message_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThriftmeSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ThriftmeSourceActive::InitAsDefaultInstance() {
}
class ThriftmeSourceActive::_Internal {
 public:
};

ThriftmeSourceActive::ThriftmeSourceActive()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.ThriftmeSourceActive)
}
ThriftmeSourceActive::ThriftmeSourceActive(const ThriftmeSourceActive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      member_(from.member_),
      parameter_(from.parameter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  broker_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_broker_url().empty()) {
    broker_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.broker_url_);
  }
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function_name().empty()) {
    function_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.function_name_);
  }
  ::memcpy(&service_hash_id_, &from.service_hash_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&function_id_) -
    reinterpret_cast<char*>(&service_hash_id_)) + sizeof(function_id_));
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.ThriftmeSourceActive)
}

void ThriftmeSourceActive::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ThriftmeSourceActive_signal_5fsource_5fdefinition_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&service_hash_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&function_id_) -
      reinterpret_cast<char*>(&service_hash_id_)) + sizeof(function_id_));
}

ThriftmeSourceActive::~ThriftmeSourceActive() {
  // @@protoc_insertion_point(destructor:signal_source_definition.ThriftmeSourceActive)
  SharedDtor();
}

void ThriftmeSourceActive::SharedDtor() {
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThriftmeSourceActive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ThriftmeSourceActive& ThriftmeSourceActive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ThriftmeSourceActive_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void ThriftmeSourceActive::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.ThriftmeSourceActive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  member_.Clear();
  parameter_.Clear();
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  broker_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&service_hash_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&function_id_) -
      reinterpret_cast<char*>(&service_hash_id_)) + sizeof(function_id_));
  _internal_metadata_.Clear();
}

const char* ThriftmeSourceActive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_service_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ThriftmeSourceActive.service_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 service_hash_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          service_hash_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string broker_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_broker_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ThriftmeSourceActive.broker_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string function_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.ThriftmeSourceActive.function_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 function_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          function_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .signal_source_definition.DataMembers member = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_member(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .signal_source_definition.Parameters parameter = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ThriftmeSourceActive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.ThriftmeSourceActive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ThriftmeSourceActive.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // int32 service_hash_id = 2;
  if (this->service_hash_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_service_hash_id(), target);
  }

  // string broker_url = 3;
  if (this->broker_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_broker_url().data(), static_cast<int>(this->_internal_broker_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ThriftmeSourceActive.broker_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_broker_url(), target);
  }

  // string function_name = 4;
  if (this->function_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.ThriftmeSourceActive.function_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_function_name(), target);
  }

  // int32 function_id = 5;
  if (this->function_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_function_id(), target);
  }

  // repeated .signal_source_definition.DataMembers member = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_member_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_member(i), target, stream);
  }

  // repeated .signal_source_definition.Parameters parameter = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_parameter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.ThriftmeSourceActive)
  return target;
}

size_t ThriftmeSourceActive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.ThriftmeSourceActive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .signal_source_definition.DataMembers member = 6;
  total_size += 1UL * this->_internal_member_size();
  for (const auto& msg : this->member_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .signal_source_definition.Parameters parameter = 7;
  total_size += 1UL * this->_internal_parameter_size();
  for (const auto& msg : this->parameter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string broker_url = 3;
  if (this->broker_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_broker_url());
  }

  // string function_name = 4;
  if (this->function_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }

  // int32 service_hash_id = 2;
  if (this->service_hash_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_service_hash_id());
  }

  // int32 function_id = 5;
  if (this->function_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_function_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ThriftmeSourceActive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.ThriftmeSourceActive)
  GOOGLE_DCHECK_NE(&from, this);
  const ThriftmeSourceActive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ThriftmeSourceActive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.ThriftmeSourceActive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.ThriftmeSourceActive)
    MergeFrom(*source);
  }
}

void ThriftmeSourceActive::MergeFrom(const ThriftmeSourceActive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.ThriftmeSourceActive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  member_.MergeFrom(from.member_);
  parameter_.MergeFrom(from.parameter_);
  if (from.service_name().size() > 0) {

    service_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.service_name_);
  }
  if (from.broker_url().size() > 0) {

    broker_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.broker_url_);
  }
  if (from.function_name().size() > 0) {

    function_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.function_name_);
  }
  if (from.service_hash_id() != 0) {
    _internal_set_service_hash_id(from._internal_service_hash_id());
  }
  if (from.function_id() != 0) {
    _internal_set_function_id(from._internal_function_id());
  }
}

void ThriftmeSourceActive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.ThriftmeSourceActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThriftmeSourceActive::CopyFrom(const ThriftmeSourceActive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.ThriftmeSourceActive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThriftmeSourceActive::IsInitialized() const {
  return true;
}

void ThriftmeSourceActive::InternalSwap(ThriftmeSourceActive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  member_.InternalSwap(&other->member_);
  parameter_.InternalSwap(&other->parameter_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  broker_url_.Swap(&other->broker_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  function_name_.Swap(&other->function_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(service_hash_id_, other->service_hash_id_);
  swap(function_id_, other->function_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThriftmeSourceActive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Parameters::InitAsDefaultInstance() {
  ::signal_source_definition::_Parameters_default_instance_.double_value_ = 0;
  ::signal_source_definition::_Parameters_default_instance_.float_value_ = 0;
  ::signal_source_definition::_Parameters_default_instance_.int32_value_ = 0;
  ::signal_source_definition::_Parameters_default_instance_.int64_value_ = PROTOBUF_LONGLONG(0);
  ::signal_source_definition::_Parameters_default_instance_.uint32_value_ = 0u;
  ::signal_source_definition::_Parameters_default_instance_.uint64_value_ = PROTOBUF_ULONGLONG(0);
  ::signal_source_definition::_Parameters_default_instance_.sint32_value_ = 0;
  ::signal_source_definition::_Parameters_default_instance_.sint64_value_ = PROTOBUF_LONGLONG(0);
  ::signal_source_definition::_Parameters_default_instance_.fixed32_value_ = 0u;
  ::signal_source_definition::_Parameters_default_instance_.fixed64_value_ = PROTOBUF_ULONGLONG(0);
  ::signal_source_definition::_Parameters_default_instance_.sfixed32_value_ = 0;
  ::signal_source_definition::_Parameters_default_instance_.sfixed64_value_ = PROTOBUF_LONGLONG(0);
  ::signal_source_definition::_Parameters_default_instance_.bool_value_ = false;
  ::signal_source_definition::_Parameters_default_instance_.string_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::signal_source_definition::_Parameters_default_instance_.bytes_value_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class Parameters::_Internal {
 public:
};

Parameters::Parameters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.Parameters)
}
Parameters::Parameters(const Parameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parameter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parameter_name().empty()) {
    parameter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parameter_name_);
  }
  clear_has_parameter_value();
  switch (from.parameter_value_case()) {
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kUint32Value: {
      _internal_set_uint32_value(from._internal_uint32_value());
      break;
    }
    case kUint64Value: {
      _internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kSint32Value: {
      _internal_set_sint32_value(from._internal_sint32_value());
      break;
    }
    case kSint64Value: {
      _internal_set_sint64_value(from._internal_sint64_value());
      break;
    }
    case kFixed32Value: {
      _internal_set_fixed32_value(from._internal_fixed32_value());
      break;
    }
    case kFixed64Value: {
      _internal_set_fixed64_value(from._internal_fixed64_value());
      break;
    }
    case kSfixed32Value: {
      _internal_set_sfixed32_value(from._internal_sfixed32_value());
      break;
    }
    case kSfixed64Value: {
      _internal_set_sfixed64_value(from._internal_sfixed64_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case PARAMETER_VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.Parameters)
}

void Parameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Parameters_signal_5fsource_5fdefinition_2eproto.base);
  parameter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_parameter_value();
}

Parameters::~Parameters() {
  // @@protoc_insertion_point(destructor:signal_source_definition.Parameters)
  SharedDtor();
}

void Parameters::SharedDtor() {
  parameter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_parameter_value()) {
    clear_parameter_value();
  }
}

void Parameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Parameters& Parameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Parameters_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void Parameters::clear_parameter_value() {
// @@protoc_insertion_point(one_of_clear_start:signal_source_definition.Parameters)
  switch (parameter_value_case()) {
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kInt32Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kUint32Value: {
      // No need to clear
      break;
    }
    case kUint64Value: {
      // No need to clear
      break;
    }
    case kSint32Value: {
      // No need to clear
      break;
    }
    case kSint64Value: {
      // No need to clear
      break;
    }
    case kFixed32Value: {
      // No need to clear
      break;
    }
    case kFixed64Value: {
      // No need to clear
      break;
    }
    case kSfixed32Value: {
      // No need to clear
      break;
    }
    case kSfixed64Value: {
      // No need to clear
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      parameter_value_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kBytesValue: {
      parameter_value_.bytes_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case PARAMETER_VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMETER_VALUE_NOT_SET;
}


void Parameters::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_parameter_value();
  _internal_metadata_.Clear();
}

const char* Parameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parameter_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_parameter_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.Parameters.parameter_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // float float_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 int32_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 int64_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uint32_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 uint64_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint32 sint32_value = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_sint32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // sint64 sint64_value = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // fixed32 fixed32_value = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _internal_set_fixed32_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint32);
        } else goto handle_unusual;
        continue;
      // fixed64 fixed64_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::uint64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::uint64);
        } else goto handle_unusual;
        continue;
      // sfixed32 sfixed32_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _internal_set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // sfixed64 sfixed64_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _internal_set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int64>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int64);
        } else goto handle_unusual;
        continue;
      // bool bool_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string_value = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_string_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.Parameters.string_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes bytes_value = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_bytes_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Parameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.Parameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parameter_name = 1;
  if (this->parameter_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parameter_name().data(), static_cast<int>(this->_internal_parameter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.Parameters.parameter_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parameter_name(), target);
  }

  // double double_value = 2;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // float float_value = 3;
  if (_internal_has_float_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_float_value(), target);
  }

  // int32 int32_value = 4;
  if (_internal_has_int32_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_int32_value(), target);
  }

  // int64 int64_value = 5;
  if (_internal_has_int64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_int64_value(), target);
  }

  // uint32 uint32_value = 6;
  if (_internal_has_uint32_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_uint32_value(), target);
  }

  // uint64 uint64_value = 7;
  if (_internal_has_uint64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_uint64_value(), target);
  }

  // sint32 sint32_value = 8;
  if (_internal_has_sint32_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(8, this->_internal_sint32_value(), target);
  }

  // sint64 sint64_value = 9;
  if (_internal_has_sint64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt64ToArray(9, this->_internal_sint64_value(), target);
  }

  // fixed32 fixed32_value = 10;
  if (_internal_has_fixed32_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed32ToArray(10, this->_internal_fixed32_value(), target);
  }

  // fixed64 fixed64_value = 11;
  if (_internal_has_fixed64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFixed64ToArray(11, this->_internal_fixed64_value(), target);
  }

  // sfixed32 sfixed32_value = 12;
  if (_internal_has_sfixed32_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(12, this->_internal_sfixed32_value(), target);
  }

  // sfixed64 sfixed64_value = 13;
  if (_internal_has_sfixed64_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed64ToArray(13, this->_internal_sfixed64_value(), target);
  }

  // bool bool_value = 14;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(14, this->_internal_bool_value(), target);
  }

  // string string_value = 15;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.Parameters.string_value");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_string_value(), target);
  }

  // bytes bytes_value = 16;
  if (_internal_has_bytes_value()) {
    target = stream->WriteBytesMaybeAliased(
        16, this->_internal_bytes_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.Parameters)
  return target;
}

size_t Parameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.Parameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parameter_name = 1;
  if (this->parameter_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parameter_name());
  }

  switch (parameter_value_case()) {
    // double double_value = 2;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // float float_value = 3;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // int32 int32_value = 4;
    case kInt32Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32_value());
      break;
    }
    // int64 int64_value = 5;
    case kInt64Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_int64_value());
      break;
    }
    // uint32 uint32_value = 6;
    case kUint32Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint32_value());
      break;
    }
    // uint64 uint64_value = 7;
    case kUint64Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
          this->_internal_uint64_value());
      break;
    }
    // sint32 sint32_value = 8;
    case kSint32Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
          this->_internal_sint32_value());
      break;
    }
    // sint64 sint64_value = 9;
    case kSint64Value: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt64Size(
          this->_internal_sint64_value());
      break;
    }
    // fixed32 fixed32_value = 10;
    case kFixed32Value: {
      total_size += 1 + 4;
      break;
    }
    // fixed64 fixed64_value = 11;
    case kFixed64Value: {
      total_size += 1 + 8;
      break;
    }
    // sfixed32 sfixed32_value = 12;
    case kSfixed32Value: {
      total_size += 1 + 4;
      break;
    }
    // sfixed64 sfixed64_value = 13;
    case kSfixed64Value: {
      total_size += 1 + 8;
      break;
    }
    // bool bool_value = 14;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // string string_value = 15;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bytes bytes_value = 16;
    case kBytesValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_value());
      break;
    }
    case PARAMETER_VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Parameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  const Parameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Parameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.Parameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.Parameters)
    MergeFrom(*source);
  }
}

void Parameters::MergeFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.Parameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parameter_name().size() > 0) {

    parameter_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.parameter_name_);
  }
  switch (from.parameter_value_case()) {
    case kDoubleValue: {
      _internal_set_double_value(from._internal_double_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case kInt64Value: {
      _internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kUint32Value: {
      _internal_set_uint32_value(from._internal_uint32_value());
      break;
    }
    case kUint64Value: {
      _internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kSint32Value: {
      _internal_set_sint32_value(from._internal_sint32_value());
      break;
    }
    case kSint64Value: {
      _internal_set_sint64_value(from._internal_sint64_value());
      break;
    }
    case kFixed32Value: {
      _internal_set_fixed32_value(from._internal_fixed32_value());
      break;
    }
    case kFixed64Value: {
      _internal_set_fixed64_value(from._internal_fixed64_value());
      break;
    }
    case kSfixed32Value: {
      _internal_set_sfixed32_value(from._internal_sfixed32_value());
      break;
    }
    case kSfixed64Value: {
      _internal_set_sfixed64_value(from._internal_sfixed64_value());
      break;
    }
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBytesValue: {
      _internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case PARAMETER_VALUE_NOT_SET: {
      break;
    }
  }
}

void Parameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Parameters::CopyFrom(const Parameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.Parameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameters::IsInitialized() const {
  return true;
}

void Parameters::InternalSwap(Parameters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parameter_name_.Swap(&other->parameter_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(parameter_value_, other->parameter_value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Parameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataMembers::InitAsDefaultInstance() {
}
class DataMembers::_Internal {
 public:
};

DataMembers::DataMembers()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:signal_source_definition.DataMembers)
}
DataMembers::DataMembers(const DataMembers& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slug().empty()) {
    slug_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.slug_);
  }
  member_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_member_name().empty()) {
    member_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_name_);
  }
  // @@protoc_insertion_point(copy_constructor:signal_source_definition.DataMembers)
}

void DataMembers::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataMembers_signal_5fsource_5fdefinition_2eproto.base);
  slug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  member_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DataMembers::~DataMembers() {
  // @@protoc_insertion_point(destructor:signal_source_definition.DataMembers)
  SharedDtor();
}

void DataMembers::SharedDtor() {
  slug_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  member_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataMembers::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataMembers& DataMembers::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataMembers_signal_5fsource_5fdefinition_2eproto.base);
  return *internal_default_instance();
}


void DataMembers::Clear() {
// @@protoc_insertion_point(message_clear_start:signal_source_definition.DataMembers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slug_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  member_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* DataMembers::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string slug = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_slug();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.DataMembers.slug"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string member_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_member_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "signal_source_definition.DataMembers.member_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataMembers::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:signal_source_definition.DataMembers)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string slug = 1;
  if (this->slug().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slug().data(), static_cast<int>(this->_internal_slug().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.DataMembers.slug");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_slug(), target);
  }

  // string member_name = 2;
  if (this->member_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_member_name().data(), static_cast<int>(this->_internal_member_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "signal_source_definition.DataMembers.member_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_member_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:signal_source_definition.DataMembers)
  return target;
}

size_t DataMembers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:signal_source_definition.DataMembers)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slug = 1;
  if (this->slug().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slug());
  }

  // string member_name = 2;
  if (this->member_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_member_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataMembers::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:signal_source_definition.DataMembers)
  GOOGLE_DCHECK_NE(&from, this);
  const DataMembers* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataMembers>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:signal_source_definition.DataMembers)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:signal_source_definition.DataMembers)
    MergeFrom(*source);
  }
}

void DataMembers::MergeFrom(const DataMembers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:signal_source_definition.DataMembers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slug().size() > 0) {

    slug_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.slug_);
  }
  if (from.member_name().size() > 0) {

    member_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.member_name_);
  }
}

void DataMembers::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:signal_source_definition.DataMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataMembers::CopyFrom(const DataMembers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:signal_source_definition.DataMembers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataMembers::IsInitialized() const {
  return true;
}

void DataMembers::InternalSwap(DataMembers* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  slug_.Swap(&other->slug_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  member_name_.Swap(&other->member_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DataMembers::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace signal_source_definition
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::signal_source_definition::DefaultSource* Arena::CreateMaybeMessage< ::signal_source_definition::DefaultSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::DefaultSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::CollectdSource* Arena::CreateMaybeMessage< ::signal_source_definition::CollectdSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::CollectdSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::EELSource* Arena::CreateMaybeMessage< ::signal_source_definition::EELSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::EELSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::CanSource* Arena::CreateMaybeMessage< ::signal_source_definition::CanSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::CanSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::LinSource* Arena::CreateMaybeMessage< ::signal_source_definition::LinSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::LinSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::EthernetSource* Arena::CreateMaybeMessage< ::signal_source_definition::EthernetSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::EthernetSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::Scaling* Arena::CreateMaybeMessage< ::signal_source_definition::Scaling >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::Scaling >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::NetworkSource* Arena::CreateMaybeMessage< ::signal_source_definition::NetworkSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::NetworkSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::EventGroup* Arena::CreateMaybeMessage< ::signal_source_definition::EventGroup >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::EventGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::Element* Arena::CreateMaybeMessage< ::signal_source_definition::Element >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::Element >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::SternbildAPI* Arena::CreateMaybeMessage< ::signal_source_definition::SternbildAPI >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::SternbildAPI >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::InternalSource* Arena::CreateMaybeMessage< ::signal_source_definition::InternalSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::InternalSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::ProcessingToolboxSource* Arena::CreateMaybeMessage< ::signal_source_definition::ProcessingToolboxSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::ProcessingToolboxSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::ToolMetadata* Arena::CreateMaybeMessage< ::signal_source_definition::ToolMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::ToolMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::SamplingRate* Arena::CreateMaybeMessage< ::signal_source_definition::SamplingRate >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::SamplingRate >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::ThriftmeSource* Arena::CreateMaybeMessage< ::signal_source_definition::ThriftmeSource >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::ThriftmeSource >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::ThriftmeSourceActive* Arena::CreateMaybeMessage< ::signal_source_definition::ThriftmeSourceActive >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::ThriftmeSourceActive >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::Parameters* Arena::CreateMaybeMessage< ::signal_source_definition::Parameters >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::Parameters >(arena);
}
template<> PROTOBUF_NOINLINE ::signal_source_definition::DataMembers* Arena::CreateMaybeMessage< ::signal_source_definition::DataMembers >(Arena* arena) {
  return Arena::CreateInternal< ::signal_source_definition::DataMembers >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
