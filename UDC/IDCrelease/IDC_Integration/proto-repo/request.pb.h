// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_request_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_2eproto;
namespace Request {
class Collectd;
class CollectdDefaultTypeInternal;
extern CollectdDefaultTypeInternal _Collectd_default_instance_;
class DataCollectionJob;
class DataCollectionJobDefaultTypeInternal;
extern DataCollectionJobDefaultTypeInternal _DataCollectionJob_default_instance_;
class JobConfig;
class JobConfigDefaultTypeInternal;
extern JobConfigDefaultTypeInternal _JobConfig_default_instance_;
class NetworkSignal;
class NetworkSignalDefaultTypeInternal;
extern NetworkSignalDefaultTypeInternal _NetworkSignal_default_instance_;
class TaskInfo;
class TaskInfoDefaultTypeInternal;
extern TaskInfoDefaultTypeInternal _TaskInfo_default_instance_;
}  // namespace Request
PROTOBUF_NAMESPACE_OPEN
template<> ::Request::Collectd* Arena::CreateMaybeMessage<::Request::Collectd>(Arena*);
template<> ::Request::DataCollectionJob* Arena::CreateMaybeMessage<::Request::DataCollectionJob>(Arena*);
template<> ::Request::JobConfig* Arena::CreateMaybeMessage<::Request::JobConfig>(Arena*);
template<> ::Request::NetworkSignal* Arena::CreateMaybeMessage<::Request::NetworkSignal>(Arena*);
template<> ::Request::TaskInfo* Arena::CreateMaybeMessage<::Request::TaskInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Request {

// ===================================================================

class NetworkSignal :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request.NetworkSignal) */ {
 public:
  NetworkSignal();
  virtual ~NetworkSignal();

  NetworkSignal(const NetworkSignal& from);
  NetworkSignal(NetworkSignal&& from) noexcept
    : NetworkSignal() {
    *this = ::std::move(from);
  }

  inline NetworkSignal& operator=(const NetworkSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkSignal& operator=(NetworkSignal&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkSignal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkSignal* internal_default_instance() {
    return reinterpret_cast<const NetworkSignal*>(
               &_NetworkSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NetworkSignal& a, NetworkSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkSignal* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkSignal* New() const final {
    return CreateMaybeMessage<NetworkSignal>(nullptr);
  }

  NetworkSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkSignal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkSignal& from);
  void MergeFrom(const NetworkSignal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkSignal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request.NetworkSignal";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalnameFieldNumber = 3,
    kServiceidFieldNumber = 1,
    kEventidFieldNumber = 2,
  };
  // string signalname = 3;
  void clear_signalname();
  const std::string& signalname() const;
  void set_signalname(const std::string& value);
  void set_signalname(std::string&& value);
  void set_signalname(const char* value);
  void set_signalname(const char* value, size_t size);
  std::string* mutable_signalname();
  std::string* release_signalname();
  void set_allocated_signalname(std::string* signalname);
  private:
  const std::string& _internal_signalname() const;
  void _internal_set_signalname(const std::string& value);
  std::string* _internal_mutable_signalname();
  public:

  // int32 serviceid = 1;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 eventid = 2;
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Request.NetworkSignal)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signalname_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class Collectd :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request.Collectd) */ {
 public:
  Collectd();
  virtual ~Collectd();

  Collectd(const Collectd& from);
  Collectd(Collectd&& from) noexcept
    : Collectd() {
    *this = ::std::move(from);
  }

  inline Collectd& operator=(const Collectd& from) {
    CopyFrom(from);
    return *this;
  }
  inline Collectd& operator=(Collectd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Collectd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Collectd* internal_default_instance() {
    return reinterpret_cast<const Collectd*>(
               &_Collectd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Collectd& a, Collectd& b) {
    a.Swap(&b);
  }
  inline void Swap(Collectd* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Collectd* New() const final {
    return CreateMaybeMessage<Collectd>(nullptr);
  }

  Collectd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Collectd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Collectd& from);
  void MergeFrom(const Collectd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Collectd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request.Collectd";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalnameFieldNumber = 3,
    kServiceidFieldNumber = 1,
    kEventidFieldNumber = 2,
  };
  // string signalname = 3;
  void clear_signalname();
  const std::string& signalname() const;
  void set_signalname(const std::string& value);
  void set_signalname(std::string&& value);
  void set_signalname(const char* value);
  void set_signalname(const char* value, size_t size);
  std::string* mutable_signalname();
  std::string* release_signalname();
  void set_allocated_signalname(std::string* signalname);
  private:
  const std::string& _internal_signalname() const;
  void _internal_set_signalname(const std::string& value);
  std::string* _internal_mutable_signalname();
  public:

  // int32 serviceid = 1;
  void clear_serviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid() const;
  void set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serviceid() const;
  void _internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 eventid = 2;
  void clear_eventid();
  ::PROTOBUF_NAMESPACE_ID::int32 eventid() const;
  void set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_eventid() const;
  void _internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Request.Collectd)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signalname_;
  ::PROTOBUF_NAMESPACE_ID::int32 serviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 eventid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class TaskInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request.TaskInfo) */ {
 public:
  TaskInfo();
  virtual ~TaskInfo();

  TaskInfo(const TaskInfo& from);
  TaskInfo(TaskInfo&& from) noexcept
    : TaskInfo() {
    *this = ::std::move(from);
  }

  inline TaskInfo& operator=(const TaskInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskInfo& operator=(TaskInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TaskInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskInfo* internal_default_instance() {
    return reinterpret_cast<const TaskInfo*>(
               &_TaskInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TaskInfo& a, TaskInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskInfo* New() const final {
    return CreateMaybeMessage<TaskInfo>(nullptr);
  }

  TaskInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TaskInfo& from);
  void MergeFrom(const TaskInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request.TaskInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNetworkFieldNumber = 2,
    kTaskidFieldNumber = 1,
  };
  // repeated .Request.NetworkSignal network = 2;
  int network_size() const;
  private:
  int _internal_network_size() const;
  public:
  void clear_network();
  ::Request::NetworkSignal* mutable_network(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::NetworkSignal >*
      mutable_network();
  private:
  const ::Request::NetworkSignal& _internal_network(int index) const;
  ::Request::NetworkSignal* _internal_add_network();
  public:
  const ::Request::NetworkSignal& network(int index) const;
  ::Request::NetworkSignal* add_network();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::NetworkSignal >&
      network() const;

  // int32 taskid = 1;
  void clear_taskid();
  ::PROTOBUF_NAMESPACE_ID::int32 taskid() const;
  void set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_taskid() const;
  void _internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Request.TaskInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::NetworkSignal > network_;
  ::PROTOBUF_NAMESPACE_ID::int32 taskid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class JobConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request.JobConfig) */ {
 public:
  JobConfig();
  virtual ~JobConfig();

  JobConfig(const JobConfig& from);
  JobConfig(JobConfig&& from) noexcept
    : JobConfig() {
    *this = ::std::move(from);
  }

  inline JobConfig& operator=(const JobConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobConfig& operator=(JobConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobConfig* internal_default_instance() {
    return reinterpret_cast<const JobConfig*>(
               &_JobConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JobConfig& a, JobConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(JobConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobConfig* New() const final {
    return CreateMaybeMessage<JobConfig>(nullptr);
  }

  JobConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobConfig& from);
  void MergeFrom(const JobConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request.JobConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobUuidFieldNumber = 1,
    kTasksFieldNumber = 3,
    kPriorityFieldNumber = 2,
  };
  // string job_uuid = 1;
  void clear_job_uuid();
  const std::string& job_uuid() const;
  void set_job_uuid(const std::string& value);
  void set_job_uuid(std::string&& value);
  void set_job_uuid(const char* value);
  void set_job_uuid(const char* value, size_t size);
  std::string* mutable_job_uuid();
  std::string* release_job_uuid();
  void set_allocated_job_uuid(std::string* job_uuid);
  private:
  const std::string& _internal_job_uuid() const;
  void _internal_set_job_uuid(const std::string& value);
  std::string* _internal_mutable_job_uuid();
  public:

  // .Request.TaskInfo tasks = 3;
  bool has_tasks() const;
  private:
  bool _internal_has_tasks() const;
  public:
  void clear_tasks();
  const ::Request::TaskInfo& tasks() const;
  ::Request::TaskInfo* release_tasks();
  ::Request::TaskInfo* mutable_tasks();
  void set_allocated_tasks(::Request::TaskInfo* tasks);
  private:
  const ::Request::TaskInfo& _internal_tasks() const;
  ::Request::TaskInfo* _internal_mutable_tasks();
  public:

  // int32 priority = 2;
  void clear_priority();
  ::PROTOBUF_NAMESPACE_ID::int32 priority() const;
  void set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_priority() const;
  void _internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Request.JobConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_uuid_;
  ::Request::TaskInfo* tasks_;
  ::PROTOBUF_NAMESPACE_ID::int32 priority_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// -------------------------------------------------------------------

class DataCollectionJob :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Request.DataCollectionJob) */ {
 public:
  DataCollectionJob();
  virtual ~DataCollectionJob();

  DataCollectionJob(const DataCollectionJob& from);
  DataCollectionJob(DataCollectionJob&& from) noexcept
    : DataCollectionJob() {
    *this = ::std::move(from);
  }

  inline DataCollectionJob& operator=(const DataCollectionJob& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataCollectionJob& operator=(DataCollectionJob&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataCollectionJob& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataCollectionJob* internal_default_instance() {
    return reinterpret_cast<const DataCollectionJob*>(
               &_DataCollectionJob_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DataCollectionJob& a, DataCollectionJob& b) {
    a.Swap(&b);
  }
  inline void Swap(DataCollectionJob* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataCollectionJob* New() const final {
    return CreateMaybeMessage<DataCollectionJob>(nullptr);
  }

  DataCollectionJob* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataCollectionJob>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataCollectionJob& from);
  void MergeFrom(const DataCollectionJob& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataCollectionJob* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Request.DataCollectionJob";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_request_2eproto);
    return ::descriptor_table_request_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobconfigFieldNumber = 1,
  };
  // repeated .Request.JobConfig jobconfig = 1;
  int jobconfig_size() const;
  private:
  int _internal_jobconfig_size() const;
  public:
  void clear_jobconfig();
  ::Request::JobConfig* mutable_jobconfig(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::JobConfig >*
      mutable_jobconfig();
  private:
  const ::Request::JobConfig& _internal_jobconfig(int index) const;
  ::Request::JobConfig* _internal_add_jobconfig();
  public:
  const ::Request::JobConfig& jobconfig(int index) const;
  ::Request::JobConfig* add_jobconfig();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::JobConfig >&
      jobconfig() const;

  // @@protoc_insertion_point(class_scope:Request.DataCollectionJob)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::JobConfig > jobconfig_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NetworkSignal

// int32 serviceid = 1;
inline void NetworkSignal::clear_serviceid() {
  serviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSignal::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSignal::serviceid() const {
  // @@protoc_insertion_point(field_get:Request.NetworkSignal.serviceid)
  return _internal_serviceid();
}
inline void NetworkSignal::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceid_ = value;
}
inline void NetworkSignal::set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:Request.NetworkSignal.serviceid)
}

// int32 eventid = 2;
inline void NetworkSignal::clear_eventid() {
  eventid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSignal::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NetworkSignal::eventid() const {
  // @@protoc_insertion_point(field_get:Request.NetworkSignal.eventid)
  return _internal_eventid();
}
inline void NetworkSignal::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventid_ = value;
}
inline void NetworkSignal::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:Request.NetworkSignal.eventid)
}

// string signalname = 3;
inline void NetworkSignal::clear_signalname() {
  signalname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkSignal::signalname() const {
  // @@protoc_insertion_point(field_get:Request.NetworkSignal.signalname)
  return _internal_signalname();
}
inline void NetworkSignal::set_signalname(const std::string& value) {
  _internal_set_signalname(value);
  // @@protoc_insertion_point(field_set:Request.NetworkSignal.signalname)
}
inline std::string* NetworkSignal::mutable_signalname() {
  // @@protoc_insertion_point(field_mutable:Request.NetworkSignal.signalname)
  return _internal_mutable_signalname();
}
inline const std::string& NetworkSignal::_internal_signalname() const {
  return signalname_.GetNoArena();
}
inline void NetworkSignal::_internal_set_signalname(const std::string& value) {
  
  signalname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkSignal::set_signalname(std::string&& value) {
  
  signalname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Request.NetworkSignal.signalname)
}
inline void NetworkSignal::set_signalname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signalname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.NetworkSignal.signalname)
}
inline void NetworkSignal::set_signalname(const char* value, size_t size) {
  
  signalname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.NetworkSignal.signalname)
}
inline std::string* NetworkSignal::_internal_mutable_signalname() {
  
  return signalname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkSignal::release_signalname() {
  // @@protoc_insertion_point(field_release:Request.NetworkSignal.signalname)
  
  return signalname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSignal::set_allocated_signalname(std::string* signalname) {
  if (signalname != nullptr) {
    
  } else {
    
  }
  signalname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signalname);
  // @@protoc_insertion_point(field_set_allocated:Request.NetworkSignal.signalname)
}

// -------------------------------------------------------------------

// Collectd

// int32 serviceid = 1;
inline void Collectd::clear_serviceid() {
  serviceid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Collectd::_internal_serviceid() const {
  return serviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Collectd::serviceid() const {
  // @@protoc_insertion_point(field_get:Request.Collectd.serviceid)
  return _internal_serviceid();
}
inline void Collectd::_internal_set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serviceid_ = value;
}
inline void Collectd::set_serviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serviceid(value);
  // @@protoc_insertion_point(field_set:Request.Collectd.serviceid)
}

// int32 eventid = 2;
inline void Collectd::clear_eventid() {
  eventid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Collectd::_internal_eventid() const {
  return eventid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Collectd::eventid() const {
  // @@protoc_insertion_point(field_get:Request.Collectd.eventid)
  return _internal_eventid();
}
inline void Collectd::_internal_set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  eventid_ = value;
}
inline void Collectd::set_eventid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_eventid(value);
  // @@protoc_insertion_point(field_set:Request.Collectd.eventid)
}

// string signalname = 3;
inline void Collectd::clear_signalname() {
  signalname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Collectd::signalname() const {
  // @@protoc_insertion_point(field_get:Request.Collectd.signalname)
  return _internal_signalname();
}
inline void Collectd::set_signalname(const std::string& value) {
  _internal_set_signalname(value);
  // @@protoc_insertion_point(field_set:Request.Collectd.signalname)
}
inline std::string* Collectd::mutable_signalname() {
  // @@protoc_insertion_point(field_mutable:Request.Collectd.signalname)
  return _internal_mutable_signalname();
}
inline const std::string& Collectd::_internal_signalname() const {
  return signalname_.GetNoArena();
}
inline void Collectd::_internal_set_signalname(const std::string& value) {
  
  signalname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Collectd::set_signalname(std::string&& value) {
  
  signalname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Request.Collectd.signalname)
}
inline void Collectd::set_signalname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signalname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.Collectd.signalname)
}
inline void Collectd::set_signalname(const char* value, size_t size) {
  
  signalname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.Collectd.signalname)
}
inline std::string* Collectd::_internal_mutable_signalname() {
  
  return signalname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Collectd::release_signalname() {
  // @@protoc_insertion_point(field_release:Request.Collectd.signalname)
  
  return signalname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Collectd::set_allocated_signalname(std::string* signalname) {
  if (signalname != nullptr) {
    
  } else {
    
  }
  signalname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signalname);
  // @@protoc_insertion_point(field_set_allocated:Request.Collectd.signalname)
}

// -------------------------------------------------------------------

// TaskInfo

// int32 taskid = 1;
inline void TaskInfo::clear_taskid() {
  taskid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::_internal_taskid() const {
  return taskid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TaskInfo::taskid() const {
  // @@protoc_insertion_point(field_get:Request.TaskInfo.taskid)
  return _internal_taskid();
}
inline void TaskInfo::_internal_set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  taskid_ = value;
}
inline void TaskInfo::set_taskid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_taskid(value);
  // @@protoc_insertion_point(field_set:Request.TaskInfo.taskid)
}

// repeated .Request.NetworkSignal network = 2;
inline int TaskInfo::_internal_network_size() const {
  return network_.size();
}
inline int TaskInfo::network_size() const {
  return _internal_network_size();
}
inline void TaskInfo::clear_network() {
  network_.Clear();
}
inline ::Request::NetworkSignal* TaskInfo::mutable_network(int index) {
  // @@protoc_insertion_point(field_mutable:Request.TaskInfo.network)
  return network_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::NetworkSignal >*
TaskInfo::mutable_network() {
  // @@protoc_insertion_point(field_mutable_list:Request.TaskInfo.network)
  return &network_;
}
inline const ::Request::NetworkSignal& TaskInfo::_internal_network(int index) const {
  return network_.Get(index);
}
inline const ::Request::NetworkSignal& TaskInfo::network(int index) const {
  // @@protoc_insertion_point(field_get:Request.TaskInfo.network)
  return _internal_network(index);
}
inline ::Request::NetworkSignal* TaskInfo::_internal_add_network() {
  return network_.Add();
}
inline ::Request::NetworkSignal* TaskInfo::add_network() {
  // @@protoc_insertion_point(field_add:Request.TaskInfo.network)
  return _internal_add_network();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::NetworkSignal >&
TaskInfo::network() const {
  // @@protoc_insertion_point(field_list:Request.TaskInfo.network)
  return network_;
}

// -------------------------------------------------------------------

// JobConfig

// string job_uuid = 1;
inline void JobConfig::clear_job_uuid() {
  job_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JobConfig::job_uuid() const {
  // @@protoc_insertion_point(field_get:Request.JobConfig.job_uuid)
  return _internal_job_uuid();
}
inline void JobConfig::set_job_uuid(const std::string& value) {
  _internal_set_job_uuid(value);
  // @@protoc_insertion_point(field_set:Request.JobConfig.job_uuid)
}
inline std::string* JobConfig::mutable_job_uuid() {
  // @@protoc_insertion_point(field_mutable:Request.JobConfig.job_uuid)
  return _internal_mutable_job_uuid();
}
inline const std::string& JobConfig::_internal_job_uuid() const {
  return job_uuid_.GetNoArena();
}
inline void JobConfig::_internal_set_job_uuid(const std::string& value) {
  
  job_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JobConfig::set_job_uuid(std::string&& value) {
  
  job_uuid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Request.JobConfig.job_uuid)
}
inline void JobConfig::set_job_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Request.JobConfig.job_uuid)
}
inline void JobConfig::set_job_uuid(const char* value, size_t size) {
  
  job_uuid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Request.JobConfig.job_uuid)
}
inline std::string* JobConfig::_internal_mutable_job_uuid() {
  
  return job_uuid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JobConfig::release_job_uuid() {
  // @@protoc_insertion_point(field_release:Request.JobConfig.job_uuid)
  
  return job_uuid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JobConfig::set_allocated_job_uuid(std::string* job_uuid) {
  if (job_uuid != nullptr) {
    
  } else {
    
  }
  job_uuid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_uuid);
  // @@protoc_insertion_point(field_set_allocated:Request.JobConfig.job_uuid)
}

// int32 priority = 2;
inline void JobConfig::clear_priority() {
  priority_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobConfig::_internal_priority() const {
  return priority_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobConfig::priority() const {
  // @@protoc_insertion_point(field_get:Request.JobConfig.priority)
  return _internal_priority();
}
inline void JobConfig::_internal_set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  priority_ = value;
}
inline void JobConfig::set_priority(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:Request.JobConfig.priority)
}

// .Request.TaskInfo tasks = 3;
inline bool JobConfig::_internal_has_tasks() const {
  return this != internal_default_instance() && tasks_ != nullptr;
}
inline bool JobConfig::has_tasks() const {
  return _internal_has_tasks();
}
inline void JobConfig::clear_tasks() {
  if (GetArenaNoVirtual() == nullptr && tasks_ != nullptr) {
    delete tasks_;
  }
  tasks_ = nullptr;
}
inline const ::Request::TaskInfo& JobConfig::_internal_tasks() const {
  const ::Request::TaskInfo* p = tasks_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Request::TaskInfo*>(
      &::Request::_TaskInfo_default_instance_);
}
inline const ::Request::TaskInfo& JobConfig::tasks() const {
  // @@protoc_insertion_point(field_get:Request.JobConfig.tasks)
  return _internal_tasks();
}
inline ::Request::TaskInfo* JobConfig::release_tasks() {
  // @@protoc_insertion_point(field_release:Request.JobConfig.tasks)
  
  ::Request::TaskInfo* temp = tasks_;
  tasks_ = nullptr;
  return temp;
}
inline ::Request::TaskInfo* JobConfig::_internal_mutable_tasks() {
  
  if (tasks_ == nullptr) {
    auto* p = CreateMaybeMessage<::Request::TaskInfo>(GetArenaNoVirtual());
    tasks_ = p;
  }
  return tasks_;
}
inline ::Request::TaskInfo* JobConfig::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable:Request.JobConfig.tasks)
  return _internal_mutable_tasks();
}
inline void JobConfig::set_allocated_tasks(::Request::TaskInfo* tasks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete tasks_;
  }
  if (tasks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      tasks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tasks, submessage_arena);
    }
    
  } else {
    
  }
  tasks_ = tasks;
  // @@protoc_insertion_point(field_set_allocated:Request.JobConfig.tasks)
}

// -------------------------------------------------------------------

// DataCollectionJob

// repeated .Request.JobConfig jobconfig = 1;
inline int DataCollectionJob::_internal_jobconfig_size() const {
  return jobconfig_.size();
}
inline int DataCollectionJob::jobconfig_size() const {
  return _internal_jobconfig_size();
}
inline void DataCollectionJob::clear_jobconfig() {
  jobconfig_.Clear();
}
inline ::Request::JobConfig* DataCollectionJob::mutable_jobconfig(int index) {
  // @@protoc_insertion_point(field_mutable:Request.DataCollectionJob.jobconfig)
  return jobconfig_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::JobConfig >*
DataCollectionJob::mutable_jobconfig() {
  // @@protoc_insertion_point(field_mutable_list:Request.DataCollectionJob.jobconfig)
  return &jobconfig_;
}
inline const ::Request::JobConfig& DataCollectionJob::_internal_jobconfig(int index) const {
  return jobconfig_.Get(index);
}
inline const ::Request::JobConfig& DataCollectionJob::jobconfig(int index) const {
  // @@protoc_insertion_point(field_get:Request.DataCollectionJob.jobconfig)
  return _internal_jobconfig(index);
}
inline ::Request::JobConfig* DataCollectionJob::_internal_add_jobconfig() {
  return jobconfig_.Add();
}
inline ::Request::JobConfig* DataCollectionJob::add_jobconfig() {
  // @@protoc_insertion_point(field_add:Request.DataCollectionJob.jobconfig)
  return _internal_add_jobconfig();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Request::JobConfig >&
DataCollectionJob::jobconfig() const {
  // @@protoc_insertion_point(field_list:Request.DataCollectionJob.jobconfig)
  return jobconfig_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Request

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_request_2eproto
