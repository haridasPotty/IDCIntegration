// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: static_config_udc_civic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_static_5fconfig_5fudc_5fcivic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_static_5fconfig_5fudc_5fcivic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_static_5fconfig_5fudc_5fcivic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_static_5fconfig_5fudc_5fcivic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto;
namespace static_config_udc_civic {
class CollectdConfig;
class CollectdConfigDefaultTypeInternal;
extern CollectdConfigDefaultTypeInternal _CollectdConfig_default_instance_;
class CompressionTool;
class CompressionToolDefaultTypeInternal;
extern CompressionToolDefaultTypeInternal _CompressionTool_default_instance_;
class DataSourceConfig;
class DataSourceConfigDefaultTypeInternal;
extern DataSourceConfigDefaultTypeInternal _DataSourceConfig_default_instance_;
class DefaultToolSettings;
class DefaultToolSettingsDefaultTypeInternal;
extern DefaultToolSettingsDefaultTypeInternal _DefaultToolSettings_default_instance_;
class EncryptionTool;
class EncryptionToolDefaultTypeInternal;
extern EncryptionToolDefaultTypeInternal _EncryptionTool_default_instance_;
class EndPointParameters;
class EndPointParametersDefaultTypeInternal;
extern EndPointParametersDefaultTypeInternal _EndPointParameters_default_instance_;
class GeoHashTool;
class GeoHashToolDefaultTypeInternal;
extern GeoHashToolDefaultTypeInternal _GeoHashTool_default_instance_;
class StaticConfig;
class StaticConfigDefaultTypeInternal;
extern StaticConfigDefaultTypeInternal _StaticConfig_default_instance_;
}  // namespace static_config_udc_civic
PROTOBUF_NAMESPACE_OPEN
template<> ::static_config_udc_civic::CollectdConfig* Arena::CreateMaybeMessage<::static_config_udc_civic::CollectdConfig>(Arena*);
template<> ::static_config_udc_civic::CompressionTool* Arena::CreateMaybeMessage<::static_config_udc_civic::CompressionTool>(Arena*);
template<> ::static_config_udc_civic::DataSourceConfig* Arena::CreateMaybeMessage<::static_config_udc_civic::DataSourceConfig>(Arena*);
template<> ::static_config_udc_civic::DefaultToolSettings* Arena::CreateMaybeMessage<::static_config_udc_civic::DefaultToolSettings>(Arena*);
template<> ::static_config_udc_civic::EncryptionTool* Arena::CreateMaybeMessage<::static_config_udc_civic::EncryptionTool>(Arena*);
template<> ::static_config_udc_civic::EndPointParameters* Arena::CreateMaybeMessage<::static_config_udc_civic::EndPointParameters>(Arena*);
template<> ::static_config_udc_civic::GeoHashTool* Arena::CreateMaybeMessage<::static_config_udc_civic::GeoHashTool>(Arena*);
template<> ::static_config_udc_civic::StaticConfig* Arena::CreateMaybeMessage<::static_config_udc_civic::StaticConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace static_config_udc_civic {

enum EndPointParameters_End_Point : int {
  EndPointParameters_End_Point_JOB_STATUS = 0,
  EndPointParameters_End_Point_GEO_HASH = 1,
  EndPointParameters_End_Point_SEND_UPLINK_PERSONAL = 2,
  EndPointParameters_End_Point_SEND_UPLINK_CROWD = 3,
  EndPointParameters_End_Point_EndPointParameters_End_Point_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EndPointParameters_End_Point_EndPointParameters_End_Point_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EndPointParameters_End_Point_IsValid(int value);
constexpr EndPointParameters_End_Point EndPointParameters_End_Point_End_Point_MIN = EndPointParameters_End_Point_JOB_STATUS;
constexpr EndPointParameters_End_Point EndPointParameters_End_Point_End_Point_MAX = EndPointParameters_End_Point_SEND_UPLINK_CROWD;
constexpr int EndPointParameters_End_Point_End_Point_ARRAYSIZE = EndPointParameters_End_Point_End_Point_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EndPointParameters_End_Point_descriptor();
template<typename T>
inline const std::string& EndPointParameters_End_Point_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EndPointParameters_End_Point>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EndPointParameters_End_Point_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EndPointParameters_End_Point_descriptor(), enum_t_value);
}
inline bool EndPointParameters_End_Point_Parse(
    const std::string& name, EndPointParameters_End_Point* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EndPointParameters_End_Point>(
    EndPointParameters_End_Point_descriptor(), name, value);
}
enum CompressionTool_Type : int {
  CompressionTool_Type_GZIP = 0,
  CompressionTool_Type_CompressionTool_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompressionTool_Type_CompressionTool_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompressionTool_Type_IsValid(int value);
constexpr CompressionTool_Type CompressionTool_Type_Type_MIN = CompressionTool_Type_GZIP;
constexpr CompressionTool_Type CompressionTool_Type_Type_MAX = CompressionTool_Type_GZIP;
constexpr int CompressionTool_Type_Type_ARRAYSIZE = CompressionTool_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionTool_Type_descriptor();
template<typename T>
inline const std::string& CompressionTool_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompressionTool_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompressionTool_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompressionTool_Type_descriptor(), enum_t_value);
}
inline bool CompressionTool_Type_Parse(
    const std::string& name, CompressionTool_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompressionTool_Type>(
    CompressionTool_Type_descriptor(), name, value);
}
enum EncryptionTool_Type : int {
  EncryptionTool_Type_AES = 0,
  EncryptionTool_Type_RSA = 1,
  EncryptionTool_Type_EncryptionTool_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EncryptionTool_Type_EncryptionTool_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EncryptionTool_Type_IsValid(int value);
constexpr EncryptionTool_Type EncryptionTool_Type_Type_MIN = EncryptionTool_Type_AES;
constexpr EncryptionTool_Type EncryptionTool_Type_Type_MAX = EncryptionTool_Type_RSA;
constexpr int EncryptionTool_Type_Type_ARRAYSIZE = EncryptionTool_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionTool_Type_descriptor();
template<typename T>
inline const std::string& EncryptionTool_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EncryptionTool_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EncryptionTool_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EncryptionTool_Type_descriptor(), enum_t_value);
}
inline bool EncryptionTool_Type_Parse(
    const std::string& name, EncryptionTool_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EncryptionTool_Type>(
    EncryptionTool_Type_descriptor(), name, value);
}
enum GeoHashTool_Type : int {
  GeoHashTool_Type_LEVEL1 = 0,
  GeoHashTool_Type_LEVEL2 = 1,
  GeoHashTool_Type_GeoHashTool_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GeoHashTool_Type_GeoHashTool_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GeoHashTool_Type_IsValid(int value);
constexpr GeoHashTool_Type GeoHashTool_Type_Type_MIN = GeoHashTool_Type_LEVEL1;
constexpr GeoHashTool_Type GeoHashTool_Type_Type_MAX = GeoHashTool_Type_LEVEL2;
constexpr int GeoHashTool_Type_Type_ARRAYSIZE = GeoHashTool_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoHashTool_Type_descriptor();
template<typename T>
inline const std::string& GeoHashTool_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GeoHashTool_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GeoHashTool_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GeoHashTool_Type_descriptor(), enum_t_value);
}
inline bool GeoHashTool_Type_Parse(
    const std::string& name, GeoHashTool_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GeoHashTool_Type>(
    GeoHashTool_Type_descriptor(), name, value);
}
// ===================================================================

class StaticConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:static_config_udc_civic.StaticConfig) */ {
 public:
  StaticConfig();
  virtual ~StaticConfig();

  StaticConfig(const StaticConfig& from);
  StaticConfig(StaticConfig&& from) noexcept
    : StaticConfig() {
    *this = ::std::move(from);
  }

  inline StaticConfig& operator=(const StaticConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticConfig& operator=(StaticConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StaticConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticConfig* internal_default_instance() {
    return reinterpret_cast<const StaticConfig*>(
               &_StaticConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StaticConfig& a, StaticConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StaticConfig* New() const final {
    return CreateMaybeMessage<StaticConfig>(nullptr);
  }

  StaticConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StaticConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StaticConfig& from);
  void MergeFrom(const StaticConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "static_config_udc_civic.StaticConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
    return ::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndPointParametersFieldNumber = 2,
    kDataSourceConfigsFieldNumber = 5,
    kDefaultToolboxSettingsFieldNumber = 1,
    kMaxInactiveTimeForTimeBoundJobsFieldNumber = 3,
    kMaxInactiveDistanceForGeoBoundJobsFieldNumber = 4,
  };
  // repeated .static_config_udc_civic.EndPointParameters end_point_parameters = 2;
  int end_point_parameters_size() const;
  private:
  int _internal_end_point_parameters_size() const;
  public:
  void clear_end_point_parameters();
  ::static_config_udc_civic::EndPointParameters* mutable_end_point_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EndPointParameters >*
      mutable_end_point_parameters();
  private:
  const ::static_config_udc_civic::EndPointParameters& _internal_end_point_parameters(int index) const;
  ::static_config_udc_civic::EndPointParameters* _internal_add_end_point_parameters();
  public:
  const ::static_config_udc_civic::EndPointParameters& end_point_parameters(int index) const;
  ::static_config_udc_civic::EndPointParameters* add_end_point_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EndPointParameters >&
      end_point_parameters() const;

  // repeated .static_config_udc_civic.DataSourceConfig data_source_configs = 5;
  int data_source_configs_size() const;
  private:
  int _internal_data_source_configs_size() const;
  public:
  void clear_data_source_configs();
  ::static_config_udc_civic::DataSourceConfig* mutable_data_source_configs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::DataSourceConfig >*
      mutable_data_source_configs();
  private:
  const ::static_config_udc_civic::DataSourceConfig& _internal_data_source_configs(int index) const;
  ::static_config_udc_civic::DataSourceConfig* _internal_add_data_source_configs();
  public:
  const ::static_config_udc_civic::DataSourceConfig& data_source_configs(int index) const;
  ::static_config_udc_civic::DataSourceConfig* add_data_source_configs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::DataSourceConfig >&
      data_source_configs() const;

  // .static_config_udc_civic.DefaultToolSettings default_toolbox_settings = 1;
  bool has_default_toolbox_settings() const;
  private:
  bool _internal_has_default_toolbox_settings() const;
  public:
  void clear_default_toolbox_settings();
  const ::static_config_udc_civic::DefaultToolSettings& default_toolbox_settings() const;
  ::static_config_udc_civic::DefaultToolSettings* release_default_toolbox_settings();
  ::static_config_udc_civic::DefaultToolSettings* mutable_default_toolbox_settings();
  void set_allocated_default_toolbox_settings(::static_config_udc_civic::DefaultToolSettings* default_toolbox_settings);
  private:
  const ::static_config_udc_civic::DefaultToolSettings& _internal_default_toolbox_settings() const;
  ::static_config_udc_civic::DefaultToolSettings* _internal_mutable_default_toolbox_settings();
  public:

  // int32 max_inactive_time_for_time_bound_jobs = 3;
  void clear_max_inactive_time_for_time_bound_jobs();
  ::PROTOBUF_NAMESPACE_ID::int32 max_inactive_time_for_time_bound_jobs() const;
  void set_max_inactive_time_for_time_bound_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_inactive_time_for_time_bound_jobs() const;
  void _internal_set_max_inactive_time_for_time_bound_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 max_inactive_distance_for_geo_bound_jobs = 4;
  void clear_max_inactive_distance_for_geo_bound_jobs();
  ::PROTOBUF_NAMESPACE_ID::int32 max_inactive_distance_for_geo_bound_jobs() const;
  void set_max_inactive_distance_for_geo_bound_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_inactive_distance_for_geo_bound_jobs() const;
  void _internal_set_max_inactive_distance_for_geo_bound_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:static_config_udc_civic.StaticConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EndPointParameters > end_point_parameters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::DataSourceConfig > data_source_configs_;
  ::static_config_udc_civic::DefaultToolSettings* default_toolbox_settings_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_inactive_time_for_time_bound_jobs_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_inactive_distance_for_geo_bound_jobs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_static_5fconfig_5fudc_5fcivic_2eproto;
};
// -------------------------------------------------------------------

class EndPointParameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:static_config_udc_civic.EndPointParameters) */ {
 public:
  EndPointParameters();
  virtual ~EndPointParameters();

  EndPointParameters(const EndPointParameters& from);
  EndPointParameters(EndPointParameters&& from) noexcept
    : EndPointParameters() {
    *this = ::std::move(from);
  }

  inline EndPointParameters& operator=(const EndPointParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline EndPointParameters& operator=(EndPointParameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EndPointParameters& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndPointParameters* internal_default_instance() {
    return reinterpret_cast<const EndPointParameters*>(
               &_EndPointParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EndPointParameters& a, EndPointParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(EndPointParameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EndPointParameters* New() const final {
    return CreateMaybeMessage<EndPointParameters>(nullptr);
  }

  EndPointParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EndPointParameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EndPointParameters& from);
  void MergeFrom(const EndPointParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndPointParameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "static_config_udc_civic.EndPointParameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
    return ::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EndPointParameters_End_Point End_Point;
  static constexpr End_Point JOB_STATUS =
    EndPointParameters_End_Point_JOB_STATUS;
  static constexpr End_Point GEO_HASH =
    EndPointParameters_End_Point_GEO_HASH;
  static constexpr End_Point SEND_UPLINK_PERSONAL =
    EndPointParameters_End_Point_SEND_UPLINK_PERSONAL;
  static constexpr End_Point SEND_UPLINK_CROWD =
    EndPointParameters_End_Point_SEND_UPLINK_CROWD;
  static inline bool End_Point_IsValid(int value) {
    return EndPointParameters_End_Point_IsValid(value);
  }
  static constexpr End_Point End_Point_MIN =
    EndPointParameters_End_Point_End_Point_MIN;
  static constexpr End_Point End_Point_MAX =
    EndPointParameters_End_Point_End_Point_MAX;
  static constexpr int End_Point_ARRAYSIZE =
    EndPointParameters_End_Point_End_Point_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  End_Point_descriptor() {
    return EndPointParameters_End_Point_descriptor();
  }
  template<typename T>
  static inline const std::string& End_Point_Name(T enum_t_value) {
    static_assert(::std::is_same<T, End_Point>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function End_Point_Name.");
    return EndPointParameters_End_Point_Name(enum_t_value);
  }
  static inline bool End_Point_Parse(const std::string& name,
      End_Point* value) {
    return EndPointParameters_End_Point_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kEndPointFieldNumber = 1,
    kInitialTimeoutFieldNumber = 3,
    kTimeoutFactorFieldNumber = 4,
    kMaxTimeoutIntervalFieldNumber = 5,
    kMaxNoOfRetriesFieldNumber = 6,
  };
  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // .static_config_udc_civic.EndPointParameters.End_Point end_point = 1;
  void clear_end_point();
  ::static_config_udc_civic::EndPointParameters_End_Point end_point() const;
  void set_end_point(::static_config_udc_civic::EndPointParameters_End_Point value);
  private:
  ::static_config_udc_civic::EndPointParameters_End_Point _internal_end_point() const;
  void _internal_set_end_point(::static_config_udc_civic::EndPointParameters_End_Point value);
  public:

  // uint32 initial_timeout = 3;
  void clear_initial_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_timeout() const;
  void set_initial_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_initial_timeout() const;
  void _internal_set_initial_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double timeout_factor = 4;
  void clear_timeout_factor();
  double timeout_factor() const;
  void set_timeout_factor(double value);
  private:
  double _internal_timeout_factor() const;
  void _internal_set_timeout_factor(double value);
  public:

  // uint32 max_timeout_interval = 5;
  void clear_max_timeout_interval();
  ::PROTOBUF_NAMESPACE_ID::uint32 max_timeout_interval() const;
  void set_max_timeout_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_max_timeout_interval() const;
  void _internal_set_max_timeout_interval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 max_no_of_retries = 6;
  void clear_max_no_of_retries();
  ::PROTOBUF_NAMESPACE_ID::int32 max_no_of_retries() const;
  void set_max_no_of_retries(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_no_of_retries() const;
  void _internal_set_max_no_of_retries(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:static_config_udc_civic.EndPointParameters)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  int end_point_;
  ::PROTOBUF_NAMESPACE_ID::uint32 initial_timeout_;
  double timeout_factor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 max_timeout_interval_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_no_of_retries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_static_5fconfig_5fudc_5fcivic_2eproto;
};
// -------------------------------------------------------------------

class DefaultToolSettings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:static_config_udc_civic.DefaultToolSettings) */ {
 public:
  DefaultToolSettings();
  virtual ~DefaultToolSettings();

  DefaultToolSettings(const DefaultToolSettings& from);
  DefaultToolSettings(DefaultToolSettings&& from) noexcept
    : DefaultToolSettings() {
    *this = ::std::move(from);
  }

  inline DefaultToolSettings& operator=(const DefaultToolSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultToolSettings& operator=(DefaultToolSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefaultToolSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefaultToolSettings* internal_default_instance() {
    return reinterpret_cast<const DefaultToolSettings*>(
               &_DefaultToolSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DefaultToolSettings& a, DefaultToolSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultToolSettings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefaultToolSettings* New() const final {
    return CreateMaybeMessage<DefaultToolSettings>(nullptr);
  }

  DefaultToolSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefaultToolSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefaultToolSettings& from);
  void MergeFrom(const DefaultToolSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultToolSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "static_config_udc_civic.DefaultToolSettings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
    return ::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompressionToolFieldNumber = 1,
    kEncryptionToolFieldNumber = 2,
    kGeoHashToolFieldNumber = 3,
  };
  // repeated .static_config_udc_civic.CompressionTool compression_tool = 1;
  int compression_tool_size() const;
  private:
  int _internal_compression_tool_size() const;
  public:
  void clear_compression_tool();
  ::static_config_udc_civic::CompressionTool* mutable_compression_tool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::CompressionTool >*
      mutable_compression_tool();
  private:
  const ::static_config_udc_civic::CompressionTool& _internal_compression_tool(int index) const;
  ::static_config_udc_civic::CompressionTool* _internal_add_compression_tool();
  public:
  const ::static_config_udc_civic::CompressionTool& compression_tool(int index) const;
  ::static_config_udc_civic::CompressionTool* add_compression_tool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::CompressionTool >&
      compression_tool() const;

  // repeated .static_config_udc_civic.EncryptionTool encryption_tool = 2;
  int encryption_tool_size() const;
  private:
  int _internal_encryption_tool_size() const;
  public:
  void clear_encryption_tool();
  ::static_config_udc_civic::EncryptionTool* mutable_encryption_tool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EncryptionTool >*
      mutable_encryption_tool();
  private:
  const ::static_config_udc_civic::EncryptionTool& _internal_encryption_tool(int index) const;
  ::static_config_udc_civic::EncryptionTool* _internal_add_encryption_tool();
  public:
  const ::static_config_udc_civic::EncryptionTool& encryption_tool(int index) const;
  ::static_config_udc_civic::EncryptionTool* add_encryption_tool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EncryptionTool >&
      encryption_tool() const;

  // repeated .static_config_udc_civic.GeoHashTool geo_hash_tool = 3;
  int geo_hash_tool_size() const;
  private:
  int _internal_geo_hash_tool_size() const;
  public:
  void clear_geo_hash_tool();
  ::static_config_udc_civic::GeoHashTool* mutable_geo_hash_tool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::GeoHashTool >*
      mutable_geo_hash_tool();
  private:
  const ::static_config_udc_civic::GeoHashTool& _internal_geo_hash_tool(int index) const;
  ::static_config_udc_civic::GeoHashTool* _internal_add_geo_hash_tool();
  public:
  const ::static_config_udc_civic::GeoHashTool& geo_hash_tool(int index) const;
  ::static_config_udc_civic::GeoHashTool* add_geo_hash_tool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::GeoHashTool >&
      geo_hash_tool() const;

  // @@protoc_insertion_point(class_scope:static_config_udc_civic.DefaultToolSettings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::CompressionTool > compression_tool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EncryptionTool > encryption_tool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::GeoHashTool > geo_hash_tool_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_static_5fconfig_5fudc_5fcivic_2eproto;
};
// -------------------------------------------------------------------

class CompressionTool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:static_config_udc_civic.CompressionTool) */ {
 public:
  CompressionTool();
  virtual ~CompressionTool();

  CompressionTool(const CompressionTool& from);
  CompressionTool(CompressionTool&& from) noexcept
    : CompressionTool() {
    *this = ::std::move(from);
  }

  inline CompressionTool& operator=(const CompressionTool& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompressionTool& operator=(CompressionTool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompressionTool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompressionTool* internal_default_instance() {
    return reinterpret_cast<const CompressionTool*>(
               &_CompressionTool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CompressionTool& a, CompressionTool& b) {
    a.Swap(&b);
  }
  inline void Swap(CompressionTool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompressionTool* New() const final {
    return CreateMaybeMessage<CompressionTool>(nullptr);
  }

  CompressionTool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompressionTool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompressionTool& from);
  void MergeFrom(const CompressionTool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompressionTool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "static_config_udc_civic.CompressionTool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
    return ::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CompressionTool_Type Type;
  static constexpr Type GZIP =
    CompressionTool_Type_GZIP;
  static inline bool Type_IsValid(int value) {
    return CompressionTool_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    CompressionTool_Type_Type_MIN;
  static constexpr Type Type_MAX =
    CompressionTool_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    CompressionTool_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return CompressionTool_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return CompressionTool_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return CompressionTool_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDpjIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string dpj_id = 2;
  void clear_dpj_id();
  const std::string& dpj_id() const;
  void set_dpj_id(const std::string& value);
  void set_dpj_id(std::string&& value);
  void set_dpj_id(const char* value);
  void set_dpj_id(const char* value, size_t size);
  std::string* mutable_dpj_id();
  std::string* release_dpj_id();
  void set_allocated_dpj_id(std::string* dpj_id);
  private:
  const std::string& _internal_dpj_id() const;
  void _internal_set_dpj_id(const std::string& value);
  std::string* _internal_mutable_dpj_id();
  public:

  // .static_config_udc_civic.CompressionTool.Type type = 1;
  void clear_type();
  ::static_config_udc_civic::CompressionTool_Type type() const;
  void set_type(::static_config_udc_civic::CompressionTool_Type value);
  private:
  ::static_config_udc_civic::CompressionTool_Type _internal_type() const;
  void _internal_set_type(::static_config_udc_civic::CompressionTool_Type value);
  public:

  // @@protoc_insertion_point(class_scope:static_config_udc_civic.CompressionTool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dpj_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_static_5fconfig_5fudc_5fcivic_2eproto;
};
// -------------------------------------------------------------------

class EncryptionTool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:static_config_udc_civic.EncryptionTool) */ {
 public:
  EncryptionTool();
  virtual ~EncryptionTool();

  EncryptionTool(const EncryptionTool& from);
  EncryptionTool(EncryptionTool&& from) noexcept
    : EncryptionTool() {
    *this = ::std::move(from);
  }

  inline EncryptionTool& operator=(const EncryptionTool& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionTool& operator=(EncryptionTool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EncryptionTool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EncryptionTool* internal_default_instance() {
    return reinterpret_cast<const EncryptionTool*>(
               &_EncryptionTool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EncryptionTool& a, EncryptionTool& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptionTool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EncryptionTool* New() const final {
    return CreateMaybeMessage<EncryptionTool>(nullptr);
  }

  EncryptionTool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EncryptionTool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EncryptionTool& from);
  void MergeFrom(const EncryptionTool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EncryptionTool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "static_config_udc_civic.EncryptionTool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
    return ::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EncryptionTool_Type Type;
  static constexpr Type AES =
    EncryptionTool_Type_AES;
  static constexpr Type RSA =
    EncryptionTool_Type_RSA;
  static inline bool Type_IsValid(int value) {
    return EncryptionTool_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    EncryptionTool_Type_Type_MIN;
  static constexpr Type Type_MAX =
    EncryptionTool_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    EncryptionTool_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return EncryptionTool_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return EncryptionTool_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return EncryptionTool_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDpjIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string dpj_id = 2;
  void clear_dpj_id();
  const std::string& dpj_id() const;
  void set_dpj_id(const std::string& value);
  void set_dpj_id(std::string&& value);
  void set_dpj_id(const char* value);
  void set_dpj_id(const char* value, size_t size);
  std::string* mutable_dpj_id();
  std::string* release_dpj_id();
  void set_allocated_dpj_id(std::string* dpj_id);
  private:
  const std::string& _internal_dpj_id() const;
  void _internal_set_dpj_id(const std::string& value);
  std::string* _internal_mutable_dpj_id();
  public:

  // .static_config_udc_civic.EncryptionTool.Type type = 1;
  void clear_type();
  ::static_config_udc_civic::EncryptionTool_Type type() const;
  void set_type(::static_config_udc_civic::EncryptionTool_Type value);
  private:
  ::static_config_udc_civic::EncryptionTool_Type _internal_type() const;
  void _internal_set_type(::static_config_udc_civic::EncryptionTool_Type value);
  public:

  // @@protoc_insertion_point(class_scope:static_config_udc_civic.EncryptionTool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dpj_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_static_5fconfig_5fudc_5fcivic_2eproto;
};
// -------------------------------------------------------------------

class GeoHashTool :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:static_config_udc_civic.GeoHashTool) */ {
 public:
  GeoHashTool();
  virtual ~GeoHashTool();

  GeoHashTool(const GeoHashTool& from);
  GeoHashTool(GeoHashTool&& from) noexcept
    : GeoHashTool() {
    *this = ::std::move(from);
  }

  inline GeoHashTool& operator=(const GeoHashTool& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoHashTool& operator=(GeoHashTool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoHashTool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoHashTool* internal_default_instance() {
    return reinterpret_cast<const GeoHashTool*>(
               &_GeoHashTool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GeoHashTool& a, GeoHashTool& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoHashTool* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoHashTool* New() const final {
    return CreateMaybeMessage<GeoHashTool>(nullptr);
  }

  GeoHashTool* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoHashTool>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoHashTool& from);
  void MergeFrom(const GeoHashTool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoHashTool* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "static_config_udc_civic.GeoHashTool";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
    return ::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GeoHashTool_Type Type;
  static constexpr Type LEVEL1 =
    GeoHashTool_Type_LEVEL1;
  static constexpr Type LEVEL2 =
    GeoHashTool_Type_LEVEL2;
  static inline bool Type_IsValid(int value) {
    return GeoHashTool_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    GeoHashTool_Type_Type_MIN;
  static constexpr Type Type_MAX =
    GeoHashTool_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    GeoHashTool_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return GeoHashTool_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return GeoHashTool_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return GeoHashTool_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDpjIdFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string dpj_id = 2;
  void clear_dpj_id();
  const std::string& dpj_id() const;
  void set_dpj_id(const std::string& value);
  void set_dpj_id(std::string&& value);
  void set_dpj_id(const char* value);
  void set_dpj_id(const char* value, size_t size);
  std::string* mutable_dpj_id();
  std::string* release_dpj_id();
  void set_allocated_dpj_id(std::string* dpj_id);
  private:
  const std::string& _internal_dpj_id() const;
  void _internal_set_dpj_id(const std::string& value);
  std::string* _internal_mutable_dpj_id();
  public:

  // .static_config_udc_civic.GeoHashTool.Type type = 1;
  void clear_type();
  ::static_config_udc_civic::GeoHashTool_Type type() const;
  void set_type(::static_config_udc_civic::GeoHashTool_Type value);
  private:
  ::static_config_udc_civic::GeoHashTool_Type _internal_type() const;
  void _internal_set_type(::static_config_udc_civic::GeoHashTool_Type value);
  public:

  // @@protoc_insertion_point(class_scope:static_config_udc_civic.GeoHashTool)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dpj_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_static_5fconfig_5fudc_5fcivic_2eproto;
};
// -------------------------------------------------------------------

class DataSourceConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:static_config_udc_civic.DataSourceConfig) */ {
 public:
  DataSourceConfig();
  virtual ~DataSourceConfig();

  DataSourceConfig(const DataSourceConfig& from);
  DataSourceConfig(DataSourceConfig&& from) noexcept
    : DataSourceConfig() {
    *this = ::std::move(from);
  }

  inline DataSourceConfig& operator=(const DataSourceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSourceConfig& operator=(DataSourceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataSourceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSourceConfig* internal_default_instance() {
    return reinterpret_cast<const DataSourceConfig*>(
               &_DataSourceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DataSourceConfig& a, DataSourceConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSourceConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSourceConfig* New() const final {
    return CreateMaybeMessage<DataSourceConfig>(nullptr);
  }

  DataSourceConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSourceConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataSourceConfig& from);
  void MergeFrom(const DataSourceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSourceConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "static_config_udc_civic.DataSourceConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
    return ::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectdConfigFieldNumber = 1,
  };
  // .static_config_udc_civic.CollectdConfig collectd_config = 1;
  bool has_collectd_config() const;
  private:
  bool _internal_has_collectd_config() const;
  public:
  void clear_collectd_config();
  const ::static_config_udc_civic::CollectdConfig& collectd_config() const;
  ::static_config_udc_civic::CollectdConfig* release_collectd_config();
  ::static_config_udc_civic::CollectdConfig* mutable_collectd_config();
  void set_allocated_collectd_config(::static_config_udc_civic::CollectdConfig* collectd_config);
  private:
  const ::static_config_udc_civic::CollectdConfig& _internal_collectd_config() const;
  ::static_config_udc_civic::CollectdConfig* _internal_mutable_collectd_config();
  public:

  // @@protoc_insertion_point(class_scope:static_config_udc_civic.DataSourceConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::static_config_udc_civic::CollectdConfig* collectd_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_static_5fconfig_5fudc_5fcivic_2eproto;
};
// -------------------------------------------------------------------

class CollectdConfig :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:static_config_udc_civic.CollectdConfig) */ {
 public:
  CollectdConfig();
  virtual ~CollectdConfig();

  CollectdConfig(const CollectdConfig& from);
  CollectdConfig(CollectdConfig&& from) noexcept
    : CollectdConfig() {
    *this = ::std::move(from);
  }

  inline CollectdConfig& operator=(const CollectdConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectdConfig& operator=(CollectdConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectdConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectdConfig* internal_default_instance() {
    return reinterpret_cast<const CollectdConfig*>(
               &_CollectdConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CollectdConfig& a, CollectdConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectdConfig* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectdConfig* New() const final {
    return CreateMaybeMessage<CollectdConfig>(nullptr);
  }

  CollectdConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectdConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectdConfig& from);
  void MergeFrom(const CollectdConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectdConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "static_config_udc_civic.CollectdConfig";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
    return ::descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCollectdSockfileFieldNumber = 1,
  };
  // string collectd_sockfile = 1;
  void clear_collectd_sockfile();
  const std::string& collectd_sockfile() const;
  void set_collectd_sockfile(const std::string& value);
  void set_collectd_sockfile(std::string&& value);
  void set_collectd_sockfile(const char* value);
  void set_collectd_sockfile(const char* value, size_t size);
  std::string* mutable_collectd_sockfile();
  std::string* release_collectd_sockfile();
  void set_allocated_collectd_sockfile(std::string* collectd_sockfile);
  private:
  const std::string& _internal_collectd_sockfile() const;
  void _internal_set_collectd_sockfile(const std::string& value);
  std::string* _internal_mutable_collectd_sockfile();
  public:

  // @@protoc_insertion_point(class_scope:static_config_udc_civic.CollectdConfig)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr collectd_sockfile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_static_5fconfig_5fudc_5fcivic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StaticConfig

// .static_config_udc_civic.DefaultToolSettings default_toolbox_settings = 1;
inline bool StaticConfig::_internal_has_default_toolbox_settings() const {
  return this != internal_default_instance() && default_toolbox_settings_ != nullptr;
}
inline bool StaticConfig::has_default_toolbox_settings() const {
  return _internal_has_default_toolbox_settings();
}
inline void StaticConfig::clear_default_toolbox_settings() {
  if (GetArenaNoVirtual() == nullptr && default_toolbox_settings_ != nullptr) {
    delete default_toolbox_settings_;
  }
  default_toolbox_settings_ = nullptr;
}
inline const ::static_config_udc_civic::DefaultToolSettings& StaticConfig::_internal_default_toolbox_settings() const {
  const ::static_config_udc_civic::DefaultToolSettings* p = default_toolbox_settings_;
  return p != nullptr ? *p : *reinterpret_cast<const ::static_config_udc_civic::DefaultToolSettings*>(
      &::static_config_udc_civic::_DefaultToolSettings_default_instance_);
}
inline const ::static_config_udc_civic::DefaultToolSettings& StaticConfig::default_toolbox_settings() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.StaticConfig.default_toolbox_settings)
  return _internal_default_toolbox_settings();
}
inline ::static_config_udc_civic::DefaultToolSettings* StaticConfig::release_default_toolbox_settings() {
  // @@protoc_insertion_point(field_release:static_config_udc_civic.StaticConfig.default_toolbox_settings)
  
  ::static_config_udc_civic::DefaultToolSettings* temp = default_toolbox_settings_;
  default_toolbox_settings_ = nullptr;
  return temp;
}
inline ::static_config_udc_civic::DefaultToolSettings* StaticConfig::_internal_mutable_default_toolbox_settings() {
  
  if (default_toolbox_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::static_config_udc_civic::DefaultToolSettings>(GetArenaNoVirtual());
    default_toolbox_settings_ = p;
  }
  return default_toolbox_settings_;
}
inline ::static_config_udc_civic::DefaultToolSettings* StaticConfig::mutable_default_toolbox_settings() {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.StaticConfig.default_toolbox_settings)
  return _internal_mutable_default_toolbox_settings();
}
inline void StaticConfig::set_allocated_default_toolbox_settings(::static_config_udc_civic::DefaultToolSettings* default_toolbox_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default_toolbox_settings_;
  }
  if (default_toolbox_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_toolbox_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_toolbox_settings, submessage_arena);
    }
    
  } else {
    
  }
  default_toolbox_settings_ = default_toolbox_settings;
  // @@protoc_insertion_point(field_set_allocated:static_config_udc_civic.StaticConfig.default_toolbox_settings)
}

// repeated .static_config_udc_civic.EndPointParameters end_point_parameters = 2;
inline int StaticConfig::_internal_end_point_parameters_size() const {
  return end_point_parameters_.size();
}
inline int StaticConfig::end_point_parameters_size() const {
  return _internal_end_point_parameters_size();
}
inline void StaticConfig::clear_end_point_parameters() {
  end_point_parameters_.Clear();
}
inline ::static_config_udc_civic::EndPointParameters* StaticConfig::mutable_end_point_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.StaticConfig.end_point_parameters)
  return end_point_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EndPointParameters >*
StaticConfig::mutable_end_point_parameters() {
  // @@protoc_insertion_point(field_mutable_list:static_config_udc_civic.StaticConfig.end_point_parameters)
  return &end_point_parameters_;
}
inline const ::static_config_udc_civic::EndPointParameters& StaticConfig::_internal_end_point_parameters(int index) const {
  return end_point_parameters_.Get(index);
}
inline const ::static_config_udc_civic::EndPointParameters& StaticConfig::end_point_parameters(int index) const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.StaticConfig.end_point_parameters)
  return _internal_end_point_parameters(index);
}
inline ::static_config_udc_civic::EndPointParameters* StaticConfig::_internal_add_end_point_parameters() {
  return end_point_parameters_.Add();
}
inline ::static_config_udc_civic::EndPointParameters* StaticConfig::add_end_point_parameters() {
  // @@protoc_insertion_point(field_add:static_config_udc_civic.StaticConfig.end_point_parameters)
  return _internal_add_end_point_parameters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EndPointParameters >&
StaticConfig::end_point_parameters() const {
  // @@protoc_insertion_point(field_list:static_config_udc_civic.StaticConfig.end_point_parameters)
  return end_point_parameters_;
}

// int32 max_inactive_time_for_time_bound_jobs = 3;
inline void StaticConfig::clear_max_inactive_time_for_time_bound_jobs() {
  max_inactive_time_for_time_bound_jobs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticConfig::_internal_max_inactive_time_for_time_bound_jobs() const {
  return max_inactive_time_for_time_bound_jobs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticConfig::max_inactive_time_for_time_bound_jobs() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.StaticConfig.max_inactive_time_for_time_bound_jobs)
  return _internal_max_inactive_time_for_time_bound_jobs();
}
inline void StaticConfig::_internal_set_max_inactive_time_for_time_bound_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_inactive_time_for_time_bound_jobs_ = value;
}
inline void StaticConfig::set_max_inactive_time_for_time_bound_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_inactive_time_for_time_bound_jobs(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.StaticConfig.max_inactive_time_for_time_bound_jobs)
}

// int32 max_inactive_distance_for_geo_bound_jobs = 4;
inline void StaticConfig::clear_max_inactive_distance_for_geo_bound_jobs() {
  max_inactive_distance_for_geo_bound_jobs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticConfig::_internal_max_inactive_distance_for_geo_bound_jobs() const {
  return max_inactive_distance_for_geo_bound_jobs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticConfig::max_inactive_distance_for_geo_bound_jobs() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.StaticConfig.max_inactive_distance_for_geo_bound_jobs)
  return _internal_max_inactive_distance_for_geo_bound_jobs();
}
inline void StaticConfig::_internal_set_max_inactive_distance_for_geo_bound_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_inactive_distance_for_geo_bound_jobs_ = value;
}
inline void StaticConfig::set_max_inactive_distance_for_geo_bound_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_inactive_distance_for_geo_bound_jobs(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.StaticConfig.max_inactive_distance_for_geo_bound_jobs)
}

// repeated .static_config_udc_civic.DataSourceConfig data_source_configs = 5;
inline int StaticConfig::_internal_data_source_configs_size() const {
  return data_source_configs_.size();
}
inline int StaticConfig::data_source_configs_size() const {
  return _internal_data_source_configs_size();
}
inline void StaticConfig::clear_data_source_configs() {
  data_source_configs_.Clear();
}
inline ::static_config_udc_civic::DataSourceConfig* StaticConfig::mutable_data_source_configs(int index) {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.StaticConfig.data_source_configs)
  return data_source_configs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::DataSourceConfig >*
StaticConfig::mutable_data_source_configs() {
  // @@protoc_insertion_point(field_mutable_list:static_config_udc_civic.StaticConfig.data_source_configs)
  return &data_source_configs_;
}
inline const ::static_config_udc_civic::DataSourceConfig& StaticConfig::_internal_data_source_configs(int index) const {
  return data_source_configs_.Get(index);
}
inline const ::static_config_udc_civic::DataSourceConfig& StaticConfig::data_source_configs(int index) const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.StaticConfig.data_source_configs)
  return _internal_data_source_configs(index);
}
inline ::static_config_udc_civic::DataSourceConfig* StaticConfig::_internal_add_data_source_configs() {
  return data_source_configs_.Add();
}
inline ::static_config_udc_civic::DataSourceConfig* StaticConfig::add_data_source_configs() {
  // @@protoc_insertion_point(field_add:static_config_udc_civic.StaticConfig.data_source_configs)
  return _internal_add_data_source_configs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::DataSourceConfig >&
StaticConfig::data_source_configs() const {
  // @@protoc_insertion_point(field_list:static_config_udc_civic.StaticConfig.data_source_configs)
  return data_source_configs_;
}

// -------------------------------------------------------------------

// EndPointParameters

// .static_config_udc_civic.EndPointParameters.End_Point end_point = 1;
inline void EndPointParameters::clear_end_point() {
  end_point_ = 0;
}
inline ::static_config_udc_civic::EndPointParameters_End_Point EndPointParameters::_internal_end_point() const {
  return static_cast< ::static_config_udc_civic::EndPointParameters_End_Point >(end_point_);
}
inline ::static_config_udc_civic::EndPointParameters_End_Point EndPointParameters::end_point() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.EndPointParameters.end_point)
  return _internal_end_point();
}
inline void EndPointParameters::_internal_set_end_point(::static_config_udc_civic::EndPointParameters_End_Point value) {
  
  end_point_ = value;
}
inline void EndPointParameters::set_end_point(::static_config_udc_civic::EndPointParameters_End_Point value) {
  _internal_set_end_point(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.EndPointParameters.end_point)
}

// string url = 2;
inline void EndPointParameters::clear_url() {
  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EndPointParameters::url() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.EndPointParameters.url)
  return _internal_url();
}
inline void EndPointParameters::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.EndPointParameters.url)
}
inline std::string* EndPointParameters::mutable_url() {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.EndPointParameters.url)
  return _internal_mutable_url();
}
inline const std::string& EndPointParameters::_internal_url() const {
  return url_.GetNoArena();
}
inline void EndPointParameters::_internal_set_url(const std::string& value) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EndPointParameters::set_url(std::string&& value) {
  
  url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:static_config_udc_civic.EndPointParameters.url)
}
inline void EndPointParameters::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:static_config_udc_civic.EndPointParameters.url)
}
inline void EndPointParameters::set_url(const char* value, size_t size) {
  
  url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:static_config_udc_civic.EndPointParameters.url)
}
inline std::string* EndPointParameters::_internal_mutable_url() {
  
  return url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EndPointParameters::release_url() {
  // @@protoc_insertion_point(field_release:static_config_udc_civic.EndPointParameters.url)
  
  return url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EndPointParameters::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url);
  // @@protoc_insertion_point(field_set_allocated:static_config_udc_civic.EndPointParameters.url)
}

// uint32 initial_timeout = 3;
inline void EndPointParameters::clear_initial_timeout() {
  initial_timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointParameters::_internal_initial_timeout() const {
  return initial_timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointParameters::initial_timeout() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.EndPointParameters.initial_timeout)
  return _internal_initial_timeout();
}
inline void EndPointParameters::_internal_set_initial_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  initial_timeout_ = value;
}
inline void EndPointParameters::set_initial_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_initial_timeout(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.EndPointParameters.initial_timeout)
}

// double timeout_factor = 4;
inline void EndPointParameters::clear_timeout_factor() {
  timeout_factor_ = 0;
}
inline double EndPointParameters::_internal_timeout_factor() const {
  return timeout_factor_;
}
inline double EndPointParameters::timeout_factor() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.EndPointParameters.timeout_factor)
  return _internal_timeout_factor();
}
inline void EndPointParameters::_internal_set_timeout_factor(double value) {
  
  timeout_factor_ = value;
}
inline void EndPointParameters::set_timeout_factor(double value) {
  _internal_set_timeout_factor(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.EndPointParameters.timeout_factor)
}

// uint32 max_timeout_interval = 5;
inline void EndPointParameters::clear_max_timeout_interval() {
  max_timeout_interval_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointParameters::_internal_max_timeout_interval() const {
  return max_timeout_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EndPointParameters::max_timeout_interval() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.EndPointParameters.max_timeout_interval)
  return _internal_max_timeout_interval();
}
inline void EndPointParameters::_internal_set_max_timeout_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  max_timeout_interval_ = value;
}
inline void EndPointParameters::set_max_timeout_interval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_max_timeout_interval(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.EndPointParameters.max_timeout_interval)
}

// int32 max_no_of_retries = 6;
inline void EndPointParameters::clear_max_no_of_retries() {
  max_no_of_retries_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndPointParameters::_internal_max_no_of_retries() const {
  return max_no_of_retries_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EndPointParameters::max_no_of_retries() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.EndPointParameters.max_no_of_retries)
  return _internal_max_no_of_retries();
}
inline void EndPointParameters::_internal_set_max_no_of_retries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_no_of_retries_ = value;
}
inline void EndPointParameters::set_max_no_of_retries(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_no_of_retries(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.EndPointParameters.max_no_of_retries)
}

// -------------------------------------------------------------------

// DefaultToolSettings

// repeated .static_config_udc_civic.CompressionTool compression_tool = 1;
inline int DefaultToolSettings::_internal_compression_tool_size() const {
  return compression_tool_.size();
}
inline int DefaultToolSettings::compression_tool_size() const {
  return _internal_compression_tool_size();
}
inline void DefaultToolSettings::clear_compression_tool() {
  compression_tool_.Clear();
}
inline ::static_config_udc_civic::CompressionTool* DefaultToolSettings::mutable_compression_tool(int index) {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.DefaultToolSettings.compression_tool)
  return compression_tool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::CompressionTool >*
DefaultToolSettings::mutable_compression_tool() {
  // @@protoc_insertion_point(field_mutable_list:static_config_udc_civic.DefaultToolSettings.compression_tool)
  return &compression_tool_;
}
inline const ::static_config_udc_civic::CompressionTool& DefaultToolSettings::_internal_compression_tool(int index) const {
  return compression_tool_.Get(index);
}
inline const ::static_config_udc_civic::CompressionTool& DefaultToolSettings::compression_tool(int index) const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.DefaultToolSettings.compression_tool)
  return _internal_compression_tool(index);
}
inline ::static_config_udc_civic::CompressionTool* DefaultToolSettings::_internal_add_compression_tool() {
  return compression_tool_.Add();
}
inline ::static_config_udc_civic::CompressionTool* DefaultToolSettings::add_compression_tool() {
  // @@protoc_insertion_point(field_add:static_config_udc_civic.DefaultToolSettings.compression_tool)
  return _internal_add_compression_tool();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::CompressionTool >&
DefaultToolSettings::compression_tool() const {
  // @@protoc_insertion_point(field_list:static_config_udc_civic.DefaultToolSettings.compression_tool)
  return compression_tool_;
}

// repeated .static_config_udc_civic.EncryptionTool encryption_tool = 2;
inline int DefaultToolSettings::_internal_encryption_tool_size() const {
  return encryption_tool_.size();
}
inline int DefaultToolSettings::encryption_tool_size() const {
  return _internal_encryption_tool_size();
}
inline void DefaultToolSettings::clear_encryption_tool() {
  encryption_tool_.Clear();
}
inline ::static_config_udc_civic::EncryptionTool* DefaultToolSettings::mutable_encryption_tool(int index) {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.DefaultToolSettings.encryption_tool)
  return encryption_tool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EncryptionTool >*
DefaultToolSettings::mutable_encryption_tool() {
  // @@protoc_insertion_point(field_mutable_list:static_config_udc_civic.DefaultToolSettings.encryption_tool)
  return &encryption_tool_;
}
inline const ::static_config_udc_civic::EncryptionTool& DefaultToolSettings::_internal_encryption_tool(int index) const {
  return encryption_tool_.Get(index);
}
inline const ::static_config_udc_civic::EncryptionTool& DefaultToolSettings::encryption_tool(int index) const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.DefaultToolSettings.encryption_tool)
  return _internal_encryption_tool(index);
}
inline ::static_config_udc_civic::EncryptionTool* DefaultToolSettings::_internal_add_encryption_tool() {
  return encryption_tool_.Add();
}
inline ::static_config_udc_civic::EncryptionTool* DefaultToolSettings::add_encryption_tool() {
  // @@protoc_insertion_point(field_add:static_config_udc_civic.DefaultToolSettings.encryption_tool)
  return _internal_add_encryption_tool();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::EncryptionTool >&
DefaultToolSettings::encryption_tool() const {
  // @@protoc_insertion_point(field_list:static_config_udc_civic.DefaultToolSettings.encryption_tool)
  return encryption_tool_;
}

// repeated .static_config_udc_civic.GeoHashTool geo_hash_tool = 3;
inline int DefaultToolSettings::_internal_geo_hash_tool_size() const {
  return geo_hash_tool_.size();
}
inline int DefaultToolSettings::geo_hash_tool_size() const {
  return _internal_geo_hash_tool_size();
}
inline void DefaultToolSettings::clear_geo_hash_tool() {
  geo_hash_tool_.Clear();
}
inline ::static_config_udc_civic::GeoHashTool* DefaultToolSettings::mutable_geo_hash_tool(int index) {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.DefaultToolSettings.geo_hash_tool)
  return geo_hash_tool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::GeoHashTool >*
DefaultToolSettings::mutable_geo_hash_tool() {
  // @@protoc_insertion_point(field_mutable_list:static_config_udc_civic.DefaultToolSettings.geo_hash_tool)
  return &geo_hash_tool_;
}
inline const ::static_config_udc_civic::GeoHashTool& DefaultToolSettings::_internal_geo_hash_tool(int index) const {
  return geo_hash_tool_.Get(index);
}
inline const ::static_config_udc_civic::GeoHashTool& DefaultToolSettings::geo_hash_tool(int index) const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.DefaultToolSettings.geo_hash_tool)
  return _internal_geo_hash_tool(index);
}
inline ::static_config_udc_civic::GeoHashTool* DefaultToolSettings::_internal_add_geo_hash_tool() {
  return geo_hash_tool_.Add();
}
inline ::static_config_udc_civic::GeoHashTool* DefaultToolSettings::add_geo_hash_tool() {
  // @@protoc_insertion_point(field_add:static_config_udc_civic.DefaultToolSettings.geo_hash_tool)
  return _internal_add_geo_hash_tool();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::static_config_udc_civic::GeoHashTool >&
DefaultToolSettings::geo_hash_tool() const {
  // @@protoc_insertion_point(field_list:static_config_udc_civic.DefaultToolSettings.geo_hash_tool)
  return geo_hash_tool_;
}

// -------------------------------------------------------------------

// CompressionTool

// .static_config_udc_civic.CompressionTool.Type type = 1;
inline void CompressionTool::clear_type() {
  type_ = 0;
}
inline ::static_config_udc_civic::CompressionTool_Type CompressionTool::_internal_type() const {
  return static_cast< ::static_config_udc_civic::CompressionTool_Type >(type_);
}
inline ::static_config_udc_civic::CompressionTool_Type CompressionTool::type() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.CompressionTool.type)
  return _internal_type();
}
inline void CompressionTool::_internal_set_type(::static_config_udc_civic::CompressionTool_Type value) {
  
  type_ = value;
}
inline void CompressionTool::set_type(::static_config_udc_civic::CompressionTool_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.CompressionTool.type)
}

// string dpj_id = 2;
inline void CompressionTool::clear_dpj_id() {
  dpj_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CompressionTool::dpj_id() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.CompressionTool.dpj_id)
  return _internal_dpj_id();
}
inline void CompressionTool::set_dpj_id(const std::string& value) {
  _internal_set_dpj_id(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.CompressionTool.dpj_id)
}
inline std::string* CompressionTool::mutable_dpj_id() {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.CompressionTool.dpj_id)
  return _internal_mutable_dpj_id();
}
inline const std::string& CompressionTool::_internal_dpj_id() const {
  return dpj_id_.GetNoArena();
}
inline void CompressionTool::_internal_set_dpj_id(const std::string& value) {
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CompressionTool::set_dpj_id(std::string&& value) {
  
  dpj_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:static_config_udc_civic.CompressionTool.dpj_id)
}
inline void CompressionTool::set_dpj_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:static_config_udc_civic.CompressionTool.dpj_id)
}
inline void CompressionTool::set_dpj_id(const char* value, size_t size) {
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:static_config_udc_civic.CompressionTool.dpj_id)
}
inline std::string* CompressionTool::_internal_mutable_dpj_id() {
  
  return dpj_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CompressionTool::release_dpj_id() {
  // @@protoc_insertion_point(field_release:static_config_udc_civic.CompressionTool.dpj_id)
  
  return dpj_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CompressionTool::set_allocated_dpj_id(std::string* dpj_id) {
  if (dpj_id != nullptr) {
    
  } else {
    
  }
  dpj_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dpj_id);
  // @@protoc_insertion_point(field_set_allocated:static_config_udc_civic.CompressionTool.dpj_id)
}

// -------------------------------------------------------------------

// EncryptionTool

// .static_config_udc_civic.EncryptionTool.Type type = 1;
inline void EncryptionTool::clear_type() {
  type_ = 0;
}
inline ::static_config_udc_civic::EncryptionTool_Type EncryptionTool::_internal_type() const {
  return static_cast< ::static_config_udc_civic::EncryptionTool_Type >(type_);
}
inline ::static_config_udc_civic::EncryptionTool_Type EncryptionTool::type() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.EncryptionTool.type)
  return _internal_type();
}
inline void EncryptionTool::_internal_set_type(::static_config_udc_civic::EncryptionTool_Type value) {
  
  type_ = value;
}
inline void EncryptionTool::set_type(::static_config_udc_civic::EncryptionTool_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.EncryptionTool.type)
}

// string dpj_id = 2;
inline void EncryptionTool::clear_dpj_id() {
  dpj_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EncryptionTool::dpj_id() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.EncryptionTool.dpj_id)
  return _internal_dpj_id();
}
inline void EncryptionTool::set_dpj_id(const std::string& value) {
  _internal_set_dpj_id(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.EncryptionTool.dpj_id)
}
inline std::string* EncryptionTool::mutable_dpj_id() {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.EncryptionTool.dpj_id)
  return _internal_mutable_dpj_id();
}
inline const std::string& EncryptionTool::_internal_dpj_id() const {
  return dpj_id_.GetNoArena();
}
inline void EncryptionTool::_internal_set_dpj_id(const std::string& value) {
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EncryptionTool::set_dpj_id(std::string&& value) {
  
  dpj_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:static_config_udc_civic.EncryptionTool.dpj_id)
}
inline void EncryptionTool::set_dpj_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:static_config_udc_civic.EncryptionTool.dpj_id)
}
inline void EncryptionTool::set_dpj_id(const char* value, size_t size) {
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:static_config_udc_civic.EncryptionTool.dpj_id)
}
inline std::string* EncryptionTool::_internal_mutable_dpj_id() {
  
  return dpj_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EncryptionTool::release_dpj_id() {
  // @@protoc_insertion_point(field_release:static_config_udc_civic.EncryptionTool.dpj_id)
  
  return dpj_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EncryptionTool::set_allocated_dpj_id(std::string* dpj_id) {
  if (dpj_id != nullptr) {
    
  } else {
    
  }
  dpj_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dpj_id);
  // @@protoc_insertion_point(field_set_allocated:static_config_udc_civic.EncryptionTool.dpj_id)
}

// -------------------------------------------------------------------

// GeoHashTool

// .static_config_udc_civic.GeoHashTool.Type type = 1;
inline void GeoHashTool::clear_type() {
  type_ = 0;
}
inline ::static_config_udc_civic::GeoHashTool_Type GeoHashTool::_internal_type() const {
  return static_cast< ::static_config_udc_civic::GeoHashTool_Type >(type_);
}
inline ::static_config_udc_civic::GeoHashTool_Type GeoHashTool::type() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.GeoHashTool.type)
  return _internal_type();
}
inline void GeoHashTool::_internal_set_type(::static_config_udc_civic::GeoHashTool_Type value) {
  
  type_ = value;
}
inline void GeoHashTool::set_type(::static_config_udc_civic::GeoHashTool_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.GeoHashTool.type)
}

// string dpj_id = 2;
inline void GeoHashTool::clear_dpj_id() {
  dpj_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeoHashTool::dpj_id() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.GeoHashTool.dpj_id)
  return _internal_dpj_id();
}
inline void GeoHashTool::set_dpj_id(const std::string& value) {
  _internal_set_dpj_id(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.GeoHashTool.dpj_id)
}
inline std::string* GeoHashTool::mutable_dpj_id() {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.GeoHashTool.dpj_id)
  return _internal_mutable_dpj_id();
}
inline const std::string& GeoHashTool::_internal_dpj_id() const {
  return dpj_id_.GetNoArena();
}
inline void GeoHashTool::_internal_set_dpj_id(const std::string& value) {
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeoHashTool::set_dpj_id(std::string&& value) {
  
  dpj_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:static_config_udc_civic.GeoHashTool.dpj_id)
}
inline void GeoHashTool::set_dpj_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:static_config_udc_civic.GeoHashTool.dpj_id)
}
inline void GeoHashTool::set_dpj_id(const char* value, size_t size) {
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:static_config_udc_civic.GeoHashTool.dpj_id)
}
inline std::string* GeoHashTool::_internal_mutable_dpj_id() {
  
  return dpj_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeoHashTool::release_dpj_id() {
  // @@protoc_insertion_point(field_release:static_config_udc_civic.GeoHashTool.dpj_id)
  
  return dpj_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeoHashTool::set_allocated_dpj_id(std::string* dpj_id) {
  if (dpj_id != nullptr) {
    
  } else {
    
  }
  dpj_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dpj_id);
  // @@protoc_insertion_point(field_set_allocated:static_config_udc_civic.GeoHashTool.dpj_id)
}

// -------------------------------------------------------------------

// DataSourceConfig

// .static_config_udc_civic.CollectdConfig collectd_config = 1;
inline bool DataSourceConfig::_internal_has_collectd_config() const {
  return this != internal_default_instance() && collectd_config_ != nullptr;
}
inline bool DataSourceConfig::has_collectd_config() const {
  return _internal_has_collectd_config();
}
inline void DataSourceConfig::clear_collectd_config() {
  if (GetArenaNoVirtual() == nullptr && collectd_config_ != nullptr) {
    delete collectd_config_;
  }
  collectd_config_ = nullptr;
}
inline const ::static_config_udc_civic::CollectdConfig& DataSourceConfig::_internal_collectd_config() const {
  const ::static_config_udc_civic::CollectdConfig* p = collectd_config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::static_config_udc_civic::CollectdConfig*>(
      &::static_config_udc_civic::_CollectdConfig_default_instance_);
}
inline const ::static_config_udc_civic::CollectdConfig& DataSourceConfig::collectd_config() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.DataSourceConfig.collectd_config)
  return _internal_collectd_config();
}
inline ::static_config_udc_civic::CollectdConfig* DataSourceConfig::release_collectd_config() {
  // @@protoc_insertion_point(field_release:static_config_udc_civic.DataSourceConfig.collectd_config)
  
  ::static_config_udc_civic::CollectdConfig* temp = collectd_config_;
  collectd_config_ = nullptr;
  return temp;
}
inline ::static_config_udc_civic::CollectdConfig* DataSourceConfig::_internal_mutable_collectd_config() {
  
  if (collectd_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::static_config_udc_civic::CollectdConfig>(GetArenaNoVirtual());
    collectd_config_ = p;
  }
  return collectd_config_;
}
inline ::static_config_udc_civic::CollectdConfig* DataSourceConfig::mutable_collectd_config() {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.DataSourceConfig.collectd_config)
  return _internal_mutable_collectd_config();
}
inline void DataSourceConfig::set_allocated_collectd_config(::static_config_udc_civic::CollectdConfig* collectd_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete collectd_config_;
  }
  if (collectd_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collectd_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collectd_config, submessage_arena);
    }
    
  } else {
    
  }
  collectd_config_ = collectd_config;
  // @@protoc_insertion_point(field_set_allocated:static_config_udc_civic.DataSourceConfig.collectd_config)
}

// -------------------------------------------------------------------

// CollectdConfig

// string collectd_sockfile = 1;
inline void CollectdConfig::clear_collectd_sockfile() {
  collectd_sockfile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectdConfig::collectd_sockfile() const {
  // @@protoc_insertion_point(field_get:static_config_udc_civic.CollectdConfig.collectd_sockfile)
  return _internal_collectd_sockfile();
}
inline void CollectdConfig::set_collectd_sockfile(const std::string& value) {
  _internal_set_collectd_sockfile(value);
  // @@protoc_insertion_point(field_set:static_config_udc_civic.CollectdConfig.collectd_sockfile)
}
inline std::string* CollectdConfig::mutable_collectd_sockfile() {
  // @@protoc_insertion_point(field_mutable:static_config_udc_civic.CollectdConfig.collectd_sockfile)
  return _internal_mutable_collectd_sockfile();
}
inline const std::string& CollectdConfig::_internal_collectd_sockfile() const {
  return collectd_sockfile_.GetNoArena();
}
inline void CollectdConfig::_internal_set_collectd_sockfile(const std::string& value) {
  
  collectd_sockfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CollectdConfig::set_collectd_sockfile(std::string&& value) {
  
  collectd_sockfile_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:static_config_udc_civic.CollectdConfig.collectd_sockfile)
}
inline void CollectdConfig::set_collectd_sockfile(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  collectd_sockfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:static_config_udc_civic.CollectdConfig.collectd_sockfile)
}
inline void CollectdConfig::set_collectd_sockfile(const char* value, size_t size) {
  
  collectd_sockfile_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:static_config_udc_civic.CollectdConfig.collectd_sockfile)
}
inline std::string* CollectdConfig::_internal_mutable_collectd_sockfile() {
  
  return collectd_sockfile_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectdConfig::release_collectd_sockfile() {
  // @@protoc_insertion_point(field_release:static_config_udc_civic.CollectdConfig.collectd_sockfile)
  
  return collectd_sockfile_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectdConfig::set_allocated_collectd_sockfile(std::string* collectd_sockfile) {
  if (collectd_sockfile != nullptr) {
    
  } else {
    
  }
  collectd_sockfile_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), collectd_sockfile);
  // @@protoc_insertion_point(field_set_allocated:static_config_udc_civic.CollectdConfig.collectd_sockfile)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace static_config_udc_civic

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::static_config_udc_civic::EndPointParameters_End_Point> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::static_config_udc_civic::EndPointParameters_End_Point>() {
  return ::static_config_udc_civic::EndPointParameters_End_Point_descriptor();
}
template <> struct is_proto_enum< ::static_config_udc_civic::CompressionTool_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::static_config_udc_civic::CompressionTool_Type>() {
  return ::static_config_udc_civic::CompressionTool_Type_descriptor();
}
template <> struct is_proto_enum< ::static_config_udc_civic::EncryptionTool_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::static_config_udc_civic::EncryptionTool_Type>() {
  return ::static_config_udc_civic::EncryptionTool_Type_descriptor();
}
template <> struct is_proto_enum< ::static_config_udc_civic::GeoHashTool_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::static_config_udc_civic::GeoHashTool_Type>() {
  return ::static_config_udc_civic::GeoHashTool_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_static_5fconfig_5fudc_5fcivic_2eproto
