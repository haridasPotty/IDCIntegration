// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: static_config_udc_civic.proto

#include "static_config_udc_civic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_static_5fconfig_5fudc_5fcivic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectdConfig_static_5fconfig_5fudc_5fcivic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_static_5fconfig_5fudc_5fcivic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompressionTool_static_5fconfig_5fudc_5fcivic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_static_5fconfig_5fudc_5fcivic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataSourceConfig_static_5fconfig_5fudc_5fcivic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_static_5fconfig_5fudc_5fcivic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DefaultToolSettings_static_5fconfig_5fudc_5fcivic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_static_5fconfig_5fudc_5fcivic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptionTool_static_5fconfig_5fudc_5fcivic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_static_5fconfig_5fudc_5fcivic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPointParameters_static_5fconfig_5fudc_5fcivic_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_static_5fconfig_5fudc_5fcivic_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoHashTool_static_5fconfig_5fudc_5fcivic_2eproto;
namespace static_config_udc_civic {
class StaticConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StaticConfig> _instance;
} _StaticConfig_default_instance_;
class EndPointParametersDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndPointParameters> _instance;
} _EndPointParameters_default_instance_;
class DefaultToolSettingsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DefaultToolSettings> _instance;
} _DefaultToolSettings_default_instance_;
class CompressionToolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompressionTool> _instance;
} _CompressionTool_default_instance_;
class EncryptionToolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EncryptionTool> _instance;
} _EncryptionTool_default_instance_;
class GeoHashToolDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoHashTool> _instance;
} _GeoHashTool_default_instance_;
class DataSourceConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSourceConfig> _instance;
} _DataSourceConfig_default_instance_;
class CollectdConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectdConfig> _instance;
} _CollectdConfig_default_instance_;
}  // namespace static_config_udc_civic
static void InitDefaultsscc_info_CollectdConfig_static_5fconfig_5fudc_5fcivic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::static_config_udc_civic::_CollectdConfig_default_instance_;
    new (ptr) ::static_config_udc_civic::CollectdConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::static_config_udc_civic::CollectdConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectdConfig_static_5fconfig_5fudc_5fcivic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CollectdConfig_static_5fconfig_5fudc_5fcivic_2eproto}, {}};

static void InitDefaultsscc_info_CompressionTool_static_5fconfig_5fudc_5fcivic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::static_config_udc_civic::_CompressionTool_default_instance_;
    new (ptr) ::static_config_udc_civic::CompressionTool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::static_config_udc_civic::CompressionTool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CompressionTool_static_5fconfig_5fudc_5fcivic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CompressionTool_static_5fconfig_5fudc_5fcivic_2eproto}, {}};

static void InitDefaultsscc_info_DataSourceConfig_static_5fconfig_5fudc_5fcivic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::static_config_udc_civic::_DataSourceConfig_default_instance_;
    new (ptr) ::static_config_udc_civic::DataSourceConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::static_config_udc_civic::DataSourceConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataSourceConfig_static_5fconfig_5fudc_5fcivic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataSourceConfig_static_5fconfig_5fudc_5fcivic_2eproto}, {
      &scc_info_CollectdConfig_static_5fconfig_5fudc_5fcivic_2eproto.base,}};

static void InitDefaultsscc_info_DefaultToolSettings_static_5fconfig_5fudc_5fcivic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::static_config_udc_civic::_DefaultToolSettings_default_instance_;
    new (ptr) ::static_config_udc_civic::DefaultToolSettings();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::static_config_udc_civic::DefaultToolSettings::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_DefaultToolSettings_static_5fconfig_5fudc_5fcivic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_DefaultToolSettings_static_5fconfig_5fudc_5fcivic_2eproto}, {
      &scc_info_CompressionTool_static_5fconfig_5fudc_5fcivic_2eproto.base,
      &scc_info_EncryptionTool_static_5fconfig_5fudc_5fcivic_2eproto.base,
      &scc_info_GeoHashTool_static_5fconfig_5fudc_5fcivic_2eproto.base,}};

static void InitDefaultsscc_info_EncryptionTool_static_5fconfig_5fudc_5fcivic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::static_config_udc_civic::_EncryptionTool_default_instance_;
    new (ptr) ::static_config_udc_civic::EncryptionTool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::static_config_udc_civic::EncryptionTool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EncryptionTool_static_5fconfig_5fudc_5fcivic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EncryptionTool_static_5fconfig_5fudc_5fcivic_2eproto}, {}};

static void InitDefaultsscc_info_EndPointParameters_static_5fconfig_5fudc_5fcivic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::static_config_udc_civic::_EndPointParameters_default_instance_;
    new (ptr) ::static_config_udc_civic::EndPointParameters();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::static_config_udc_civic::EndPointParameters::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPointParameters_static_5fconfig_5fudc_5fcivic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndPointParameters_static_5fconfig_5fudc_5fcivic_2eproto}, {}};

static void InitDefaultsscc_info_GeoHashTool_static_5fconfig_5fudc_5fcivic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::static_config_udc_civic::_GeoHashTool_default_instance_;
    new (ptr) ::static_config_udc_civic::GeoHashTool();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::static_config_udc_civic::GeoHashTool::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoHashTool_static_5fconfig_5fudc_5fcivic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoHashTool_static_5fconfig_5fudc_5fcivic_2eproto}, {}};

static void InitDefaultsscc_info_StaticConfig_static_5fconfig_5fudc_5fcivic_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::static_config_udc_civic::_StaticConfig_default_instance_;
    new (ptr) ::static_config_udc_civic::StaticConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::static_config_udc_civic::StaticConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_StaticConfig_static_5fconfig_5fudc_5fcivic_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_StaticConfig_static_5fconfig_5fudc_5fcivic_2eproto}, {
      &scc_info_DefaultToolSettings_static_5fconfig_5fudc_5fcivic_2eproto.base,
      &scc_info_EndPointParameters_static_5fconfig_5fudc_5fcivic_2eproto.base,
      &scc_info_DataSourceConfig_static_5fconfig_5fudc_5fcivic_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_static_5fconfig_5fudc_5fcivic_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_static_5fconfig_5fudc_5fcivic_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_static_5fconfig_5fudc_5fcivic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_static_5fconfig_5fudc_5fcivic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::StaticConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::StaticConfig, default_toolbox_settings_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::StaticConfig, end_point_parameters_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::StaticConfig, max_inactive_time_for_time_bound_jobs_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::StaticConfig, max_inactive_distance_for_geo_bound_jobs_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::StaticConfig, data_source_configs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EndPointParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EndPointParameters, end_point_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EndPointParameters, url_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EndPointParameters, initial_timeout_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EndPointParameters, timeout_factor_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EndPointParameters, max_timeout_interval_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EndPointParameters, max_no_of_retries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::DefaultToolSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::DefaultToolSettings, compression_tool_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::DefaultToolSettings, encryption_tool_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::DefaultToolSettings, geo_hash_tool_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::CompressionTool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::CompressionTool, type_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::CompressionTool, dpj_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EncryptionTool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EncryptionTool, type_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::EncryptionTool, dpj_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::GeoHashTool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::GeoHashTool, type_),
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::GeoHashTool, dpj_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::DataSourceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::DataSourceConfig, collectd_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::CollectdConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::static_config_udc_civic::CollectdConfig, collectd_sockfile_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::static_config_udc_civic::StaticConfig)},
  { 10, -1, sizeof(::static_config_udc_civic::EndPointParameters)},
  { 21, -1, sizeof(::static_config_udc_civic::DefaultToolSettings)},
  { 29, -1, sizeof(::static_config_udc_civic::CompressionTool)},
  { 36, -1, sizeof(::static_config_udc_civic::EncryptionTool)},
  { 43, -1, sizeof(::static_config_udc_civic::GeoHashTool)},
  { 50, -1, sizeof(::static_config_udc_civic::DataSourceConfig)},
  { 56, -1, sizeof(::static_config_udc_civic::CollectdConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::static_config_udc_civic::_StaticConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::static_config_udc_civic::_EndPointParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::static_config_udc_civic::_DefaultToolSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::static_config_udc_civic::_CompressionTool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::static_config_udc_civic::_EncryptionTool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::static_config_udc_civic::_GeoHashTool_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::static_config_udc_civic::_DataSourceConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::static_config_udc_civic::_CollectdConfig_default_instance_),
};

const char descriptor_table_protodef_static_5fconfig_5fudc_5fcivic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035static_config_udc_civic.proto\022\027static_"
  "config_udc_civic\"\322\002\n\014StaticConfig\022N\n\030def"
  "ault_toolbox_settings\030\001 \001(\0132,.static_con"
  "fig_udc_civic.DefaultToolSettings\022I\n\024end"
  "_point_parameters\030\002 \003(\0132+.static_config_"
  "udc_civic.EndPointParameters\022-\n%max_inac"
  "tive_time_for_time_bound_jobs\030\003 \001(\005\0220\n(m"
  "ax_inactive_distance_for_geo_bound_jobs\030"
  "\004 \001(\005\022F\n\023data_source_configs\030\005 \003(\0132).sta"
  "tic_config_udc_civic.DataSourceConfig\"\261\002"
  "\n\022EndPointParameters\022H\n\tend_point\030\001 \001(\0162"
  "5.static_config_udc_civic.EndPointParame"
  "ters.End_Point\022\013\n\003url\030\002 \001(\t\022\027\n\017initial_t"
  "imeout\030\003 \001(\r\022\026\n\016timeout_factor\030\004 \001(\001\022\034\n\024"
  "max_timeout_interval\030\005 \001(\r\022\031\n\021max_no_of_"
  "retries\030\006 \001(\005\"Z\n\tEnd_Point\022\016\n\nJOB_STATUS"
  "\020\000\022\014\n\010GEO_HASH\020\001\022\030\n\024SEND_UPLINK_PERSONAL"
  "\020\002\022\025\n\021SEND_UPLINK_CROWD\020\003\"\330\001\n\023DefaultToo"
  "lSettings\022B\n\020compression_tool\030\001 \003(\0132(.st"
  "atic_config_udc_civic.CompressionTool\022@\n"
  "\017encryption_tool\030\002 \003(\0132\'.static_config_u"
  "dc_civic.EncryptionTool\022;\n\rgeo_hash_tool"
  "\030\003 \003(\0132$.static_config_udc_civic.GeoHash"
  "Tool\"p\n\017CompressionTool\022;\n\004type\030\001 \001(\0162-."
  "static_config_udc_civic.CompressionTool."
  "Type\022\016\n\006dpj_id\030\002 \001(\t\"\020\n\004Type\022\010\n\004GZIP\020\000\"v"
  "\n\016EncryptionTool\022:\n\004type\030\001 \001(\0162,.static_"
  "config_udc_civic.EncryptionTool.Type\022\016\n\006"
  "dpj_id\030\002 \001(\t\"\030\n\004Type\022\007\n\003AES\020\000\022\007\n\003RSA\020\001\"v"
  "\n\013GeoHashTool\0227\n\004type\030\001 \001(\0162).static_con"
  "fig_udc_civic.GeoHashTool.Type\022\016\n\006dpj_id"
  "\030\002 \001(\t\"\036\n\004Type\022\n\n\006LEVEL1\020\000\022\n\n\006LEVEL2\020\001\"T"
  "\n\020DataSourceConfig\022@\n\017collectd_config\030\001 "
  "\001(\0132\'.static_config_udc_civic.CollectdCo"
  "nfig\"+\n\016CollectdConfig\022\031\n\021collectd_sockf"
  "ile\030\001 \001(\tB\002P\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto_sccs[8] = {
  &scc_info_CollectdConfig_static_5fconfig_5fudc_5fcivic_2eproto.base,
  &scc_info_CompressionTool_static_5fconfig_5fudc_5fcivic_2eproto.base,
  &scc_info_DataSourceConfig_static_5fconfig_5fudc_5fcivic_2eproto.base,
  &scc_info_DefaultToolSettings_static_5fconfig_5fudc_5fcivic_2eproto.base,
  &scc_info_EncryptionTool_static_5fconfig_5fudc_5fcivic_2eproto.base,
  &scc_info_EndPointParameters_static_5fconfig_5fudc_5fcivic_2eproto.base,
  &scc_info_GeoHashTool_static_5fconfig_5fudc_5fcivic_2eproto.base,
  &scc_info_StaticConfig_static_5fconfig_5fudc_5fcivic_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto_once;
static bool descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto = {
  &descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto_initialized, descriptor_table_protodef_static_5fconfig_5fudc_5fcivic_2eproto, "static_config_udc_civic.proto", 1421,
  &descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto_once, descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto_sccs, descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_static_5fconfig_5fudc_5fcivic_2eproto::offsets,
  file_level_metadata_static_5fconfig_5fudc_5fcivic_2eproto, 8, file_level_enum_descriptors_static_5fconfig_5fudc_5fcivic_2eproto, file_level_service_descriptors_static_5fconfig_5fudc_5fcivic_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_static_5fconfig_5fudc_5fcivic_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto), true);
namespace static_config_udc_civic {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EndPointParameters_End_Point_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
  return file_level_enum_descriptors_static_5fconfig_5fudc_5fcivic_2eproto[0];
}
bool EndPointParameters_End_Point_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EndPointParameters_End_Point EndPointParameters::JOB_STATUS;
constexpr EndPointParameters_End_Point EndPointParameters::GEO_HASH;
constexpr EndPointParameters_End_Point EndPointParameters::SEND_UPLINK_PERSONAL;
constexpr EndPointParameters_End_Point EndPointParameters::SEND_UPLINK_CROWD;
constexpr EndPointParameters_End_Point EndPointParameters::End_Point_MIN;
constexpr EndPointParameters_End_Point EndPointParameters::End_Point_MAX;
constexpr int EndPointParameters::End_Point_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompressionTool_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
  return file_level_enum_descriptors_static_5fconfig_5fudc_5fcivic_2eproto[1];
}
bool CompressionTool_Type_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CompressionTool_Type CompressionTool::GZIP;
constexpr CompressionTool_Type CompressionTool::Type_MIN;
constexpr CompressionTool_Type CompressionTool::Type_MAX;
constexpr int CompressionTool::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncryptionTool_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
  return file_level_enum_descriptors_static_5fconfig_5fudc_5fcivic_2eproto[2];
}
bool EncryptionTool_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr EncryptionTool_Type EncryptionTool::AES;
constexpr EncryptionTool_Type EncryptionTool::RSA;
constexpr EncryptionTool_Type EncryptionTool::Type_MIN;
constexpr EncryptionTool_Type EncryptionTool::Type_MAX;
constexpr int EncryptionTool::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GeoHashTool_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_static_5fconfig_5fudc_5fcivic_2eproto);
  return file_level_enum_descriptors_static_5fconfig_5fudc_5fcivic_2eproto[3];
}
bool GeoHashTool_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr GeoHashTool_Type GeoHashTool::LEVEL1;
constexpr GeoHashTool_Type GeoHashTool::LEVEL2;
constexpr GeoHashTool_Type GeoHashTool::Type_MIN;
constexpr GeoHashTool_Type GeoHashTool::Type_MAX;
constexpr int GeoHashTool::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StaticConfig::InitAsDefaultInstance() {
  ::static_config_udc_civic::_StaticConfig_default_instance_._instance.get_mutable()->default_toolbox_settings_ = const_cast< ::static_config_udc_civic::DefaultToolSettings*>(
      ::static_config_udc_civic::DefaultToolSettings::internal_default_instance());
}
class StaticConfig::_Internal {
 public:
  static const ::static_config_udc_civic::DefaultToolSettings& default_toolbox_settings(const StaticConfig* msg);
};

const ::static_config_udc_civic::DefaultToolSettings&
StaticConfig::_Internal::default_toolbox_settings(const StaticConfig* msg) {
  return *msg->default_toolbox_settings_;
}
StaticConfig::StaticConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:static_config_udc_civic.StaticConfig)
}
StaticConfig::StaticConfig(const StaticConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      end_point_parameters_(from.end_point_parameters_),
      data_source_configs_(from.data_source_configs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_default_toolbox_settings()) {
    default_toolbox_settings_ = new ::static_config_udc_civic::DefaultToolSettings(*from.default_toolbox_settings_);
  } else {
    default_toolbox_settings_ = nullptr;
  }
  ::memcpy(&max_inactive_time_for_time_bound_jobs_, &from.max_inactive_time_for_time_bound_jobs_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_inactive_distance_for_geo_bound_jobs_) -
    reinterpret_cast<char*>(&max_inactive_time_for_time_bound_jobs_)) + sizeof(max_inactive_distance_for_geo_bound_jobs_));
  // @@protoc_insertion_point(copy_constructor:static_config_udc_civic.StaticConfig)
}

void StaticConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StaticConfig_static_5fconfig_5fudc_5fcivic_2eproto.base);
  ::memset(&default_toolbox_settings_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_inactive_distance_for_geo_bound_jobs_) -
      reinterpret_cast<char*>(&default_toolbox_settings_)) + sizeof(max_inactive_distance_for_geo_bound_jobs_));
}

StaticConfig::~StaticConfig() {
  // @@protoc_insertion_point(destructor:static_config_udc_civic.StaticConfig)
  SharedDtor();
}

void StaticConfig::SharedDtor() {
  if (this != internal_default_instance()) delete default_toolbox_settings_;
}

void StaticConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StaticConfig& StaticConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StaticConfig_static_5fconfig_5fudc_5fcivic_2eproto.base);
  return *internal_default_instance();
}


void StaticConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:static_config_udc_civic.StaticConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  end_point_parameters_.Clear();
  data_source_configs_.Clear();
  if (GetArenaNoVirtual() == nullptr && default_toolbox_settings_ != nullptr) {
    delete default_toolbox_settings_;
  }
  default_toolbox_settings_ = nullptr;
  ::memset(&max_inactive_time_for_time_bound_jobs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_inactive_distance_for_geo_bound_jobs_) -
      reinterpret_cast<char*>(&max_inactive_time_for_time_bound_jobs_)) + sizeof(max_inactive_distance_for_geo_bound_jobs_));
  _internal_metadata_.Clear();
}

const char* StaticConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .static_config_udc_civic.DefaultToolSettings default_toolbox_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_toolbox_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .static_config_udc_civic.EndPointParameters end_point_parameters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_end_point_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 max_inactive_time_for_time_bound_jobs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_inactive_time_for_time_bound_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_inactive_distance_for_geo_bound_jobs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          max_inactive_distance_for_geo_bound_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .static_config_udc_civic.DataSourceConfig data_source_configs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_source_configs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:static_config_udc_civic.StaticConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .static_config_udc_civic.DefaultToolSettings default_toolbox_settings = 1;
  if (this->has_default_toolbox_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::default_toolbox_settings(this), target, stream);
  }

  // repeated .static_config_udc_civic.EndPointParameters end_point_parameters = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_end_point_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_end_point_parameters(i), target, stream);
  }

  // int32 max_inactive_time_for_time_bound_jobs = 3;
  if (this->max_inactive_time_for_time_bound_jobs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_inactive_time_for_time_bound_jobs(), target);
  }

  // int32 max_inactive_distance_for_geo_bound_jobs = 4;
  if (this->max_inactive_distance_for_geo_bound_jobs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_inactive_distance_for_geo_bound_jobs(), target);
  }

  // repeated .static_config_udc_civic.DataSourceConfig data_source_configs = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_source_configs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_data_source_configs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:static_config_udc_civic.StaticConfig)
  return target;
}

size_t StaticConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:static_config_udc_civic.StaticConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .static_config_udc_civic.EndPointParameters end_point_parameters = 2;
  total_size += 1UL * this->_internal_end_point_parameters_size();
  for (const auto& msg : this->end_point_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .static_config_udc_civic.DataSourceConfig data_source_configs = 5;
  total_size += 1UL * this->_internal_data_source_configs_size();
  for (const auto& msg : this->data_source_configs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .static_config_udc_civic.DefaultToolSettings default_toolbox_settings = 1;
  if (this->has_default_toolbox_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *default_toolbox_settings_);
  }

  // int32 max_inactive_time_for_time_bound_jobs = 3;
  if (this->max_inactive_time_for_time_bound_jobs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_inactive_time_for_time_bound_jobs());
  }

  // int32 max_inactive_distance_for_geo_bound_jobs = 4;
  if (this->max_inactive_distance_for_geo_bound_jobs() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_inactive_distance_for_geo_bound_jobs());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StaticConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:static_config_udc_civic.StaticConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StaticConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:static_config_udc_civic.StaticConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:static_config_udc_civic.StaticConfig)
    MergeFrom(*source);
  }
}

void StaticConfig::MergeFrom(const StaticConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:static_config_udc_civic.StaticConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  end_point_parameters_.MergeFrom(from.end_point_parameters_);
  data_source_configs_.MergeFrom(from.data_source_configs_);
  if (from.has_default_toolbox_settings()) {
    _internal_mutable_default_toolbox_settings()->::static_config_udc_civic::DefaultToolSettings::MergeFrom(from._internal_default_toolbox_settings());
  }
  if (from.max_inactive_time_for_time_bound_jobs() != 0) {
    _internal_set_max_inactive_time_for_time_bound_jobs(from._internal_max_inactive_time_for_time_bound_jobs());
  }
  if (from.max_inactive_distance_for_geo_bound_jobs() != 0) {
    _internal_set_max_inactive_distance_for_geo_bound_jobs(from._internal_max_inactive_distance_for_geo_bound_jobs());
  }
}

void StaticConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:static_config_udc_civic.StaticConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticConfig::CopyFrom(const StaticConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:static_config_udc_civic.StaticConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticConfig::IsInitialized() const {
  return true;
}

void StaticConfig::InternalSwap(StaticConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  end_point_parameters_.InternalSwap(&other->end_point_parameters_);
  data_source_configs_.InternalSwap(&other->data_source_configs_);
  swap(default_toolbox_settings_, other->default_toolbox_settings_);
  swap(max_inactive_time_for_time_bound_jobs_, other->max_inactive_time_for_time_bound_jobs_);
  swap(max_inactive_distance_for_geo_bound_jobs_, other->max_inactive_distance_for_geo_bound_jobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndPointParameters::InitAsDefaultInstance() {
}
class EndPointParameters::_Internal {
 public:
};

EndPointParameters::EndPointParameters()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:static_config_udc_civic.EndPointParameters)
}
EndPointParameters::EndPointParameters(const EndPointParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  ::memcpy(&end_point_, &from.end_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_no_of_retries_) -
    reinterpret_cast<char*>(&end_point_)) + sizeof(max_no_of_retries_));
  // @@protoc_insertion_point(copy_constructor:static_config_udc_civic.EndPointParameters)
}

void EndPointParameters::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EndPointParameters_static_5fconfig_5fudc_5fcivic_2eproto.base);
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&end_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_no_of_retries_) -
      reinterpret_cast<char*>(&end_point_)) + sizeof(max_no_of_retries_));
}

EndPointParameters::~EndPointParameters() {
  // @@protoc_insertion_point(destructor:static_config_udc_civic.EndPointParameters)
  SharedDtor();
}

void EndPointParameters::SharedDtor() {
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EndPointParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndPointParameters& EndPointParameters::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndPointParameters_static_5fconfig_5fudc_5fcivic_2eproto.base);
  return *internal_default_instance();
}


void EndPointParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:static_config_udc_civic.EndPointParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&end_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_no_of_retries_) -
      reinterpret_cast<char*>(&end_point_)) + sizeof(max_no_of_retries_));
  _internal_metadata_.Clear();
}

const char* EndPointParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .static_config_udc_civic.EndPointParameters.End_Point end_point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_end_point(static_cast<::static_config_udc_civic::EndPointParameters_End_Point>(val));
        } else goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "static_config_udc_civic.EndPointParameters.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 initial_timeout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          initial_timeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double timeout_factor = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          timeout_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 max_timeout_interval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          max_timeout_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_no_of_retries = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          max_no_of_retries_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndPointParameters::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:static_config_udc_civic.EndPointParameters)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .static_config_udc_civic.EndPointParameters.End_Point end_point = 1;
  if (this->end_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_end_point(), target);
  }

  // string url = 2;
  if (this->url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "static_config_udc_civic.EndPointParameters.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // uint32 initial_timeout = 3;
  if (this->initial_timeout() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_initial_timeout(), target);
  }

  // double timeout_factor = 4;
  if (!(this->timeout_factor() <= 0 && this->timeout_factor() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_timeout_factor(), target);
  }

  // uint32 max_timeout_interval = 5;
  if (this->max_timeout_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_max_timeout_interval(), target);
  }

  // int32 max_no_of_retries = 6;
  if (this->max_no_of_retries() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_max_no_of_retries(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:static_config_udc_civic.EndPointParameters)
  return target;
}

size_t EndPointParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:static_config_udc_civic.EndPointParameters)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string url = 2;
  if (this->url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // .static_config_udc_civic.EndPointParameters.End_Point end_point = 1;
  if (this->end_point() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_end_point());
  }

  // uint32 initial_timeout = 3;
  if (this->initial_timeout() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_initial_timeout());
  }

  // double timeout_factor = 4;
  if (!(this->timeout_factor() <= 0 && this->timeout_factor() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 max_timeout_interval = 5;
  if (this->max_timeout_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_timeout_interval());
  }

  // int32 max_no_of_retries = 6;
  if (this->max_no_of_retries() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_no_of_retries());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndPointParameters::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:static_config_udc_civic.EndPointParameters)
  GOOGLE_DCHECK_NE(&from, this);
  const EndPointParameters* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndPointParameters>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:static_config_udc_civic.EndPointParameters)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:static_config_udc_civic.EndPointParameters)
    MergeFrom(*source);
  }
}

void EndPointParameters::MergeFrom(const EndPointParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:static_config_udc_civic.EndPointParameters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.url().size() > 0) {

    url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  if (from.end_point() != 0) {
    _internal_set_end_point(from._internal_end_point());
  }
  if (from.initial_timeout() != 0) {
    _internal_set_initial_timeout(from._internal_initial_timeout());
  }
  if (!(from.timeout_factor() <= 0 && from.timeout_factor() >= 0)) {
    _internal_set_timeout_factor(from._internal_timeout_factor());
  }
  if (from.max_timeout_interval() != 0) {
    _internal_set_max_timeout_interval(from._internal_max_timeout_interval());
  }
  if (from.max_no_of_retries() != 0) {
    _internal_set_max_no_of_retries(from._internal_max_no_of_retries());
  }
}

void EndPointParameters::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:static_config_udc_civic.EndPointParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPointParameters::CopyFrom(const EndPointParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:static_config_udc_civic.EndPointParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPointParameters::IsInitialized() const {
  return true;
}

void EndPointParameters::InternalSwap(EndPointParameters* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  url_.Swap(&other->url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(end_point_, other->end_point_);
  swap(initial_timeout_, other->initial_timeout_);
  swap(timeout_factor_, other->timeout_factor_);
  swap(max_timeout_interval_, other->max_timeout_interval_);
  swap(max_no_of_retries_, other->max_no_of_retries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPointParameters::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DefaultToolSettings::InitAsDefaultInstance() {
}
class DefaultToolSettings::_Internal {
 public:
};

DefaultToolSettings::DefaultToolSettings()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:static_config_udc_civic.DefaultToolSettings)
}
DefaultToolSettings::DefaultToolSettings(const DefaultToolSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      compression_tool_(from.compression_tool_),
      encryption_tool_(from.encryption_tool_),
      geo_hash_tool_(from.geo_hash_tool_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:static_config_udc_civic.DefaultToolSettings)
}

void DefaultToolSettings::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DefaultToolSettings_static_5fconfig_5fudc_5fcivic_2eproto.base);
}

DefaultToolSettings::~DefaultToolSettings() {
  // @@protoc_insertion_point(destructor:static_config_udc_civic.DefaultToolSettings)
  SharedDtor();
}

void DefaultToolSettings::SharedDtor() {
}

void DefaultToolSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DefaultToolSettings& DefaultToolSettings::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DefaultToolSettings_static_5fconfig_5fudc_5fcivic_2eproto.base);
  return *internal_default_instance();
}


void DefaultToolSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:static_config_udc_civic.DefaultToolSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compression_tool_.Clear();
  encryption_tool_.Clear();
  geo_hash_tool_.Clear();
  _internal_metadata_.Clear();
}

const char* DefaultToolSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .static_config_udc_civic.CompressionTool compression_tool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_compression_tool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .static_config_udc_civic.EncryptionTool encryption_tool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_encryption_tool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .static_config_udc_civic.GeoHashTool geo_hash_tool = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_hash_tool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DefaultToolSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:static_config_udc_civic.DefaultToolSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .static_config_udc_civic.CompressionTool compression_tool = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_compression_tool_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_compression_tool(i), target, stream);
  }

  // repeated .static_config_udc_civic.EncryptionTool encryption_tool = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_encryption_tool_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_encryption_tool(i), target, stream);
  }

  // repeated .static_config_udc_civic.GeoHashTool geo_hash_tool = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geo_hash_tool_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_geo_hash_tool(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:static_config_udc_civic.DefaultToolSettings)
  return target;
}

size_t DefaultToolSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:static_config_udc_civic.DefaultToolSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .static_config_udc_civic.CompressionTool compression_tool = 1;
  total_size += 1UL * this->_internal_compression_tool_size();
  for (const auto& msg : this->compression_tool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .static_config_udc_civic.EncryptionTool encryption_tool = 2;
  total_size += 1UL * this->_internal_encryption_tool_size();
  for (const auto& msg : this->encryption_tool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .static_config_udc_civic.GeoHashTool geo_hash_tool = 3;
  total_size += 1UL * this->_internal_geo_hash_tool_size();
  for (const auto& msg : this->geo_hash_tool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DefaultToolSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:static_config_udc_civic.DefaultToolSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const DefaultToolSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DefaultToolSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:static_config_udc_civic.DefaultToolSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:static_config_udc_civic.DefaultToolSettings)
    MergeFrom(*source);
  }
}

void DefaultToolSettings::MergeFrom(const DefaultToolSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:static_config_udc_civic.DefaultToolSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compression_tool_.MergeFrom(from.compression_tool_);
  encryption_tool_.MergeFrom(from.encryption_tool_);
  geo_hash_tool_.MergeFrom(from.geo_hash_tool_);
}

void DefaultToolSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:static_config_udc_civic.DefaultToolSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DefaultToolSettings::CopyFrom(const DefaultToolSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:static_config_udc_civic.DefaultToolSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DefaultToolSettings::IsInitialized() const {
  return true;
}

void DefaultToolSettings::InternalSwap(DefaultToolSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  compression_tool_.InternalSwap(&other->compression_tool_);
  encryption_tool_.InternalSwap(&other->encryption_tool_);
  geo_hash_tool_.InternalSwap(&other->geo_hash_tool_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DefaultToolSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompressionTool::InitAsDefaultInstance() {
}
class CompressionTool::_Internal {
 public:
};

CompressionTool::CompressionTool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:static_config_udc_civic.CompressionTool)
}
CompressionTool::CompressionTool(const CompressionTool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dpj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dpj_id().empty()) {
    dpj_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpj_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:static_config_udc_civic.CompressionTool)
}

void CompressionTool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompressionTool_static_5fconfig_5fudc_5fcivic_2eproto.base);
  dpj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

CompressionTool::~CompressionTool() {
  // @@protoc_insertion_point(destructor:static_config_udc_civic.CompressionTool)
  SharedDtor();
}

void CompressionTool::SharedDtor() {
  dpj_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CompressionTool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompressionTool& CompressionTool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompressionTool_static_5fconfig_5fudc_5fcivic_2eproto.base);
  return *internal_default_instance();
}


void CompressionTool::Clear() {
// @@protoc_insertion_point(message_clear_start:static_config_udc_civic.CompressionTool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dpj_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* CompressionTool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .static_config_udc_civic.CompressionTool.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::static_config_udc_civic::CompressionTool_Type>(val));
        } else goto handle_unusual;
        continue;
      // string dpj_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dpj_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "static_config_udc_civic.CompressionTool.dpj_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompressionTool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:static_config_udc_civic.CompressionTool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .static_config_udc_civic.CompressionTool.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string dpj_id = 2;
  if (this->dpj_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dpj_id().data(), static_cast<int>(this->_internal_dpj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "static_config_udc_civic.CompressionTool.dpj_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dpj_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:static_config_udc_civic.CompressionTool)
  return target;
}

size_t CompressionTool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:static_config_udc_civic.CompressionTool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dpj_id = 2;
  if (this->dpj_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dpj_id());
  }

  // .static_config_udc_civic.CompressionTool.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompressionTool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:static_config_udc_civic.CompressionTool)
  GOOGLE_DCHECK_NE(&from, this);
  const CompressionTool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompressionTool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:static_config_udc_civic.CompressionTool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:static_config_udc_civic.CompressionTool)
    MergeFrom(*source);
  }
}

void CompressionTool::MergeFrom(const CompressionTool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:static_config_udc_civic.CompressionTool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dpj_id().size() > 0) {

    dpj_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpj_id_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void CompressionTool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:static_config_udc_civic.CompressionTool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressionTool::CopyFrom(const CompressionTool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:static_config_udc_civic.CompressionTool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressionTool::IsInitialized() const {
  return true;
}

void CompressionTool::InternalSwap(CompressionTool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dpj_id_.Swap(&other->dpj_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompressionTool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EncryptionTool::InitAsDefaultInstance() {
}
class EncryptionTool::_Internal {
 public:
};

EncryptionTool::EncryptionTool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:static_config_udc_civic.EncryptionTool)
}
EncryptionTool::EncryptionTool(const EncryptionTool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dpj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dpj_id().empty()) {
    dpj_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpj_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:static_config_udc_civic.EncryptionTool)
}

void EncryptionTool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EncryptionTool_static_5fconfig_5fudc_5fcivic_2eproto.base);
  dpj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

EncryptionTool::~EncryptionTool() {
  // @@protoc_insertion_point(destructor:static_config_udc_civic.EncryptionTool)
  SharedDtor();
}

void EncryptionTool::SharedDtor() {
  dpj_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EncryptionTool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EncryptionTool& EncryptionTool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EncryptionTool_static_5fconfig_5fudc_5fcivic_2eproto.base);
  return *internal_default_instance();
}


void EncryptionTool::Clear() {
// @@protoc_insertion_point(message_clear_start:static_config_udc_civic.EncryptionTool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dpj_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* EncryptionTool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .static_config_udc_civic.EncryptionTool.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::static_config_udc_civic::EncryptionTool_Type>(val));
        } else goto handle_unusual;
        continue;
      // string dpj_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dpj_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "static_config_udc_civic.EncryptionTool.dpj_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EncryptionTool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:static_config_udc_civic.EncryptionTool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .static_config_udc_civic.EncryptionTool.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string dpj_id = 2;
  if (this->dpj_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dpj_id().data(), static_cast<int>(this->_internal_dpj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "static_config_udc_civic.EncryptionTool.dpj_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dpj_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:static_config_udc_civic.EncryptionTool)
  return target;
}

size_t EncryptionTool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:static_config_udc_civic.EncryptionTool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dpj_id = 2;
  if (this->dpj_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dpj_id());
  }

  // .static_config_udc_civic.EncryptionTool.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptionTool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:static_config_udc_civic.EncryptionTool)
  GOOGLE_DCHECK_NE(&from, this);
  const EncryptionTool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EncryptionTool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:static_config_udc_civic.EncryptionTool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:static_config_udc_civic.EncryptionTool)
    MergeFrom(*source);
  }
}

void EncryptionTool::MergeFrom(const EncryptionTool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:static_config_udc_civic.EncryptionTool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dpj_id().size() > 0) {

    dpj_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpj_id_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void EncryptionTool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:static_config_udc_civic.EncryptionTool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptionTool::CopyFrom(const EncryptionTool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:static_config_udc_civic.EncryptionTool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptionTool::IsInitialized() const {
  return true;
}

void EncryptionTool::InternalSwap(EncryptionTool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dpj_id_.Swap(&other->dpj_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EncryptionTool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoHashTool::InitAsDefaultInstance() {
}
class GeoHashTool::_Internal {
 public:
};

GeoHashTool::GeoHashTool()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:static_config_udc_civic.GeoHashTool)
}
GeoHashTool::GeoHashTool(const GeoHashTool& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dpj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dpj_id().empty()) {
    dpj_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpj_id_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:static_config_udc_civic.GeoHashTool)
}

void GeoHashTool::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoHashTool_static_5fconfig_5fudc_5fcivic_2eproto.base);
  dpj_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

GeoHashTool::~GeoHashTool() {
  // @@protoc_insertion_point(destructor:static_config_udc_civic.GeoHashTool)
  SharedDtor();
}

void GeoHashTool::SharedDtor() {
  dpj_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GeoHashTool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoHashTool& GeoHashTool::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoHashTool_static_5fconfig_5fudc_5fcivic_2eproto.base);
  return *internal_default_instance();
}


void GeoHashTool::Clear() {
// @@protoc_insertion_point(message_clear_start:static_config_udc_civic.GeoHashTool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dpj_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _internal_metadata_.Clear();
}

const char* GeoHashTool::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .static_config_udc_civic.GeoHashTool.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::static_config_udc_civic::GeoHashTool_Type>(val));
        } else goto handle_unusual;
        continue;
      // string dpj_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_dpj_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "static_config_udc_civic.GeoHashTool.dpj_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoHashTool::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:static_config_udc_civic.GeoHashTool)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .static_config_udc_civic.GeoHashTool.Type type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string dpj_id = 2;
  if (this->dpj_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dpj_id().data(), static_cast<int>(this->_internal_dpj_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "static_config_udc_civic.GeoHashTool.dpj_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dpj_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:static_config_udc_civic.GeoHashTool)
  return target;
}

size_t GeoHashTool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:static_config_udc_civic.GeoHashTool)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dpj_id = 2;
  if (this->dpj_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dpj_id());
  }

  // .static_config_udc_civic.GeoHashTool.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoHashTool::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:static_config_udc_civic.GeoHashTool)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoHashTool* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoHashTool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:static_config_udc_civic.GeoHashTool)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:static_config_udc_civic.GeoHashTool)
    MergeFrom(*source);
  }
}

void GeoHashTool::MergeFrom(const GeoHashTool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:static_config_udc_civic.GeoHashTool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dpj_id().size() > 0) {

    dpj_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpj_id_);
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void GeoHashTool::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:static_config_udc_civic.GeoHashTool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoHashTool::CopyFrom(const GeoHashTool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:static_config_udc_civic.GeoHashTool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoHashTool::IsInitialized() const {
  return true;
}

void GeoHashTool::InternalSwap(GeoHashTool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dpj_id_.Swap(&other->dpj_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoHashTool::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataSourceConfig::InitAsDefaultInstance() {
  ::static_config_udc_civic::_DataSourceConfig_default_instance_._instance.get_mutable()->collectd_config_ = const_cast< ::static_config_udc_civic::CollectdConfig*>(
      ::static_config_udc_civic::CollectdConfig::internal_default_instance());
}
class DataSourceConfig::_Internal {
 public:
  static const ::static_config_udc_civic::CollectdConfig& collectd_config(const DataSourceConfig* msg);
};

const ::static_config_udc_civic::CollectdConfig&
DataSourceConfig::_Internal::collectd_config(const DataSourceConfig* msg) {
  return *msg->collectd_config_;
}
DataSourceConfig::DataSourceConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:static_config_udc_civic.DataSourceConfig)
}
DataSourceConfig::DataSourceConfig(const DataSourceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_collectd_config()) {
    collectd_config_ = new ::static_config_udc_civic::CollectdConfig(*from.collectd_config_);
  } else {
    collectd_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:static_config_udc_civic.DataSourceConfig)
}

void DataSourceConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataSourceConfig_static_5fconfig_5fudc_5fcivic_2eproto.base);
  collectd_config_ = nullptr;
}

DataSourceConfig::~DataSourceConfig() {
  // @@protoc_insertion_point(destructor:static_config_udc_civic.DataSourceConfig)
  SharedDtor();
}

void DataSourceConfig::SharedDtor() {
  if (this != internal_default_instance()) delete collectd_config_;
}

void DataSourceConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSourceConfig& DataSourceConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSourceConfig_static_5fconfig_5fudc_5fcivic_2eproto.base);
  return *internal_default_instance();
}


void DataSourceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:static_config_udc_civic.DataSourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && collectd_config_ != nullptr) {
    delete collectd_config_;
  }
  collectd_config_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DataSourceConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .static_config_udc_civic.CollectdConfig collectd_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_collectd_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSourceConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:static_config_udc_civic.DataSourceConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .static_config_udc_civic.CollectdConfig collectd_config = 1;
  if (this->has_collectd_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::collectd_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:static_config_udc_civic.DataSourceConfig)
  return target;
}

size_t DataSourceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:static_config_udc_civic.DataSourceConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .static_config_udc_civic.CollectdConfig collectd_config = 1;
  if (this->has_collectd_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *collectd_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSourceConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:static_config_udc_civic.DataSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSourceConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSourceConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:static_config_udc_civic.DataSourceConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:static_config_udc_civic.DataSourceConfig)
    MergeFrom(*source);
  }
}

void DataSourceConfig::MergeFrom(const DataSourceConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:static_config_udc_civic.DataSourceConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_collectd_config()) {
    _internal_mutable_collectd_config()->::static_config_udc_civic::CollectdConfig::MergeFrom(from._internal_collectd_config());
  }
}

void DataSourceConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:static_config_udc_civic.DataSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSourceConfig::CopyFrom(const DataSourceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:static_config_udc_civic.DataSourceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSourceConfig::IsInitialized() const {
  return true;
}

void DataSourceConfig::InternalSwap(DataSourceConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(collectd_config_, other->collectd_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSourceConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectdConfig::InitAsDefaultInstance() {
}
class CollectdConfig::_Internal {
 public:
};

CollectdConfig::CollectdConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:static_config_udc_civic.CollectdConfig)
}
CollectdConfig::CollectdConfig(const CollectdConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collectd_sockfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_collectd_sockfile().empty()) {
    collectd_sockfile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collectd_sockfile_);
  }
  // @@protoc_insertion_point(copy_constructor:static_config_udc_civic.CollectdConfig)
}

void CollectdConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectdConfig_static_5fconfig_5fudc_5fcivic_2eproto.base);
  collectd_sockfile_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CollectdConfig::~CollectdConfig() {
  // @@protoc_insertion_point(destructor:static_config_udc_civic.CollectdConfig)
  SharedDtor();
}

void CollectdConfig::SharedDtor() {
  collectd_sockfile_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CollectdConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectdConfig& CollectdConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectdConfig_static_5fconfig_5fudc_5fcivic_2eproto.base);
  return *internal_default_instance();
}


void CollectdConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:static_config_udc_civic.CollectdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collectd_sockfile_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CollectdConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string collectd_sockfile = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_collectd_sockfile();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "static_config_udc_civic.CollectdConfig.collectd_sockfile"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectdConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:static_config_udc_civic.CollectdConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string collectd_sockfile = 1;
  if (this->collectd_sockfile().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_collectd_sockfile().data(), static_cast<int>(this->_internal_collectd_sockfile().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "static_config_udc_civic.CollectdConfig.collectd_sockfile");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_collectd_sockfile(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:static_config_udc_civic.CollectdConfig)
  return target;
}

size_t CollectdConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:static_config_udc_civic.CollectdConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string collectd_sockfile = 1;
  if (this->collectd_sockfile().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_collectd_sockfile());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectdConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:static_config_udc_civic.CollectdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectdConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectdConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:static_config_udc_civic.CollectdConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:static_config_udc_civic.CollectdConfig)
    MergeFrom(*source);
  }
}

void CollectdConfig::MergeFrom(const CollectdConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:static_config_udc_civic.CollectdConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.collectd_sockfile().size() > 0) {

    collectd_sockfile_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.collectd_sockfile_);
  }
}

void CollectdConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:static_config_udc_civic.CollectdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectdConfig::CopyFrom(const CollectdConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:static_config_udc_civic.CollectdConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectdConfig::IsInitialized() const {
  return true;
}

void CollectdConfig::InternalSwap(CollectdConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collectd_sockfile_.Swap(&other->collectd_sockfile_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectdConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace static_config_udc_civic
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::static_config_udc_civic::StaticConfig* Arena::CreateMaybeMessage< ::static_config_udc_civic::StaticConfig >(Arena* arena) {
  return Arena::CreateInternal< ::static_config_udc_civic::StaticConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::static_config_udc_civic::EndPointParameters* Arena::CreateMaybeMessage< ::static_config_udc_civic::EndPointParameters >(Arena* arena) {
  return Arena::CreateInternal< ::static_config_udc_civic::EndPointParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::static_config_udc_civic::DefaultToolSettings* Arena::CreateMaybeMessage< ::static_config_udc_civic::DefaultToolSettings >(Arena* arena) {
  return Arena::CreateInternal< ::static_config_udc_civic::DefaultToolSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::static_config_udc_civic::CompressionTool* Arena::CreateMaybeMessage< ::static_config_udc_civic::CompressionTool >(Arena* arena) {
  return Arena::CreateInternal< ::static_config_udc_civic::CompressionTool >(arena);
}
template<> PROTOBUF_NOINLINE ::static_config_udc_civic::EncryptionTool* Arena::CreateMaybeMessage< ::static_config_udc_civic::EncryptionTool >(Arena* arena) {
  return Arena::CreateInternal< ::static_config_udc_civic::EncryptionTool >(arena);
}
template<> PROTOBUF_NOINLINE ::static_config_udc_civic::GeoHashTool* Arena::CreateMaybeMessage< ::static_config_udc_civic::GeoHashTool >(Arena* arena) {
  return Arena::CreateInternal< ::static_config_udc_civic::GeoHashTool >(arena);
}
template<> PROTOBUF_NOINLINE ::static_config_udc_civic::DataSourceConfig* Arena::CreateMaybeMessage< ::static_config_udc_civic::DataSourceConfig >(Arena* arena) {
  return Arena::CreateInternal< ::static_config_udc_civic::DataSourceConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::static_config_udc_civic::CollectdConfig* Arena::CreateMaybeMessage< ::static_config_udc_civic::CollectdConfig >(Arena* arena) {
  return Arena::CreateInternal< ::static_config_udc_civic::CollectdConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
