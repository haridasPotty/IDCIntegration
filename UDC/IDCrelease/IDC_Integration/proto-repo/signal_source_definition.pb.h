// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: signal_source_definition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_signal_5fsource_5fdefinition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_signal_5fsource_5fdefinition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_signal_5fsource_5fdefinition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_signal_5fsource_5fdefinition_2eproto;
namespace signal_source_definition {
class CanSource;
class CanSourceDefaultTypeInternal;
extern CanSourceDefaultTypeInternal _CanSource_default_instance_;
class CollectdSource;
class CollectdSourceDefaultTypeInternal;
extern CollectdSourceDefaultTypeInternal _CollectdSource_default_instance_;
class DataMembers;
class DataMembersDefaultTypeInternal;
extern DataMembersDefaultTypeInternal _DataMembers_default_instance_;
class DefaultSource;
class DefaultSourceDefaultTypeInternal;
extern DefaultSourceDefaultTypeInternal _DefaultSource_default_instance_;
class EELSource;
class EELSourceDefaultTypeInternal;
extern EELSourceDefaultTypeInternal _EELSource_default_instance_;
class Element;
class ElementDefaultTypeInternal;
extern ElementDefaultTypeInternal _Element_default_instance_;
class EthernetSource;
class EthernetSourceDefaultTypeInternal;
extern EthernetSourceDefaultTypeInternal _EthernetSource_default_instance_;
class EventGroup;
class EventGroupDefaultTypeInternal;
extern EventGroupDefaultTypeInternal _EventGroup_default_instance_;
class InternalSource;
class InternalSourceDefaultTypeInternal;
extern InternalSourceDefaultTypeInternal _InternalSource_default_instance_;
class LinSource;
class LinSourceDefaultTypeInternal;
extern LinSourceDefaultTypeInternal _LinSource_default_instance_;
class NetworkSource;
class NetworkSourceDefaultTypeInternal;
extern NetworkSourceDefaultTypeInternal _NetworkSource_default_instance_;
class Parameters;
class ParametersDefaultTypeInternal;
extern ParametersDefaultTypeInternal _Parameters_default_instance_;
class ProcessingToolboxSource;
class ProcessingToolboxSourceDefaultTypeInternal;
extern ProcessingToolboxSourceDefaultTypeInternal _ProcessingToolboxSource_default_instance_;
class SamplingRate;
class SamplingRateDefaultTypeInternal;
extern SamplingRateDefaultTypeInternal _SamplingRate_default_instance_;
class Scaling;
class ScalingDefaultTypeInternal;
extern ScalingDefaultTypeInternal _Scaling_default_instance_;
class SternbildAPI;
class SternbildAPIDefaultTypeInternal;
extern SternbildAPIDefaultTypeInternal _SternbildAPI_default_instance_;
class ThriftmeSource;
class ThriftmeSourceDefaultTypeInternal;
extern ThriftmeSourceDefaultTypeInternal _ThriftmeSource_default_instance_;
class ThriftmeSourceActive;
class ThriftmeSourceActiveDefaultTypeInternal;
extern ThriftmeSourceActiveDefaultTypeInternal _ThriftmeSourceActive_default_instance_;
class ToolMetadata;
class ToolMetadataDefaultTypeInternal;
extern ToolMetadataDefaultTypeInternal _ToolMetadata_default_instance_;
}  // namespace signal_source_definition
PROTOBUF_NAMESPACE_OPEN
template<> ::signal_source_definition::CanSource* Arena::CreateMaybeMessage<::signal_source_definition::CanSource>(Arena*);
template<> ::signal_source_definition::CollectdSource* Arena::CreateMaybeMessage<::signal_source_definition::CollectdSource>(Arena*);
template<> ::signal_source_definition::DataMembers* Arena::CreateMaybeMessage<::signal_source_definition::DataMembers>(Arena*);
template<> ::signal_source_definition::DefaultSource* Arena::CreateMaybeMessage<::signal_source_definition::DefaultSource>(Arena*);
template<> ::signal_source_definition::EELSource* Arena::CreateMaybeMessage<::signal_source_definition::EELSource>(Arena*);
template<> ::signal_source_definition::Element* Arena::CreateMaybeMessage<::signal_source_definition::Element>(Arena*);
template<> ::signal_source_definition::EthernetSource* Arena::CreateMaybeMessage<::signal_source_definition::EthernetSource>(Arena*);
template<> ::signal_source_definition::EventGroup* Arena::CreateMaybeMessage<::signal_source_definition::EventGroup>(Arena*);
template<> ::signal_source_definition::InternalSource* Arena::CreateMaybeMessage<::signal_source_definition::InternalSource>(Arena*);
template<> ::signal_source_definition::LinSource* Arena::CreateMaybeMessage<::signal_source_definition::LinSource>(Arena*);
template<> ::signal_source_definition::NetworkSource* Arena::CreateMaybeMessage<::signal_source_definition::NetworkSource>(Arena*);
template<> ::signal_source_definition::Parameters* Arena::CreateMaybeMessage<::signal_source_definition::Parameters>(Arena*);
template<> ::signal_source_definition::ProcessingToolboxSource* Arena::CreateMaybeMessage<::signal_source_definition::ProcessingToolboxSource>(Arena*);
template<> ::signal_source_definition::SamplingRate* Arena::CreateMaybeMessage<::signal_source_definition::SamplingRate>(Arena*);
template<> ::signal_source_definition::Scaling* Arena::CreateMaybeMessage<::signal_source_definition::Scaling>(Arena*);
template<> ::signal_source_definition::SternbildAPI* Arena::CreateMaybeMessage<::signal_source_definition::SternbildAPI>(Arena*);
template<> ::signal_source_definition::ThriftmeSource* Arena::CreateMaybeMessage<::signal_source_definition::ThriftmeSource>(Arena*);
template<> ::signal_source_definition::ThriftmeSourceActive* Arena::CreateMaybeMessage<::signal_source_definition::ThriftmeSourceActive>(Arena*);
template<> ::signal_source_definition::ToolMetadata* Arena::CreateMaybeMessage<::signal_source_definition::ToolMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace signal_source_definition {

enum CollectdSource_CommandTypeEnum : int {
  CollectdSource_CommandTypeEnum_Undefined = 0,
  CollectdSource_CommandTypeEnum_Getval = 1,
  CollectdSource_CommandTypeEnum_Listval = 2,
  CollectdSource_CommandTypeEnum_CollectdSource_CommandTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CollectdSource_CommandTypeEnum_CollectdSource_CommandTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CollectdSource_CommandTypeEnum_IsValid(int value);
constexpr CollectdSource_CommandTypeEnum CollectdSource_CommandTypeEnum_CommandTypeEnum_MIN = CollectdSource_CommandTypeEnum_Undefined;
constexpr CollectdSource_CommandTypeEnum CollectdSource_CommandTypeEnum_CommandTypeEnum_MAX = CollectdSource_CommandTypeEnum_Listval;
constexpr int CollectdSource_CommandTypeEnum_CommandTypeEnum_ARRAYSIZE = CollectdSource_CommandTypeEnum_CommandTypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CollectdSource_CommandTypeEnum_descriptor();
template<typename T>
inline const std::string& CollectdSource_CommandTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CollectdSource_CommandTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CollectdSource_CommandTypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CollectdSource_CommandTypeEnum_descriptor(), enum_t_value);
}
inline bool CollectdSource_CommandTypeEnum_Parse(
    const std::string& name, CollectdSource_CommandTypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CollectdSource_CommandTypeEnum>(
    CollectdSource_CommandTypeEnum_descriptor(), name, value);
}
enum ToolMetadata_INPUTCONFIG : int {
  ToolMetadata_INPUTCONFIG_TYPE_A = 0,
  ToolMetadata_INPUTCONFIG_TYPE_B = 1,
  ToolMetadata_INPUTCONFIG_TYPE_C = 2,
  ToolMetadata_INPUTCONFIG_TYPE_D = 3,
  ToolMetadata_INPUTCONFIG_ToolMetadata_INPUTCONFIG_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ToolMetadata_INPUTCONFIG_ToolMetadata_INPUTCONFIG_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ToolMetadata_INPUTCONFIG_IsValid(int value);
constexpr ToolMetadata_INPUTCONFIG ToolMetadata_INPUTCONFIG_INPUTCONFIG_MIN = ToolMetadata_INPUTCONFIG_TYPE_A;
constexpr ToolMetadata_INPUTCONFIG ToolMetadata_INPUTCONFIG_INPUTCONFIG_MAX = ToolMetadata_INPUTCONFIG_TYPE_D;
constexpr int ToolMetadata_INPUTCONFIG_INPUTCONFIG_ARRAYSIZE = ToolMetadata_INPUTCONFIG_INPUTCONFIG_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToolMetadata_INPUTCONFIG_descriptor();
template<typename T>
inline const std::string& ToolMetadata_INPUTCONFIG_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ToolMetadata_INPUTCONFIG>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ToolMetadata_INPUTCONFIG_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ToolMetadata_INPUTCONFIG_descriptor(), enum_t_value);
}
inline bool ToolMetadata_INPUTCONFIG_Parse(
    const std::string& name, ToolMetadata_INPUTCONFIG* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ToolMetadata_INPUTCONFIG>(
    ToolMetadata_INPUTCONFIG_descriptor(), name, value);
}
enum ToolMetadata_FAILSAFE : int {
  ToolMetadata_FAILSAFE_UNDEFINED = 0,
  ToolMetadata_FAILSAFE_SKIP = 1,
  ToolMetadata_FAILSAFE_CAPTURE_RAW = 2,
  ToolMetadata_FAILSAFE_ToolMetadata_FAILSAFE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ToolMetadata_FAILSAFE_ToolMetadata_FAILSAFE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ToolMetadata_FAILSAFE_IsValid(int value);
constexpr ToolMetadata_FAILSAFE ToolMetadata_FAILSAFE_FAILSAFE_MIN = ToolMetadata_FAILSAFE_UNDEFINED;
constexpr ToolMetadata_FAILSAFE ToolMetadata_FAILSAFE_FAILSAFE_MAX = ToolMetadata_FAILSAFE_CAPTURE_RAW;
constexpr int ToolMetadata_FAILSAFE_FAILSAFE_ARRAYSIZE = ToolMetadata_FAILSAFE_FAILSAFE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ToolMetadata_FAILSAFE_descriptor();
template<typename T>
inline const std::string& ToolMetadata_FAILSAFE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ToolMetadata_FAILSAFE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ToolMetadata_FAILSAFE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ToolMetadata_FAILSAFE_descriptor(), enum_t_value);
}
inline bool ToolMetadata_FAILSAFE_Parse(
    const std::string& name, ToolMetadata_FAILSAFE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ToolMetadata_FAILSAFE>(
    ToolMetadata_FAILSAFE_descriptor(), name, value);
}
enum ThriftmeSource_MessageTypeEnum : int {
  ThriftmeSource_MessageTypeEnum_THRIFTME_CALL = 0,
  ThriftmeSource_MessageTypeEnum_THRIFTME_REPLY = 1,
  ThriftmeSource_MessageTypeEnum_THRIFTME_EXCEPTION = 2,
  ThriftmeSource_MessageTypeEnum_THRIFTME_ONEWAY = 3,
  ThriftmeSource_MessageTypeEnum_THRIFTME_EVENT = 4,
  ThriftmeSource_MessageTypeEnum_ThriftmeSource_MessageTypeEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ThriftmeSource_MessageTypeEnum_ThriftmeSource_MessageTypeEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ThriftmeSource_MessageTypeEnum_IsValid(int value);
constexpr ThriftmeSource_MessageTypeEnum ThriftmeSource_MessageTypeEnum_MessageTypeEnum_MIN = ThriftmeSource_MessageTypeEnum_THRIFTME_CALL;
constexpr ThriftmeSource_MessageTypeEnum ThriftmeSource_MessageTypeEnum_MessageTypeEnum_MAX = ThriftmeSource_MessageTypeEnum_THRIFTME_EVENT;
constexpr int ThriftmeSource_MessageTypeEnum_MessageTypeEnum_ARRAYSIZE = ThriftmeSource_MessageTypeEnum_MessageTypeEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ThriftmeSource_MessageTypeEnum_descriptor();
template<typename T>
inline const std::string& ThriftmeSource_MessageTypeEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ThriftmeSource_MessageTypeEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ThriftmeSource_MessageTypeEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ThriftmeSource_MessageTypeEnum_descriptor(), enum_t_value);
}
inline bool ThriftmeSource_MessageTypeEnum_Parse(
    const std::string& name, ThriftmeSource_MessageTypeEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ThriftmeSource_MessageTypeEnum>(
    ThriftmeSource_MessageTypeEnum_descriptor(), name, value);
}
// ===================================================================

class DefaultSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.DefaultSource) */ {
 public:
  DefaultSource();
  virtual ~DefaultSource();

  DefaultSource(const DefaultSource& from);
  DefaultSource(DefaultSource&& from) noexcept
    : DefaultSource() {
    *this = ::std::move(from);
  }

  inline DefaultSource& operator=(const DefaultSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline DefaultSource& operator=(DefaultSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DefaultSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefaultSource* internal_default_instance() {
    return reinterpret_cast<const DefaultSource*>(
               &_DefaultSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DefaultSource& a, DefaultSource& b) {
    a.Swap(&b);
  }
  inline void Swap(DefaultSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DefaultSource* New() const final {
    return CreateMaybeMessage<DefaultSource>(nullptr);
  }

  DefaultSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DefaultSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DefaultSource& from);
  void MergeFrom(const DefaultSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.DefaultSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalNameFieldNumber = 1,
  };
  // string signal_name = 1;
  void clear_signal_name();
  const std::string& signal_name() const;
  void set_signal_name(const std::string& value);
  void set_signal_name(std::string&& value);
  void set_signal_name(const char* value);
  void set_signal_name(const char* value, size_t size);
  std::string* mutable_signal_name();
  std::string* release_signal_name();
  void set_allocated_signal_name(std::string* signal_name);
  private:
  const std::string& _internal_signal_name() const;
  void _internal_set_signal_name(const std::string& value);
  std::string* _internal_mutable_signal_name();
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.DefaultSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class CollectdSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.CollectdSource) */ {
 public:
  CollectdSource();
  virtual ~CollectdSource();

  CollectdSource(const CollectdSource& from);
  CollectdSource(CollectdSource&& from) noexcept
    : CollectdSource() {
    *this = ::std::move(from);
  }

  inline CollectdSource& operator=(const CollectdSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CollectdSource& operator=(CollectdSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CollectdSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollectdSource* internal_default_instance() {
    return reinterpret_cast<const CollectdSource*>(
               &_CollectdSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CollectdSource& a, CollectdSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CollectdSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CollectdSource* New() const final {
    return CreateMaybeMessage<CollectdSource>(nullptr);
  }

  CollectdSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CollectdSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CollectdSource& from);
  void MergeFrom(const CollectdSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollectdSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.CollectdSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CollectdSource_CommandTypeEnum CommandTypeEnum;
  static constexpr CommandTypeEnum Undefined =
    CollectdSource_CommandTypeEnum_Undefined;
  static constexpr CommandTypeEnum Getval =
    CollectdSource_CommandTypeEnum_Getval;
  static constexpr CommandTypeEnum Listval =
    CollectdSource_CommandTypeEnum_Listval;
  static inline bool CommandTypeEnum_IsValid(int value) {
    return CollectdSource_CommandTypeEnum_IsValid(value);
  }
  static constexpr CommandTypeEnum CommandTypeEnum_MIN =
    CollectdSource_CommandTypeEnum_CommandTypeEnum_MIN;
  static constexpr CommandTypeEnum CommandTypeEnum_MAX =
    CollectdSource_CommandTypeEnum_CommandTypeEnum_MAX;
  static constexpr int CommandTypeEnum_ARRAYSIZE =
    CollectdSource_CommandTypeEnum_CommandTypeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandTypeEnum_descriptor() {
    return CollectdSource_CommandTypeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandTypeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandTypeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandTypeEnum_Name.");
    return CollectdSource_CommandTypeEnum_Name(enum_t_value);
  }
  static inline bool CommandTypeEnum_Parse(const std::string& name,
      CommandTypeEnum* value) {
    return CollectdSource_CommandTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 2,
    kDataSourceNameFieldNumber = 3,
    kCommandtypeFieldNumber = 1,
  };
  // string identifier = 2;
  void clear_identifier();
  const std::string& identifier() const;
  void set_identifier(const std::string& value);
  void set_identifier(std::string&& value);
  void set_identifier(const char* value);
  void set_identifier(const char* value, size_t size);
  std::string* mutable_identifier();
  std::string* release_identifier();
  void set_allocated_identifier(std::string* identifier);
  private:
  const std::string& _internal_identifier() const;
  void _internal_set_identifier(const std::string& value);
  std::string* _internal_mutable_identifier();
  public:

  // string DataSourceName = 3;
  void clear_datasourcename();
  const std::string& datasourcename() const;
  void set_datasourcename(const std::string& value);
  void set_datasourcename(std::string&& value);
  void set_datasourcename(const char* value);
  void set_datasourcename(const char* value, size_t size);
  std::string* mutable_datasourcename();
  std::string* release_datasourcename();
  void set_allocated_datasourcename(std::string* datasourcename);
  private:
  const std::string& _internal_datasourcename() const;
  void _internal_set_datasourcename(const std::string& value);
  std::string* _internal_mutable_datasourcename();
  public:

  // .signal_source_definition.CollectdSource.CommandTypeEnum commandtype = 1;
  void clear_commandtype();
  ::signal_source_definition::CollectdSource_CommandTypeEnum commandtype() const;
  void set_commandtype(::signal_source_definition::CollectdSource_CommandTypeEnum value);
  private:
  ::signal_source_definition::CollectdSource_CommandTypeEnum _internal_commandtype() const;
  void _internal_set_commandtype(::signal_source_definition::CollectdSource_CommandTypeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.CollectdSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datasourcename_;
  int commandtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class EELSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.EELSource) */ {
 public:
  EELSource();
  virtual ~EELSource();

  EELSource(const EELSource& from);
  EELSource(EELSource&& from) noexcept
    : EELSource() {
    *this = ::std::move(from);
  }

  inline EELSource& operator=(const EELSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline EELSource& operator=(EELSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EELSource& default_instance();

  enum FileNameCase {
    kExactFilename = 2,
    kRegexFilename = 3,
    FILE_NAME_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EELSource* internal_default_instance() {
    return reinterpret_cast<const EELSource*>(
               &_EELSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EELSource& a, EELSource& b) {
    a.Swap(&b);
  }
  inline void Swap(EELSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EELSource* New() const final {
    return CreateMaybeMessage<EELSource>(nullptr);
  }

  EELSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EELSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EELSource& from);
  void MergeFrom(const EELSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EELSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.EELSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAbsoluteDirectoryPathFieldNumber = 1,
    kFileTypeFieldNumber = 4,
    kExactFilenameFieldNumber = 2,
    kRegexFilenameFieldNumber = 3,
  };
  // string absolute_directory_path = 1;
  void clear_absolute_directory_path();
  const std::string& absolute_directory_path() const;
  void set_absolute_directory_path(const std::string& value);
  void set_absolute_directory_path(std::string&& value);
  void set_absolute_directory_path(const char* value);
  void set_absolute_directory_path(const char* value, size_t size);
  std::string* mutable_absolute_directory_path();
  std::string* release_absolute_directory_path();
  void set_allocated_absolute_directory_path(std::string* absolute_directory_path);
  private:
  const std::string& _internal_absolute_directory_path() const;
  void _internal_set_absolute_directory_path(const std::string& value);
  std::string* _internal_mutable_absolute_directory_path();
  public:

  // string file_type = 4;
  void clear_file_type();
  const std::string& file_type() const;
  void set_file_type(const std::string& value);
  void set_file_type(std::string&& value);
  void set_file_type(const char* value);
  void set_file_type(const char* value, size_t size);
  std::string* mutable_file_type();
  std::string* release_file_type();
  void set_allocated_file_type(std::string* file_type);
  private:
  const std::string& _internal_file_type() const;
  void _internal_set_file_type(const std::string& value);
  std::string* _internal_mutable_file_type();
  public:

  // string exact_filename = 2;
  private:
  bool _internal_has_exact_filename() const;
  public:
  void clear_exact_filename();
  const std::string& exact_filename() const;
  void set_exact_filename(const std::string& value);
  void set_exact_filename(std::string&& value);
  void set_exact_filename(const char* value);
  void set_exact_filename(const char* value, size_t size);
  std::string* mutable_exact_filename();
  std::string* release_exact_filename();
  void set_allocated_exact_filename(std::string* exact_filename);
  private:
  const std::string& _internal_exact_filename() const;
  void _internal_set_exact_filename(const std::string& value);
  std::string* _internal_mutable_exact_filename();
  public:

  // string regex_filename = 3;
  private:
  bool _internal_has_regex_filename() const;
  public:
  void clear_regex_filename();
  const std::string& regex_filename() const;
  void set_regex_filename(const std::string& value);
  void set_regex_filename(std::string&& value);
  void set_regex_filename(const char* value);
  void set_regex_filename(const char* value, size_t size);
  std::string* mutable_regex_filename();
  std::string* release_regex_filename();
  void set_allocated_regex_filename(std::string* regex_filename);
  private:
  const std::string& _internal_regex_filename() const;
  void _internal_set_regex_filename(const std::string& value);
  std::string* _internal_mutable_regex_filename();
  public:

  void clear_file_name();
  FileNameCase file_name_case() const;
  // @@protoc_insertion_point(class_scope:signal_source_definition.EELSource)
 private:
  class _Internal;
  void set_has_exact_filename();
  void set_has_regex_filename();

  inline bool has_file_name() const;
  inline void clear_has_file_name();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr absolute_directory_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_type_;
  union FileNameUnion {
    FileNameUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr exact_filename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_filename_;
  } file_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class CanSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.CanSource) */ {
 public:
  CanSource();
  virtual ~CanSource();

  CanSource(const CanSource& from);
  CanSource(CanSource&& from) noexcept
    : CanSource() {
    *this = ::std::move(from);
  }

  inline CanSource& operator=(const CanSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanSource& operator=(CanSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CanSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanSource* internal_default_instance() {
    return reinterpret_cast<const CanSource*>(
               &_CanSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CanSource& a, CanSource& b) {
    a.Swap(&b);
  }
  inline void Swap(CanSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CanSource* New() const final {
    return CreateMaybeMessage<CanSource>(nullptr);
  }

  CanSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CanSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CanSource& from);
  void MergeFrom(const CanSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.CanSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNameFieldNumber = 1,
    kSourceVersionFieldNumber = 2,
    kFrameNameFieldNumber = 3,
    kSignalNameFieldNumber = 4,
  };
  // string source_name = 1;
  void clear_source_name();
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // string source_version = 2;
  void clear_source_version();
  const std::string& source_version() const;
  void set_source_version(const std::string& value);
  void set_source_version(std::string&& value);
  void set_source_version(const char* value);
  void set_source_version(const char* value, size_t size);
  std::string* mutable_source_version();
  std::string* release_source_version();
  void set_allocated_source_version(std::string* source_version);
  private:
  const std::string& _internal_source_version() const;
  void _internal_set_source_version(const std::string& value);
  std::string* _internal_mutable_source_version();
  public:

  // string frame_name = 3;
  void clear_frame_name();
  const std::string& frame_name() const;
  void set_frame_name(const std::string& value);
  void set_frame_name(std::string&& value);
  void set_frame_name(const char* value);
  void set_frame_name(const char* value, size_t size);
  std::string* mutable_frame_name();
  std::string* release_frame_name();
  void set_allocated_frame_name(std::string* frame_name);
  private:
  const std::string& _internal_frame_name() const;
  void _internal_set_frame_name(const std::string& value);
  std::string* _internal_mutable_frame_name();
  public:

  // string signal_name = 4;
  void clear_signal_name();
  const std::string& signal_name() const;
  void set_signal_name(const std::string& value);
  void set_signal_name(std::string&& value);
  void set_signal_name(const char* value);
  void set_signal_name(const char* value, size_t size);
  std::string* mutable_signal_name();
  std::string* release_signal_name();
  void set_allocated_signal_name(std::string* signal_name);
  private:
  const std::string& _internal_signal_name() const;
  void _internal_set_signal_name(const std::string& value);
  std::string* _internal_mutable_signal_name();
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.CanSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class LinSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.LinSource) */ {
 public:
  LinSource();
  virtual ~LinSource();

  LinSource(const LinSource& from);
  LinSource(LinSource&& from) noexcept
    : LinSource() {
    *this = ::std::move(from);
  }

  inline LinSource& operator=(const LinSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline LinSource& operator=(LinSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LinSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LinSource* internal_default_instance() {
    return reinterpret_cast<const LinSource*>(
               &_LinSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LinSource& a, LinSource& b) {
    a.Swap(&b);
  }
  inline void Swap(LinSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LinSource* New() const final {
    return CreateMaybeMessage<LinSource>(nullptr);
  }

  LinSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LinSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LinSource& from);
  void MergeFrom(const LinSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LinSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.LinSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNameFieldNumber = 1,
    kSourceVersionFieldNumber = 2,
    kFrameNameFieldNumber = 3,
    kSignalNameFieldNumber = 4,
  };
  // string source_name = 1;
  void clear_source_name();
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // string source_version = 2;
  void clear_source_version();
  const std::string& source_version() const;
  void set_source_version(const std::string& value);
  void set_source_version(std::string&& value);
  void set_source_version(const char* value);
  void set_source_version(const char* value, size_t size);
  std::string* mutable_source_version();
  std::string* release_source_version();
  void set_allocated_source_version(std::string* source_version);
  private:
  const std::string& _internal_source_version() const;
  void _internal_set_source_version(const std::string& value);
  std::string* _internal_mutable_source_version();
  public:

  // string frame_name = 3;
  void clear_frame_name();
  const std::string& frame_name() const;
  void set_frame_name(const std::string& value);
  void set_frame_name(std::string&& value);
  void set_frame_name(const char* value);
  void set_frame_name(const char* value, size_t size);
  std::string* mutable_frame_name();
  std::string* release_frame_name();
  void set_allocated_frame_name(std::string* frame_name);
  private:
  const std::string& _internal_frame_name() const;
  void _internal_set_frame_name(const std::string& value);
  std::string* _internal_mutable_frame_name();
  public:

  // string signal_name = 4;
  void clear_signal_name();
  const std::string& signal_name() const;
  void set_signal_name(const std::string& value);
  void set_signal_name(std::string&& value);
  void set_signal_name(const char* value);
  void set_signal_name(const char* value, size_t size);
  std::string* mutable_signal_name();
  std::string* release_signal_name();
  void set_allocated_signal_name(std::string* signal_name);
  private:
  const std::string& _internal_signal_name() const;
  void _internal_set_signal_name(const std::string& value);
  std::string* _internal_mutable_signal_name();
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.LinSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class EthernetSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.EthernetSource) */ {
 public:
  EthernetSource();
  virtual ~EthernetSource();

  EthernetSource(const EthernetSource& from);
  EthernetSource(EthernetSource&& from) noexcept
    : EthernetSource() {
    *this = ::std::move(from);
  }

  inline EthernetSource& operator=(const EthernetSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline EthernetSource& operator=(EthernetSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EthernetSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EthernetSource* internal_default_instance() {
    return reinterpret_cast<const EthernetSource*>(
               &_EthernetSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EthernetSource& a, EthernetSource& b) {
    a.Swap(&b);
  }
  inline void Swap(EthernetSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EthernetSource* New() const final {
    return CreateMaybeMessage<EthernetSource>(nullptr);
  }

  EthernetSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EthernetSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EthernetSource& from);
  void MergeFrom(const EthernetSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EthernetSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.EthernetSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNameFieldNumber = 1,
    kSourceVersionFieldNumber = 2,
    kFrameNameFieldNumber = 4,
    kSignalNameFieldNumber = 5,
    kVlanIdFieldNumber = 3,
  };
  // string source_name = 1;
  void clear_source_name();
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // string source_version = 2;
  void clear_source_version();
  const std::string& source_version() const;
  void set_source_version(const std::string& value);
  void set_source_version(std::string&& value);
  void set_source_version(const char* value);
  void set_source_version(const char* value, size_t size);
  std::string* mutable_source_version();
  std::string* release_source_version();
  void set_allocated_source_version(std::string* source_version);
  private:
  const std::string& _internal_source_version() const;
  void _internal_set_source_version(const std::string& value);
  std::string* _internal_mutable_source_version();
  public:

  // string frame_name = 4;
  void clear_frame_name();
  const std::string& frame_name() const;
  void set_frame_name(const std::string& value);
  void set_frame_name(std::string&& value);
  void set_frame_name(const char* value);
  void set_frame_name(const char* value, size_t size);
  std::string* mutable_frame_name();
  std::string* release_frame_name();
  void set_allocated_frame_name(std::string* frame_name);
  private:
  const std::string& _internal_frame_name() const;
  void _internal_set_frame_name(const std::string& value);
  std::string* _internal_mutable_frame_name();
  public:

  // string signal_name = 5;
  void clear_signal_name();
  const std::string& signal_name() const;
  void set_signal_name(const std::string& value);
  void set_signal_name(std::string&& value);
  void set_signal_name(const char* value);
  void set_signal_name(const char* value, size_t size);
  std::string* mutable_signal_name();
  std::string* release_signal_name();
  void set_allocated_signal_name(std::string* signal_name);
  private:
  const std::string& _internal_signal_name() const;
  void _internal_set_signal_name(const std::string& value);
  std::string* _internal_mutable_signal_name();
  public:

  // uint32 vlan_id = 3;
  void clear_vlan_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 vlan_id() const;
  void set_vlan_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vlan_id() const;
  void _internal_set_vlan_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.EthernetSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vlan_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class Scaling :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.Scaling) */ {
 public:
  Scaling();
  virtual ~Scaling();

  Scaling(const Scaling& from);
  Scaling(Scaling&& from) noexcept
    : Scaling() {
    *this = ::std::move(from);
  }

  inline Scaling& operator=(const Scaling& from) {
    CopyFrom(from);
    return *this;
  }
  inline Scaling& operator=(Scaling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Scaling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Scaling* internal_default_instance() {
    return reinterpret_cast<const Scaling*>(
               &_Scaling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Scaling& a, Scaling& b) {
    a.Swap(&b);
  }
  inline void Swap(Scaling* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Scaling* New() const final {
    return CreateMaybeMessage<Scaling>(nullptr);
  }

  Scaling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Scaling>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Scaling& from);
  void MergeFrom(const Scaling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Scaling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.Scaling";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumeratorLinearFactorFieldNumber = 1,
    kNumeratorOffsetFieldNumber = 2,
    kDenominatorOffsetFieldNumber = 3,
  };
  // double numerator_linear_factor = 1;
  void clear_numerator_linear_factor();
  double numerator_linear_factor() const;
  void set_numerator_linear_factor(double value);
  private:
  double _internal_numerator_linear_factor() const;
  void _internal_set_numerator_linear_factor(double value);
  public:

  // double numerator_offset = 2;
  void clear_numerator_offset();
  double numerator_offset() const;
  void set_numerator_offset(double value);
  private:
  double _internal_numerator_offset() const;
  void _internal_set_numerator_offset(double value);
  public:

  // double denominator_offset = 3;
  void clear_denominator_offset();
  double denominator_offset() const;
  void set_denominator_offset(double value);
  private:
  double _internal_denominator_offset() const;
  void _internal_set_denominator_offset(double value);
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.Scaling)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double numerator_linear_factor_;
  double numerator_offset_;
  double denominator_offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class NetworkSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.NetworkSource) */ {
 public:
  NetworkSource();
  virtual ~NetworkSource();

  NetworkSource(const NetworkSource& from);
  NetworkSource(NetworkSource&& from) noexcept
    : NetworkSource() {
    *this = ::std::move(from);
  }

  inline NetworkSource& operator=(const NetworkSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkSource& operator=(NetworkSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NetworkSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkSource* internal_default_instance() {
    return reinterpret_cast<const NetworkSource*>(
               &_NetworkSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(NetworkSource& a, NetworkSource& b) {
    a.Swap(&b);
  }
  inline void Swap(NetworkSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NetworkSource* New() const final {
    return CreateMaybeMessage<NetworkSource>(nullptr);
  }

  NetworkSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NetworkSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NetworkSource& from);
  void MergeFrom(const NetworkSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.NetworkSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventGroupFieldNumber = 3,
    kElementPathFieldNumber = 9,
    kServiceNameFieldNumber = 2,
    kEventNameFieldNumber = 5,
    kPduNameFieldNumber = 6,
    kSignalGroupNameFieldNumber = 7,
    kSignalNameFieldNumber = 8,
    kScalingValuesFieldNumber = 11,
    kSternbildApiFieldNumber = 12,
    kServiceIdFieldNumber = 1,
    kEventIdFieldNumber = 4,
    kScalingFieldNumber = 10,
  };
  // repeated .signal_source_definition.EventGroup event_group = 3;
  int event_group_size() const;
  private:
  int _internal_event_group_size() const;
  public:
  void clear_event_group();
  ::signal_source_definition::EventGroup* mutable_event_group(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::EventGroup >*
      mutable_event_group();
  private:
  const ::signal_source_definition::EventGroup& _internal_event_group(int index) const;
  ::signal_source_definition::EventGroup* _internal_add_event_group();
  public:
  const ::signal_source_definition::EventGroup& event_group(int index) const;
  ::signal_source_definition::EventGroup* add_event_group();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::EventGroup >&
      event_group() const;

  // repeated .signal_source_definition.Element element_path = 9;
  int element_path_size() const;
  private:
  int _internal_element_path_size() const;
  public:
  void clear_element_path();
  ::signal_source_definition::Element* mutable_element_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Element >*
      mutable_element_path();
  private:
  const ::signal_source_definition::Element& _internal_element_path(int index) const;
  ::signal_source_definition::Element* _internal_add_element_path();
  public:
  const ::signal_source_definition::Element& element_path(int index) const;
  ::signal_source_definition::Element* add_element_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Element >&
      element_path() const;

  // string service_name = 2;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string event_name = 5;
  void clear_event_name();
  const std::string& event_name() const;
  void set_event_name(const std::string& value);
  void set_event_name(std::string&& value);
  void set_event_name(const char* value);
  void set_event_name(const char* value, size_t size);
  std::string* mutable_event_name();
  std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // string pdu_name = 6;
  void clear_pdu_name();
  const std::string& pdu_name() const;
  void set_pdu_name(const std::string& value);
  void set_pdu_name(std::string&& value);
  void set_pdu_name(const char* value);
  void set_pdu_name(const char* value, size_t size);
  std::string* mutable_pdu_name();
  std::string* release_pdu_name();
  void set_allocated_pdu_name(std::string* pdu_name);
  private:
  const std::string& _internal_pdu_name() const;
  void _internal_set_pdu_name(const std::string& value);
  std::string* _internal_mutable_pdu_name();
  public:

  // string signal_group_name = 7;
  void clear_signal_group_name();
  const std::string& signal_group_name() const;
  void set_signal_group_name(const std::string& value);
  void set_signal_group_name(std::string&& value);
  void set_signal_group_name(const char* value);
  void set_signal_group_name(const char* value, size_t size);
  std::string* mutable_signal_group_name();
  std::string* release_signal_group_name();
  void set_allocated_signal_group_name(std::string* signal_group_name);
  private:
  const std::string& _internal_signal_group_name() const;
  void _internal_set_signal_group_name(const std::string& value);
  std::string* _internal_mutable_signal_group_name();
  public:

  // string signal_name = 8;
  void clear_signal_name();
  const std::string& signal_name() const;
  void set_signal_name(const std::string& value);
  void set_signal_name(std::string&& value);
  void set_signal_name(const char* value);
  void set_signal_name(const char* value, size_t size);
  std::string* mutable_signal_name();
  std::string* release_signal_name();
  void set_allocated_signal_name(std::string* signal_name);
  private:
  const std::string& _internal_signal_name() const;
  void _internal_set_signal_name(const std::string& value);
  std::string* _internal_mutable_signal_name();
  public:

  // .signal_source_definition.Scaling scaling_values = 11;
  bool has_scaling_values() const;
  private:
  bool _internal_has_scaling_values() const;
  public:
  void clear_scaling_values();
  const ::signal_source_definition::Scaling& scaling_values() const;
  ::signal_source_definition::Scaling* release_scaling_values();
  ::signal_source_definition::Scaling* mutable_scaling_values();
  void set_allocated_scaling_values(::signal_source_definition::Scaling* scaling_values);
  private:
  const ::signal_source_definition::Scaling& _internal_scaling_values() const;
  ::signal_source_definition::Scaling* _internal_mutable_scaling_values();
  public:

  // .signal_source_definition.SternbildAPI sternbild_api = 12;
  bool has_sternbild_api() const;
  private:
  bool _internal_has_sternbild_api() const;
  public:
  void clear_sternbild_api();
  const ::signal_source_definition::SternbildAPI& sternbild_api() const;
  ::signal_source_definition::SternbildAPI* release_sternbild_api();
  ::signal_source_definition::SternbildAPI* mutable_sternbild_api();
  void set_allocated_sternbild_api(::signal_source_definition::SternbildAPI* sternbild_api);
  private:
  const ::signal_source_definition::SternbildAPI& _internal_sternbild_api() const;
  ::signal_source_definition::SternbildAPI* _internal_mutable_sternbild_api();
  public:

  // uint32 service_id = 1;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 event_id = 4;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool scaling = 10;
  void clear_scaling();
  bool scaling() const;
  void set_scaling(bool value);
  private:
  bool _internal_scaling() const;
  void _internal_set_scaling(bool value);
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.NetworkSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::EventGroup > event_group_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Element > element_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pdu_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_name_;
  ::signal_source_definition::Scaling* scaling_values_;
  ::signal_source_definition::SternbildAPI* sternbild_api_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_id_;
  bool scaling_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class EventGroup :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.EventGroup) */ {
 public:
  EventGroup();
  virtual ~EventGroup();

  EventGroup(const EventGroup& from);
  EventGroup(EventGroup&& from) noexcept
    : EventGroup() {
    *this = ::std::move(from);
  }

  inline EventGroup& operator=(const EventGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventGroup& operator=(EventGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventGroup* internal_default_instance() {
    return reinterpret_cast<const EventGroup*>(
               &_EventGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(EventGroup& a, EventGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(EventGroup* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EventGroup* New() const final {
    return CreateMaybeMessage<EventGroup>(nullptr);
  }

  EventGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventGroup& from);
  void MergeFrom(const EventGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.EventGroup";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventGroupNameFieldNumber = 2,
    kEventGroupIdFieldNumber = 1,
  };
  // string event_group_name = 2;
  void clear_event_group_name();
  const std::string& event_group_name() const;
  void set_event_group_name(const std::string& value);
  void set_event_group_name(std::string&& value);
  void set_event_group_name(const char* value);
  void set_event_group_name(const char* value, size_t size);
  std::string* mutable_event_group_name();
  std::string* release_event_group_name();
  void set_allocated_event_group_name(std::string* event_group_name);
  private:
  const std::string& _internal_event_group_name() const;
  void _internal_set_event_group_name(const std::string& value);
  std::string* _internal_mutable_event_group_name();
  public:

  // uint32 event_group_id = 1;
  void clear_event_group_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 event_group_id() const;
  void set_event_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_event_group_id() const;
  void _internal_set_event_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.EventGroup)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_group_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 event_group_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class Element :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.Element) */ {
 public:
  Element();
  virtual ~Element();

  Element(const Element& from);
  Element(Element&& from) noexcept
    : Element() {
    *this = ::std::move(from);
  }

  inline Element& operator=(const Element& from) {
    CopyFrom(from);
    return *this;
  }
  inline Element& operator=(Element&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Element& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Element* internal_default_instance() {
    return reinterpret_cast<const Element*>(
               &_Element_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Element& a, Element& b) {
    a.Swap(&b);
  }
  inline void Swap(Element* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Element* New() const final {
    return CreateMaybeMessage<Element>(nullptr);
  }

  Element* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Element>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Element& from);
  void MergeFrom(const Element& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Element* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.Element";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kIndexFieldNumber = 1,
    kSequenceNumberFieldNumber = 2,
  };
  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 index = 1;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 sequence_number = 2;
  void clear_sequence_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number() const;
  void set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sequence_number() const;
  void _internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.Element)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 sequence_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class SternbildAPI :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.SternbildAPI) */ {
 public:
  SternbildAPI();
  virtual ~SternbildAPI();

  SternbildAPI(const SternbildAPI& from);
  SternbildAPI(SternbildAPI&& from) noexcept
    : SternbildAPI() {
    *this = ::std::move(from);
  }

  inline SternbildAPI& operator=(const SternbildAPI& from) {
    CopyFrom(from);
    return *this;
  }
  inline SternbildAPI& operator=(SternbildAPI&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SternbildAPI& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SternbildAPI* internal_default_instance() {
    return reinterpret_cast<const SternbildAPI*>(
               &_SternbildAPI_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SternbildAPI& a, SternbildAPI& b) {
    a.Swap(&b);
  }
  inline void Swap(SternbildAPI* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SternbildAPI* New() const final {
    return CreateMaybeMessage<SternbildAPI>(nullptr);
  }

  SternbildAPI* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SternbildAPI>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SternbildAPI& from);
  void MergeFrom(const SternbildAPI& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SternbildAPI* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.SternbildAPI";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSternbildServiceNameFieldNumber = 1,
    kSternbildSignalGroupNameFieldNumber = 2,
    kSternbildEventNameFieldNumber = 3,
  };
  // string sternbild_service_name = 1;
  void clear_sternbild_service_name();
  const std::string& sternbild_service_name() const;
  void set_sternbild_service_name(const std::string& value);
  void set_sternbild_service_name(std::string&& value);
  void set_sternbild_service_name(const char* value);
  void set_sternbild_service_name(const char* value, size_t size);
  std::string* mutable_sternbild_service_name();
  std::string* release_sternbild_service_name();
  void set_allocated_sternbild_service_name(std::string* sternbild_service_name);
  private:
  const std::string& _internal_sternbild_service_name() const;
  void _internal_set_sternbild_service_name(const std::string& value);
  std::string* _internal_mutable_sternbild_service_name();
  public:

  // string sternbild_signal_group_name = 2;
  void clear_sternbild_signal_group_name();
  const std::string& sternbild_signal_group_name() const;
  void set_sternbild_signal_group_name(const std::string& value);
  void set_sternbild_signal_group_name(std::string&& value);
  void set_sternbild_signal_group_name(const char* value);
  void set_sternbild_signal_group_name(const char* value, size_t size);
  std::string* mutable_sternbild_signal_group_name();
  std::string* release_sternbild_signal_group_name();
  void set_allocated_sternbild_signal_group_name(std::string* sternbild_signal_group_name);
  private:
  const std::string& _internal_sternbild_signal_group_name() const;
  void _internal_set_sternbild_signal_group_name(const std::string& value);
  std::string* _internal_mutable_sternbild_signal_group_name();
  public:

  // string sternbild_event_name = 3;
  void clear_sternbild_event_name();
  const std::string& sternbild_event_name() const;
  void set_sternbild_event_name(const std::string& value);
  void set_sternbild_event_name(std::string&& value);
  void set_sternbild_event_name(const char* value);
  void set_sternbild_event_name(const char* value, size_t size);
  std::string* mutable_sternbild_event_name();
  std::string* release_sternbild_event_name();
  void set_allocated_sternbild_event_name(std::string* sternbild_event_name);
  private:
  const std::string& _internal_sternbild_event_name() const;
  void _internal_set_sternbild_event_name(const std::string& value);
  std::string* _internal_mutable_sternbild_event_name();
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.SternbildAPI)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sternbild_service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sternbild_signal_group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sternbild_event_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class InternalSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.InternalSource) */ {
 public:
  InternalSource();
  virtual ~InternalSource();

  InternalSource(const InternalSource& from);
  InternalSource(InternalSource&& from) noexcept
    : InternalSource() {
    *this = ::std::move(from);
  }

  inline InternalSource& operator=(const InternalSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalSource& operator=(InternalSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InternalSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InternalSource* internal_default_instance() {
    return reinterpret_cast<const InternalSource*>(
               &_InternalSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(InternalSource& a, InternalSource& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InternalSource* New() const final {
    return CreateMaybeMessage<InternalSource>(nullptr);
  }

  InternalSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InternalSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InternalSource& from);
  void MergeFrom(const InternalSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.InternalSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceNameFieldNumber = 1,
    kSourceVersionFieldNumber = 2,
    kSignalNameFieldNumber = 3,
  };
  // string source_name = 1;
  void clear_source_name();
  const std::string& source_name() const;
  void set_source_name(const std::string& value);
  void set_source_name(std::string&& value);
  void set_source_name(const char* value);
  void set_source_name(const char* value, size_t size);
  std::string* mutable_source_name();
  std::string* release_source_name();
  void set_allocated_source_name(std::string* source_name);
  private:
  const std::string& _internal_source_name() const;
  void _internal_set_source_name(const std::string& value);
  std::string* _internal_mutable_source_name();
  public:

  // string source_version = 2;
  void clear_source_version();
  const std::string& source_version() const;
  void set_source_version(const std::string& value);
  void set_source_version(std::string&& value);
  void set_source_version(const char* value);
  void set_source_version(const char* value, size_t size);
  std::string* mutable_source_version();
  std::string* release_source_version();
  void set_allocated_source_version(std::string* source_version);
  private:
  const std::string& _internal_source_version() const;
  void _internal_set_source_version(const std::string& value);
  std::string* _internal_mutable_source_version();
  public:

  // string signal_name = 3;
  void clear_signal_name();
  const std::string& signal_name() const;
  void set_signal_name(const std::string& value);
  void set_signal_name(std::string&& value);
  void set_signal_name(const char* value);
  void set_signal_name(const char* value, size_t size);
  std::string* mutable_signal_name();
  std::string* release_signal_name();
  void set_allocated_signal_name(std::string* signal_name);
  private:
  const std::string& _internal_signal_name() const;
  void _internal_set_signal_name(const std::string& value);
  std::string* _internal_mutable_signal_name();
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.InternalSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class ProcessingToolboxSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.ProcessingToolboxSource) */ {
 public:
  ProcessingToolboxSource();
  virtual ~ProcessingToolboxSource();

  ProcessingToolboxSource(const ProcessingToolboxSource& from);
  ProcessingToolboxSource(ProcessingToolboxSource&& from) noexcept
    : ProcessingToolboxSource() {
    *this = ::std::move(from);
  }

  inline ProcessingToolboxSource& operator=(const ProcessingToolboxSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingToolboxSource& operator=(ProcessingToolboxSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessingToolboxSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessingToolboxSource* internal_default_instance() {
    return reinterpret_cast<const ProcessingToolboxSource*>(
               &_ProcessingToolboxSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProcessingToolboxSource& a, ProcessingToolboxSource& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessingToolboxSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessingToolboxSource* New() const final {
    return CreateMaybeMessage<ProcessingToolboxSource>(nullptr);
  }

  ProcessingToolboxSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessingToolboxSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessingToolboxSource& from);
  void MergeFrom(const ProcessingToolboxSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessingToolboxSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.ProcessingToolboxSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kToolMetadataFieldNumber = 6,
    kToolboxIdFieldNumber = 1,
    kToolboxVersionFieldNumber = 2,
    kFormatNameFieldNumber = 3,
    kFormatVersionFieldNumber = 4,
    kSignalNameFieldNumber = 5,
  };
  // repeated .signal_source_definition.ToolMetadata tool_metadata = 6;
  int tool_metadata_size() const;
  private:
  int _internal_tool_metadata_size() const;
  public:
  void clear_tool_metadata();
  ::signal_source_definition::ToolMetadata* mutable_tool_metadata(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::ToolMetadata >*
      mutable_tool_metadata();
  private:
  const ::signal_source_definition::ToolMetadata& _internal_tool_metadata(int index) const;
  ::signal_source_definition::ToolMetadata* _internal_add_tool_metadata();
  public:
  const ::signal_source_definition::ToolMetadata& tool_metadata(int index) const;
  ::signal_source_definition::ToolMetadata* add_tool_metadata();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::ToolMetadata >&
      tool_metadata() const;

  // string toolbox_id = 1;
  void clear_toolbox_id();
  const std::string& toolbox_id() const;
  void set_toolbox_id(const std::string& value);
  void set_toolbox_id(std::string&& value);
  void set_toolbox_id(const char* value);
  void set_toolbox_id(const char* value, size_t size);
  std::string* mutable_toolbox_id();
  std::string* release_toolbox_id();
  void set_allocated_toolbox_id(std::string* toolbox_id);
  private:
  const std::string& _internal_toolbox_id() const;
  void _internal_set_toolbox_id(const std::string& value);
  std::string* _internal_mutable_toolbox_id();
  public:

  // string toolbox_version = 2;
  void clear_toolbox_version();
  const std::string& toolbox_version() const;
  void set_toolbox_version(const std::string& value);
  void set_toolbox_version(std::string&& value);
  void set_toolbox_version(const char* value);
  void set_toolbox_version(const char* value, size_t size);
  std::string* mutable_toolbox_version();
  std::string* release_toolbox_version();
  void set_allocated_toolbox_version(std::string* toolbox_version);
  private:
  const std::string& _internal_toolbox_version() const;
  void _internal_set_toolbox_version(const std::string& value);
  std::string* _internal_mutable_toolbox_version();
  public:

  // string format_name = 3;
  void clear_format_name();
  const std::string& format_name() const;
  void set_format_name(const std::string& value);
  void set_format_name(std::string&& value);
  void set_format_name(const char* value);
  void set_format_name(const char* value, size_t size);
  std::string* mutable_format_name();
  std::string* release_format_name();
  void set_allocated_format_name(std::string* format_name);
  private:
  const std::string& _internal_format_name() const;
  void _internal_set_format_name(const std::string& value);
  std::string* _internal_mutable_format_name();
  public:

  // string format_version = 4;
  void clear_format_version();
  const std::string& format_version() const;
  void set_format_version(const std::string& value);
  void set_format_version(std::string&& value);
  void set_format_version(const char* value);
  void set_format_version(const char* value, size_t size);
  std::string* mutable_format_version();
  std::string* release_format_version();
  void set_allocated_format_version(std::string* format_version);
  private:
  const std::string& _internal_format_version() const;
  void _internal_set_format_version(const std::string& value);
  std::string* _internal_mutable_format_version();
  public:

  // string signal_name = 5;
  void clear_signal_name();
  const std::string& signal_name() const;
  void set_signal_name(const std::string& value);
  void set_signal_name(std::string&& value);
  void set_signal_name(const char* value);
  void set_signal_name(const char* value, size_t size);
  std::string* mutable_signal_name();
  std::string* release_signal_name();
  void set_allocated_signal_name(std::string* signal_name);
  private:
  const std::string& _internal_signal_name() const;
  void _internal_set_signal_name(const std::string& value);
  std::string* _internal_mutable_signal_name();
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.ProcessingToolboxSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::ToolMetadata > tool_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toolbox_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr toolbox_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signal_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class ToolMetadata :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.ToolMetadata) */ {
 public:
  ToolMetadata();
  virtual ~ToolMetadata();

  ToolMetadata(const ToolMetadata& from);
  ToolMetadata(ToolMetadata&& from) noexcept
    : ToolMetadata() {
    *this = ::std::move(from);
  }

  inline ToolMetadata& operator=(const ToolMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ToolMetadata& operator=(ToolMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ToolMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ToolMetadata* internal_default_instance() {
    return reinterpret_cast<const ToolMetadata*>(
               &_ToolMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ToolMetadata& a, ToolMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ToolMetadata* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ToolMetadata* New() const final {
    return CreateMaybeMessage<ToolMetadata>(nullptr);
  }

  ToolMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ToolMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ToolMetadata& from);
  void MergeFrom(const ToolMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ToolMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.ToolMetadata";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ToolMetadata_INPUTCONFIG INPUTCONFIG;
  static constexpr INPUTCONFIG TYPE_A =
    ToolMetadata_INPUTCONFIG_TYPE_A;
  static constexpr INPUTCONFIG TYPE_B =
    ToolMetadata_INPUTCONFIG_TYPE_B;
  static constexpr INPUTCONFIG TYPE_C =
    ToolMetadata_INPUTCONFIG_TYPE_C;
  static constexpr INPUTCONFIG TYPE_D =
    ToolMetadata_INPUTCONFIG_TYPE_D;
  static inline bool INPUTCONFIG_IsValid(int value) {
    return ToolMetadata_INPUTCONFIG_IsValid(value);
  }
  static constexpr INPUTCONFIG INPUTCONFIG_MIN =
    ToolMetadata_INPUTCONFIG_INPUTCONFIG_MIN;
  static constexpr INPUTCONFIG INPUTCONFIG_MAX =
    ToolMetadata_INPUTCONFIG_INPUTCONFIG_MAX;
  static constexpr int INPUTCONFIG_ARRAYSIZE =
    ToolMetadata_INPUTCONFIG_INPUTCONFIG_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  INPUTCONFIG_descriptor() {
    return ToolMetadata_INPUTCONFIG_descriptor();
  }
  template<typename T>
  static inline const std::string& INPUTCONFIG_Name(T enum_t_value) {
    static_assert(::std::is_same<T, INPUTCONFIG>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function INPUTCONFIG_Name.");
    return ToolMetadata_INPUTCONFIG_Name(enum_t_value);
  }
  static inline bool INPUTCONFIG_Parse(const std::string& name,
      INPUTCONFIG* value) {
    return ToolMetadata_INPUTCONFIG_Parse(name, value);
  }

  typedef ToolMetadata_FAILSAFE FAILSAFE;
  static constexpr FAILSAFE UNDEFINED =
    ToolMetadata_FAILSAFE_UNDEFINED;
  static constexpr FAILSAFE SKIP =
    ToolMetadata_FAILSAFE_SKIP;
  static constexpr FAILSAFE CAPTURE_RAW =
    ToolMetadata_FAILSAFE_CAPTURE_RAW;
  static inline bool FAILSAFE_IsValid(int value) {
    return ToolMetadata_FAILSAFE_IsValid(value);
  }
  static constexpr FAILSAFE FAILSAFE_MIN =
    ToolMetadata_FAILSAFE_FAILSAFE_MIN;
  static constexpr FAILSAFE FAILSAFE_MAX =
    ToolMetadata_FAILSAFE_FAILSAFE_MAX;
  static constexpr int FAILSAFE_ARRAYSIZE =
    ToolMetadata_FAILSAFE_FAILSAFE_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FAILSAFE_descriptor() {
    return ToolMetadata_FAILSAFE_descriptor();
  }
  template<typename T>
  static inline const std::string& FAILSAFE_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FAILSAFE>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FAILSAFE_Name.");
    return ToolMetadata_FAILSAFE_Name(enum_t_value);
  }
  static inline bool FAILSAFE_Parse(const std::string& name,
      FAILSAFE* value) {
    return ToolMetadata_FAILSAFE_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDpjIdFieldNumber = 1,
    kNamedOutputFieldNumber = 2,
    kSamplingRateFieldNumber = 5,
    kOutputIdFieldNumber = 3,
    kInputConfigFieldNumber = 4,
    kFailsafeOptionFieldNumber = 6,
  };
  // string dpj_id = 1;
  void clear_dpj_id();
  const std::string& dpj_id() const;
  void set_dpj_id(const std::string& value);
  void set_dpj_id(std::string&& value);
  void set_dpj_id(const char* value);
  void set_dpj_id(const char* value, size_t size);
  std::string* mutable_dpj_id();
  std::string* release_dpj_id();
  void set_allocated_dpj_id(std::string* dpj_id);
  private:
  const std::string& _internal_dpj_id() const;
  void _internal_set_dpj_id(const std::string& value);
  std::string* _internal_mutable_dpj_id();
  public:

  // string named_output = 2;
  void clear_named_output();
  const std::string& named_output() const;
  void set_named_output(const std::string& value);
  void set_named_output(std::string&& value);
  void set_named_output(const char* value);
  void set_named_output(const char* value, size_t size);
  std::string* mutable_named_output();
  std::string* release_named_output();
  void set_allocated_named_output(std::string* named_output);
  private:
  const std::string& _internal_named_output() const;
  void _internal_set_named_output(const std::string& value);
  std::string* _internal_mutable_named_output();
  public:

  // .signal_source_definition.SamplingRate sampling_rate = 5;
  bool has_sampling_rate() const;
  private:
  bool _internal_has_sampling_rate() const;
  public:
  void clear_sampling_rate();
  const ::signal_source_definition::SamplingRate& sampling_rate() const;
  ::signal_source_definition::SamplingRate* release_sampling_rate();
  ::signal_source_definition::SamplingRate* mutable_sampling_rate();
  void set_allocated_sampling_rate(::signal_source_definition::SamplingRate* sampling_rate);
  private:
  const ::signal_source_definition::SamplingRate& _internal_sampling_rate() const;
  ::signal_source_definition::SamplingRate* _internal_mutable_sampling_rate();
  public:

  // int32 output_id = 3;
  void clear_output_id();
  ::PROTOBUF_NAMESPACE_ID::int32 output_id() const;
  void set_output_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_output_id() const;
  void _internal_set_output_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .signal_source_definition.ToolMetadata.INPUTCONFIG input_config = 4;
  void clear_input_config();
  ::signal_source_definition::ToolMetadata_INPUTCONFIG input_config() const;
  void set_input_config(::signal_source_definition::ToolMetadata_INPUTCONFIG value);
  private:
  ::signal_source_definition::ToolMetadata_INPUTCONFIG _internal_input_config() const;
  void _internal_set_input_config(::signal_source_definition::ToolMetadata_INPUTCONFIG value);
  public:

  // .signal_source_definition.ToolMetadata.FAILSAFE failsafe_option = 6;
  void clear_failsafe_option();
  ::signal_source_definition::ToolMetadata_FAILSAFE failsafe_option() const;
  void set_failsafe_option(::signal_source_definition::ToolMetadata_FAILSAFE value);
  private:
  ::signal_source_definition::ToolMetadata_FAILSAFE _internal_failsafe_option() const;
  void _internal_set_failsafe_option(::signal_source_definition::ToolMetadata_FAILSAFE value);
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.ToolMetadata)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dpj_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr named_output_;
  ::signal_source_definition::SamplingRate* sampling_rate_;
  ::PROTOBUF_NAMESPACE_ID::int32 output_id_;
  int input_config_;
  int failsafe_option_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class SamplingRate :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.SamplingRate) */ {
 public:
  SamplingRate();
  virtual ~SamplingRate();

  SamplingRate(const SamplingRate& from);
  SamplingRate(SamplingRate&& from) noexcept
    : SamplingRate() {
    *this = ::std::move(from);
  }

  inline SamplingRate& operator=(const SamplingRate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SamplingRate& operator=(SamplingRate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SamplingRate& default_instance();

  enum SamplingRateCase {
    kSamplingRateTimeMs = 1,
    kSamplingRateInjectionCount = 2,
    SAMPLING_RATE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SamplingRate* internal_default_instance() {
    return reinterpret_cast<const SamplingRate*>(
               &_SamplingRate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SamplingRate& a, SamplingRate& b) {
    a.Swap(&b);
  }
  inline void Swap(SamplingRate* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SamplingRate* New() const final {
    return CreateMaybeMessage<SamplingRate>(nullptr);
  }

  SamplingRate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SamplingRate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SamplingRate& from);
  void MergeFrom(const SamplingRate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SamplingRate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.SamplingRate";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSamplingRateTimeMsFieldNumber = 1,
    kSamplingRateInjectionCountFieldNumber = 2,
  };
  // uint32 sampling_rate_time_ms = 1;
  private:
  bool _internal_has_sampling_rate_time_ms() const;
  public:
  void clear_sampling_rate_time_ms();
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_rate_time_ms() const;
  void set_sampling_rate_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sampling_rate_time_ms() const;
  void _internal_set_sampling_rate_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 sampling_rate_injection_count = 2;
  private:
  bool _internal_has_sampling_rate_injection_count() const;
  public:
  void clear_sampling_rate_injection_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 sampling_rate_injection_count() const;
  void set_sampling_rate_injection_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_sampling_rate_injection_count() const;
  void _internal_set_sampling_rate_injection_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  void clear_sampling_rate();
  SamplingRateCase sampling_rate_case() const;
  // @@protoc_insertion_point(class_scope:signal_source_definition.SamplingRate)
 private:
  class _Internal;
  void set_has_sampling_rate_time_ms();
  void set_has_sampling_rate_injection_count();

  inline bool has_sampling_rate() const;
  inline void clear_has_sampling_rate();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union SamplingRateUnion {
    SamplingRateUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 sampling_rate_time_ms_;
    ::PROTOBUF_NAMESPACE_ID::uint32 sampling_rate_injection_count_;
  } sampling_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class ThriftmeSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.ThriftmeSource) */ {
 public:
  ThriftmeSource();
  virtual ~ThriftmeSource();

  ThriftmeSource(const ThriftmeSource& from);
  ThriftmeSource(ThriftmeSource&& from) noexcept
    : ThriftmeSource() {
    *this = ::std::move(from);
  }

  inline ThriftmeSource& operator=(const ThriftmeSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThriftmeSource& operator=(ThriftmeSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThriftmeSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThriftmeSource* internal_default_instance() {
    return reinterpret_cast<const ThriftmeSource*>(
               &_ThriftmeSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ThriftmeSource& a, ThriftmeSource& b) {
    a.Swap(&b);
  }
  inline void Swap(ThriftmeSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThriftmeSource* New() const final {
    return CreateMaybeMessage<ThriftmeSource>(nullptr);
  }

  ThriftmeSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThriftmeSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThriftmeSource& from);
  void MergeFrom(const ThriftmeSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThriftmeSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.ThriftmeSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ThriftmeSource_MessageTypeEnum MessageTypeEnum;
  static constexpr MessageTypeEnum THRIFTME_CALL =
    ThriftmeSource_MessageTypeEnum_THRIFTME_CALL;
  static constexpr MessageTypeEnum THRIFTME_REPLY =
    ThriftmeSource_MessageTypeEnum_THRIFTME_REPLY;
  static constexpr MessageTypeEnum THRIFTME_EXCEPTION =
    ThriftmeSource_MessageTypeEnum_THRIFTME_EXCEPTION;
  static constexpr MessageTypeEnum THRIFTME_ONEWAY =
    ThriftmeSource_MessageTypeEnum_THRIFTME_ONEWAY;
  static constexpr MessageTypeEnum THRIFTME_EVENT =
    ThriftmeSource_MessageTypeEnum_THRIFTME_EVENT;
  static inline bool MessageTypeEnum_IsValid(int value) {
    return ThriftmeSource_MessageTypeEnum_IsValid(value);
  }
  static constexpr MessageTypeEnum MessageTypeEnum_MIN =
    ThriftmeSource_MessageTypeEnum_MessageTypeEnum_MIN;
  static constexpr MessageTypeEnum MessageTypeEnum_MAX =
    ThriftmeSource_MessageTypeEnum_MessageTypeEnum_MAX;
  static constexpr int MessageTypeEnum_ARRAYSIZE =
    ThriftmeSource_MessageTypeEnum_MessageTypeEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageTypeEnum_descriptor() {
    return ThriftmeSource_MessageTypeEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageTypeEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageTypeEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageTypeEnum_Name.");
    return ThriftmeSource_MessageTypeEnum_Name(enum_t_value);
  }
  static inline bool MessageTypeEnum_Parse(const std::string& name,
      MessageTypeEnum* value) {
    return ThriftmeSource_MessageTypeEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 3,
    kFunctionNameFieldNumber = 4,
    kServiceHashIdFieldNumber = 1,
    kFunctionIdFieldNumber = 2,
    kMessageTypeFieldNumber = 5,
  };
  // string service_name = 3;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string function_name = 4;
  void clear_function_name();
  const std::string& function_name() const;
  void set_function_name(const std::string& value);
  void set_function_name(std::string&& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  std::string* mutable_function_name();
  std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // int32 service_hash_id = 1;
  void clear_service_hash_id();
  ::PROTOBUF_NAMESPACE_ID::int32 service_hash_id() const;
  void set_service_hash_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service_hash_id() const;
  void _internal_set_service_hash_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 function_id = 2;
  void clear_function_id();
  ::PROTOBUF_NAMESPACE_ID::int32 function_id() const;
  void set_function_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_function_id() const;
  void _internal_set_function_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .signal_source_definition.ThriftmeSource.MessageTypeEnum message_type = 5;
  void clear_message_type();
  ::signal_source_definition::ThriftmeSource_MessageTypeEnum message_type() const;
  void set_message_type(::signal_source_definition::ThriftmeSource_MessageTypeEnum value);
  private:
  ::signal_source_definition::ThriftmeSource_MessageTypeEnum _internal_message_type() const;
  void _internal_set_message_type(::signal_source_definition::ThriftmeSource_MessageTypeEnum value);
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.ThriftmeSource)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_hash_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 function_id_;
  int message_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class ThriftmeSourceActive :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.ThriftmeSourceActive) */ {
 public:
  ThriftmeSourceActive();
  virtual ~ThriftmeSourceActive();

  ThriftmeSourceActive(const ThriftmeSourceActive& from);
  ThriftmeSourceActive(ThriftmeSourceActive&& from) noexcept
    : ThriftmeSourceActive() {
    *this = ::std::move(from);
  }

  inline ThriftmeSourceActive& operator=(const ThriftmeSourceActive& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThriftmeSourceActive& operator=(ThriftmeSourceActive&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThriftmeSourceActive& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThriftmeSourceActive* internal_default_instance() {
    return reinterpret_cast<const ThriftmeSourceActive*>(
               &_ThriftmeSourceActive_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ThriftmeSourceActive& a, ThriftmeSourceActive& b) {
    a.Swap(&b);
  }
  inline void Swap(ThriftmeSourceActive* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThriftmeSourceActive* New() const final {
    return CreateMaybeMessage<ThriftmeSourceActive>(nullptr);
  }

  ThriftmeSourceActive* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThriftmeSourceActive>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThriftmeSourceActive& from);
  void MergeFrom(const ThriftmeSourceActive& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThriftmeSourceActive* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.ThriftmeSourceActive";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberFieldNumber = 6,
    kParameterFieldNumber = 7,
    kServiceNameFieldNumber = 1,
    kBrokerUrlFieldNumber = 3,
    kFunctionNameFieldNumber = 4,
    kServiceHashIdFieldNumber = 2,
    kFunctionIdFieldNumber = 5,
  };
  // repeated .signal_source_definition.DataMembers member = 6;
  int member_size() const;
  private:
  int _internal_member_size() const;
  public:
  void clear_member();
  ::signal_source_definition::DataMembers* mutable_member(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::DataMembers >*
      mutable_member();
  private:
  const ::signal_source_definition::DataMembers& _internal_member(int index) const;
  ::signal_source_definition::DataMembers* _internal_add_member();
  public:
  const ::signal_source_definition::DataMembers& member(int index) const;
  ::signal_source_definition::DataMembers* add_member();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::DataMembers >&
      member() const;

  // repeated .signal_source_definition.Parameters parameter = 7;
  int parameter_size() const;
  private:
  int _internal_parameter_size() const;
  public:
  void clear_parameter();
  ::signal_source_definition::Parameters* mutable_parameter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Parameters >*
      mutable_parameter();
  private:
  const ::signal_source_definition::Parameters& _internal_parameter(int index) const;
  ::signal_source_definition::Parameters* _internal_add_parameter();
  public:
  const ::signal_source_definition::Parameters& parameter(int index) const;
  ::signal_source_definition::Parameters* add_parameter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Parameters >&
      parameter() const;

  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string broker_url = 3;
  void clear_broker_url();
  const std::string& broker_url() const;
  void set_broker_url(const std::string& value);
  void set_broker_url(std::string&& value);
  void set_broker_url(const char* value);
  void set_broker_url(const char* value, size_t size);
  std::string* mutable_broker_url();
  std::string* release_broker_url();
  void set_allocated_broker_url(std::string* broker_url);
  private:
  const std::string& _internal_broker_url() const;
  void _internal_set_broker_url(const std::string& value);
  std::string* _internal_mutable_broker_url();
  public:

  // string function_name = 4;
  void clear_function_name();
  const std::string& function_name() const;
  void set_function_name(const std::string& value);
  void set_function_name(std::string&& value);
  void set_function_name(const char* value);
  void set_function_name(const char* value, size_t size);
  std::string* mutable_function_name();
  std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // int32 service_hash_id = 2;
  void clear_service_hash_id();
  ::PROTOBUF_NAMESPACE_ID::int32 service_hash_id() const;
  void set_service_hash_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_service_hash_id() const;
  void _internal_set_service_hash_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 function_id = 5;
  void clear_function_id();
  ::PROTOBUF_NAMESPACE_ID::int32 function_id() const;
  void set_function_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_function_id() const;
  void _internal_set_function_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.ThriftmeSourceActive)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::DataMembers > member_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Parameters > parameter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr broker_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 service_hash_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 function_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class Parameters :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.Parameters) */ {
 public:
  Parameters();
  virtual ~Parameters();

  Parameters(const Parameters& from);
  Parameters(Parameters&& from) noexcept
    : Parameters() {
    *this = ::std::move(from);
  }

  inline Parameters& operator=(const Parameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline Parameters& operator=(Parameters&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Parameters& default_instance();

  enum ParameterValueCase {
    kDoubleValue = 2,
    kFloatValue = 3,
    kInt32Value = 4,
    kInt64Value = 5,
    kUint32Value = 6,
    kUint64Value = 7,
    kSint32Value = 8,
    kSint64Value = 9,
    kFixed32Value = 10,
    kFixed64Value = 11,
    kSfixed32Value = 12,
    kSfixed64Value = 13,
    kBoolValue = 14,
    kStringValue = 15,
    kBytesValue = 16,
    PARAMETER_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Parameters* internal_default_instance() {
    return reinterpret_cast<const Parameters*>(
               &_Parameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Parameters& a, Parameters& b) {
    a.Swap(&b);
  }
  inline void Swap(Parameters* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Parameters* New() const final {
    return CreateMaybeMessage<Parameters>(nullptr);
  }

  Parameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Parameters>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Parameters& from);
  void MergeFrom(const Parameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Parameters* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.Parameters";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterNameFieldNumber = 1,
    kDoubleValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kInt32ValueFieldNumber = 4,
    kInt64ValueFieldNumber = 5,
    kUint32ValueFieldNumber = 6,
    kUint64ValueFieldNumber = 7,
    kSint32ValueFieldNumber = 8,
    kSint64ValueFieldNumber = 9,
    kFixed32ValueFieldNumber = 10,
    kFixed64ValueFieldNumber = 11,
    kSfixed32ValueFieldNumber = 12,
    kSfixed64ValueFieldNumber = 13,
    kBoolValueFieldNumber = 14,
    kStringValueFieldNumber = 15,
    kBytesValueFieldNumber = 16,
  };
  // string parameter_name = 1;
  void clear_parameter_name();
  const std::string& parameter_name() const;
  void set_parameter_name(const std::string& value);
  void set_parameter_name(std::string&& value);
  void set_parameter_name(const char* value);
  void set_parameter_name(const char* value, size_t size);
  std::string* mutable_parameter_name();
  std::string* release_parameter_name();
  void set_allocated_parameter_name(std::string* parameter_name);
  private:
  const std::string& _internal_parameter_name() const;
  void _internal_set_parameter_name(const std::string& value);
  std::string* _internal_mutable_parameter_name();
  public:

  // double double_value = 2;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // float float_value = 3;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // int32 int32_value = 4;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value() const;
  void set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_value() const;
  void _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 int64_value = 5;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 uint32_value = 6;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value() const;
  void set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_value() const;
  void _internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 uint64_value = 7;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value() const;
  void set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_value() const;
  void _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 sint32_value = 8;
  private:
  bool _internal_has_sint32_value() const;
  public:
  void clear_sint32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_value() const;
  void set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32_value() const;
  void _internal_set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 sint64_value = 9;
  private:
  bool _internal_has_sint64_value() const;
  public:
  void clear_sint64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_value() const;
  void set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64_value() const;
  void _internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed32 fixed32_value = 10;
  private:
  bool _internal_has_fixed32_value() const;
  public:
  void clear_fixed32_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value() const;
  void set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32_value() const;
  void _internal_set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed64 fixed64_value = 11;
  private:
  bool _internal_has_fixed64_value() const;
  public:
  void clear_fixed64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value() const;
  void set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64_value() const;
  void _internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed32 sfixed32_value = 12;
  private:
  bool _internal_has_sfixed32_value() const;
  public:
  void clear_sfixed32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value() const;
  void set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32_value() const;
  void _internal_set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed64 sfixed64_value = 13;
  private:
  bool _internal_has_sfixed64_value() const;
  public:
  void clear_sfixed64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value() const;
  void set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64_value() const;
  void _internal_set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 14;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // string string_value = 15;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes bytes_value = 16;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  void set_bytes_value(const std::string& value);
  void set_bytes_value(std::string&& value);
  void set_bytes_value(const char* value);
  void set_bytes_value(const void* value, size_t size);
  std::string* mutable_bytes_value();
  std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  void clear_parameter_value();
  ParameterValueCase parameter_value_case() const;
  // @@protoc_insertion_point(class_scope:signal_source_definition.Parameters)
 private:
  class _Internal;
  void set_has_double_value();
  void set_has_float_value();
  void set_has_int32_value();
  void set_has_int64_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_sint32_value();
  void set_has_sint64_value();
  void set_has_fixed32_value();
  void set_has_fixed64_value();
  void set_has_sfixed32_value();
  void set_has_sfixed64_value();
  void set_has_bool_value();
  void set_has_string_value();
  void set_has_bytes_value();

  inline bool has_parameter_value() const;
  inline void clear_has_parameter_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_name_;
  union ParameterValueUnion {
    ParameterValueUnion() {}
    double double_value_;
    float float_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 sint32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
  } parameter_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// -------------------------------------------------------------------

class DataMembers :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:signal_source_definition.DataMembers) */ {
 public:
  DataMembers();
  virtual ~DataMembers();

  DataMembers(const DataMembers& from);
  DataMembers(DataMembers&& from) noexcept
    : DataMembers() {
    *this = ::std::move(from);
  }

  inline DataMembers& operator=(const DataMembers& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataMembers& operator=(DataMembers&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataMembers& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataMembers* internal_default_instance() {
    return reinterpret_cast<const DataMembers*>(
               &_DataMembers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DataMembers& a, DataMembers& b) {
    a.Swap(&b);
  }
  inline void Swap(DataMembers* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataMembers* New() const final {
    return CreateMaybeMessage<DataMembers>(nullptr);
  }

  DataMembers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataMembers>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataMembers& from);
  void MergeFrom(const DataMembers& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataMembers* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "signal_source_definition.DataMembers";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_signal_5fsource_5fdefinition_2eproto);
    return ::descriptor_table_signal_5fsource_5fdefinition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlugFieldNumber = 1,
    kMemberNameFieldNumber = 2,
  };
  // string slug = 1;
  void clear_slug();
  const std::string& slug() const;
  void set_slug(const std::string& value);
  void set_slug(std::string&& value);
  void set_slug(const char* value);
  void set_slug(const char* value, size_t size);
  std::string* mutable_slug();
  std::string* release_slug();
  void set_allocated_slug(std::string* slug);
  private:
  const std::string& _internal_slug() const;
  void _internal_set_slug(const std::string& value);
  std::string* _internal_mutable_slug();
  public:

  // string member_name = 2;
  void clear_member_name();
  const std::string& member_name() const;
  void set_member_name(const std::string& value);
  void set_member_name(std::string&& value);
  void set_member_name(const char* value);
  void set_member_name(const char* value, size_t size);
  std::string* mutable_member_name();
  std::string* release_member_name();
  void set_allocated_member_name(std::string* member_name);
  private:
  const std::string& _internal_member_name() const;
  void _internal_set_member_name(const std::string& value);
  std::string* _internal_mutable_member_name();
  public:

  // @@protoc_insertion_point(class_scope:signal_source_definition.DataMembers)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slug_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr member_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_signal_5fsource_5fdefinition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DefaultSource

// string signal_name = 1;
inline void DefaultSource::clear_signal_name() {
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DefaultSource::signal_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.DefaultSource.signal_name)
  return _internal_signal_name();
}
inline void DefaultSource::set_signal_name(const std::string& value) {
  _internal_set_signal_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.DefaultSource.signal_name)
}
inline std::string* DefaultSource::mutable_signal_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.DefaultSource.signal_name)
  return _internal_mutable_signal_name();
}
inline const std::string& DefaultSource::_internal_signal_name() const {
  return signal_name_.GetNoArena();
}
inline void DefaultSource::_internal_set_signal_name(const std::string& value) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DefaultSource::set_signal_name(std::string&& value) {
  
  signal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.DefaultSource.signal_name)
}
inline void DefaultSource::set_signal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.DefaultSource.signal_name)
}
inline void DefaultSource::set_signal_name(const char* value, size_t size) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.DefaultSource.signal_name)
}
inline std::string* DefaultSource::_internal_mutable_signal_name() {
  
  return signal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DefaultSource::release_signal_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.DefaultSource.signal_name)
  
  return signal_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DefaultSource::set_allocated_signal_name(std::string* signal_name) {
  if (signal_name != nullptr) {
    
  } else {
    
  }
  signal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.DefaultSource.signal_name)
}

// -------------------------------------------------------------------

// CollectdSource

// .signal_source_definition.CollectdSource.CommandTypeEnum commandtype = 1;
inline void CollectdSource::clear_commandtype() {
  commandtype_ = 0;
}
inline ::signal_source_definition::CollectdSource_CommandTypeEnum CollectdSource::_internal_commandtype() const {
  return static_cast< ::signal_source_definition::CollectdSource_CommandTypeEnum >(commandtype_);
}
inline ::signal_source_definition::CollectdSource_CommandTypeEnum CollectdSource::commandtype() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.CollectdSource.commandtype)
  return _internal_commandtype();
}
inline void CollectdSource::_internal_set_commandtype(::signal_source_definition::CollectdSource_CommandTypeEnum value) {
  
  commandtype_ = value;
}
inline void CollectdSource::set_commandtype(::signal_source_definition::CollectdSource_CommandTypeEnum value) {
  _internal_set_commandtype(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.CollectdSource.commandtype)
}

// string identifier = 2;
inline void CollectdSource::clear_identifier() {
  identifier_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectdSource::identifier() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.CollectdSource.identifier)
  return _internal_identifier();
}
inline void CollectdSource::set_identifier(const std::string& value) {
  _internal_set_identifier(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.CollectdSource.identifier)
}
inline std::string* CollectdSource::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.CollectdSource.identifier)
  return _internal_mutable_identifier();
}
inline const std::string& CollectdSource::_internal_identifier() const {
  return identifier_.GetNoArena();
}
inline void CollectdSource::_internal_set_identifier(const std::string& value) {
  
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CollectdSource::set_identifier(std::string&& value) {
  
  identifier_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.CollectdSource.identifier)
}
inline void CollectdSource::set_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.CollectdSource.identifier)
}
inline void CollectdSource::set_identifier(const char* value, size_t size) {
  
  identifier_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.CollectdSource.identifier)
}
inline std::string* CollectdSource::_internal_mutable_identifier() {
  
  return identifier_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectdSource::release_identifier() {
  // @@protoc_insertion_point(field_release:signal_source_definition.CollectdSource.identifier)
  
  return identifier_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectdSource::set_allocated_identifier(std::string* identifier) {
  if (identifier != nullptr) {
    
  } else {
    
  }
  identifier_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), identifier);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.CollectdSource.identifier)
}

// string DataSourceName = 3;
inline void CollectdSource::clear_datasourcename() {
  datasourcename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CollectdSource::datasourcename() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.CollectdSource.DataSourceName)
  return _internal_datasourcename();
}
inline void CollectdSource::set_datasourcename(const std::string& value) {
  _internal_set_datasourcename(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.CollectdSource.DataSourceName)
}
inline std::string* CollectdSource::mutable_datasourcename() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.CollectdSource.DataSourceName)
  return _internal_mutable_datasourcename();
}
inline const std::string& CollectdSource::_internal_datasourcename() const {
  return datasourcename_.GetNoArena();
}
inline void CollectdSource::_internal_set_datasourcename(const std::string& value) {
  
  datasourcename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CollectdSource::set_datasourcename(std::string&& value) {
  
  datasourcename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.CollectdSource.DataSourceName)
}
inline void CollectdSource::set_datasourcename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datasourcename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.CollectdSource.DataSourceName)
}
inline void CollectdSource::set_datasourcename(const char* value, size_t size) {
  
  datasourcename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.CollectdSource.DataSourceName)
}
inline std::string* CollectdSource::_internal_mutable_datasourcename() {
  
  return datasourcename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CollectdSource::release_datasourcename() {
  // @@protoc_insertion_point(field_release:signal_source_definition.CollectdSource.DataSourceName)
  
  return datasourcename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CollectdSource::set_allocated_datasourcename(std::string* datasourcename) {
  if (datasourcename != nullptr) {
    
  } else {
    
  }
  datasourcename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datasourcename);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.CollectdSource.DataSourceName)
}

// -------------------------------------------------------------------

// EELSource

// string absolute_directory_path = 1;
inline void EELSource::clear_absolute_directory_path() {
  absolute_directory_path_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EELSource::absolute_directory_path() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EELSource.absolute_directory_path)
  return _internal_absolute_directory_path();
}
inline void EELSource::set_absolute_directory_path(const std::string& value) {
  _internal_set_absolute_directory_path(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EELSource.absolute_directory_path)
}
inline std::string* EELSource::mutable_absolute_directory_path() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.EELSource.absolute_directory_path)
  return _internal_mutable_absolute_directory_path();
}
inline const std::string& EELSource::_internal_absolute_directory_path() const {
  return absolute_directory_path_.GetNoArena();
}
inline void EELSource::_internal_set_absolute_directory_path(const std::string& value) {
  
  absolute_directory_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EELSource::set_absolute_directory_path(std::string&& value) {
  
  absolute_directory_path_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.EELSource.absolute_directory_path)
}
inline void EELSource::set_absolute_directory_path(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  absolute_directory_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.EELSource.absolute_directory_path)
}
inline void EELSource::set_absolute_directory_path(const char* value, size_t size) {
  
  absolute_directory_path_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.EELSource.absolute_directory_path)
}
inline std::string* EELSource::_internal_mutable_absolute_directory_path() {
  
  return absolute_directory_path_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EELSource::release_absolute_directory_path() {
  // @@protoc_insertion_point(field_release:signal_source_definition.EELSource.absolute_directory_path)
  
  return absolute_directory_path_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EELSource::set_allocated_absolute_directory_path(std::string* absolute_directory_path) {
  if (absolute_directory_path != nullptr) {
    
  } else {
    
  }
  absolute_directory_path_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), absolute_directory_path);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.EELSource.absolute_directory_path)
}

// string exact_filename = 2;
inline bool EELSource::_internal_has_exact_filename() const {
  return file_name_case() == kExactFilename;
}
inline void EELSource::set_has_exact_filename() {
  _oneof_case_[0] = kExactFilename;
}
inline void EELSource::clear_exact_filename() {
  if (_internal_has_exact_filename()) {
    file_name_.exact_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_file_name();
  }
}
inline const std::string& EELSource::exact_filename() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EELSource.exact_filename)
  return _internal_exact_filename();
}
inline void EELSource::set_exact_filename(const std::string& value) {
  _internal_set_exact_filename(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EELSource.exact_filename)
}
inline std::string* EELSource::mutable_exact_filename() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.EELSource.exact_filename)
  return _internal_mutable_exact_filename();
}
inline const std::string& EELSource::_internal_exact_filename() const {
  if (_internal_has_exact_filename()) {
    return file_name_.exact_filename_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EELSource::_internal_set_exact_filename(const std::string& value) {
  if (!_internal_has_exact_filename()) {
    clear_file_name();
    set_has_exact_filename();
    file_name_.exact_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  file_name_.exact_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EELSource::set_exact_filename(std::string&& value) {
  // @@protoc_insertion_point(field_set:signal_source_definition.EELSource.exact_filename)
  if (!_internal_has_exact_filename()) {
    clear_file_name();
    set_has_exact_filename();
    file_name_.exact_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  file_name_.exact_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.EELSource.exact_filename)
}
inline void EELSource::set_exact_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_exact_filename()) {
    clear_file_name();
    set_has_exact_filename();
    file_name_.exact_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  file_name_.exact_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.EELSource.exact_filename)
}
inline void EELSource::set_exact_filename(const char* value, size_t size) {
  if (!_internal_has_exact_filename()) {
    clear_file_name();
    set_has_exact_filename();
    file_name_.exact_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  file_name_.exact_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.EELSource.exact_filename)
}
inline std::string* EELSource::_internal_mutable_exact_filename() {
  if (!_internal_has_exact_filename()) {
    clear_file_name();
    set_has_exact_filename();
    file_name_.exact_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return file_name_.exact_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EELSource::release_exact_filename() {
  // @@protoc_insertion_point(field_release:signal_source_definition.EELSource.exact_filename)
  if (_internal_has_exact_filename()) {
    clear_has_file_name();
    return file_name_.exact_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void EELSource::set_allocated_exact_filename(std::string* exact_filename) {
  if (has_file_name()) {
    clear_file_name();
  }
  if (exact_filename != nullptr) {
    set_has_exact_filename();
    file_name_.exact_filename_.UnsafeSetDefault(exact_filename);
  }
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.EELSource.exact_filename)
}

// string regex_filename = 3;
inline bool EELSource::_internal_has_regex_filename() const {
  return file_name_case() == kRegexFilename;
}
inline void EELSource::set_has_regex_filename() {
  _oneof_case_[0] = kRegexFilename;
}
inline void EELSource::clear_regex_filename() {
  if (_internal_has_regex_filename()) {
    file_name_.regex_filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_file_name();
  }
}
inline const std::string& EELSource::regex_filename() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EELSource.regex_filename)
  return _internal_regex_filename();
}
inline void EELSource::set_regex_filename(const std::string& value) {
  _internal_set_regex_filename(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EELSource.regex_filename)
}
inline std::string* EELSource::mutable_regex_filename() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.EELSource.regex_filename)
  return _internal_mutable_regex_filename();
}
inline const std::string& EELSource::_internal_regex_filename() const {
  if (_internal_has_regex_filename()) {
    return file_name_.regex_filename_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void EELSource::_internal_set_regex_filename(const std::string& value) {
  if (!_internal_has_regex_filename()) {
    clear_file_name();
    set_has_regex_filename();
    file_name_.regex_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  file_name_.regex_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EELSource::set_regex_filename(std::string&& value) {
  // @@protoc_insertion_point(field_set:signal_source_definition.EELSource.regex_filename)
  if (!_internal_has_regex_filename()) {
    clear_file_name();
    set_has_regex_filename();
    file_name_.regex_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  file_name_.regex_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.EELSource.regex_filename)
}
inline void EELSource::set_regex_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_regex_filename()) {
    clear_file_name();
    set_has_regex_filename();
    file_name_.regex_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  file_name_.regex_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.EELSource.regex_filename)
}
inline void EELSource::set_regex_filename(const char* value, size_t size) {
  if (!_internal_has_regex_filename()) {
    clear_file_name();
    set_has_regex_filename();
    file_name_.regex_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  file_name_.regex_filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.EELSource.regex_filename)
}
inline std::string* EELSource::_internal_mutable_regex_filename() {
  if (!_internal_has_regex_filename()) {
    clear_file_name();
    set_has_regex_filename();
    file_name_.regex_filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return file_name_.regex_filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EELSource::release_regex_filename() {
  // @@protoc_insertion_point(field_release:signal_source_definition.EELSource.regex_filename)
  if (_internal_has_regex_filename()) {
    clear_has_file_name();
    return file_name_.regex_filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void EELSource::set_allocated_regex_filename(std::string* regex_filename) {
  if (has_file_name()) {
    clear_file_name();
  }
  if (regex_filename != nullptr) {
    set_has_regex_filename();
    file_name_.regex_filename_.UnsafeSetDefault(regex_filename);
  }
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.EELSource.regex_filename)
}

// string file_type = 4;
inline void EELSource::clear_file_type() {
  file_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EELSource::file_type() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EELSource.file_type)
  return _internal_file_type();
}
inline void EELSource::set_file_type(const std::string& value) {
  _internal_set_file_type(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EELSource.file_type)
}
inline std::string* EELSource::mutable_file_type() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.EELSource.file_type)
  return _internal_mutable_file_type();
}
inline const std::string& EELSource::_internal_file_type() const {
  return file_type_.GetNoArena();
}
inline void EELSource::_internal_set_file_type(const std::string& value) {
  
  file_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EELSource::set_file_type(std::string&& value) {
  
  file_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.EELSource.file_type)
}
inline void EELSource::set_file_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.EELSource.file_type)
}
inline void EELSource::set_file_type(const char* value, size_t size) {
  
  file_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.EELSource.file_type)
}
inline std::string* EELSource::_internal_mutable_file_type() {
  
  return file_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EELSource::release_file_type() {
  // @@protoc_insertion_point(field_release:signal_source_definition.EELSource.file_type)
  
  return file_type_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EELSource::set_allocated_file_type(std::string* file_type) {
  if (file_type != nullptr) {
    
  } else {
    
  }
  file_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_type);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.EELSource.file_type)
}

inline bool EELSource::has_file_name() const {
  return file_name_case() != FILE_NAME_NOT_SET;
}
inline void EELSource::clear_has_file_name() {
  _oneof_case_[0] = FILE_NAME_NOT_SET;
}
inline EELSource::FileNameCase EELSource::file_name_case() const {
  return EELSource::FileNameCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CanSource

// string source_name = 1;
inline void CanSource::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CanSource::source_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.CanSource.source_name)
  return _internal_source_name();
}
inline void CanSource::set_source_name(const std::string& value) {
  _internal_set_source_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.CanSource.source_name)
}
inline std::string* CanSource::mutable_source_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.CanSource.source_name)
  return _internal_mutable_source_name();
}
inline const std::string& CanSource::_internal_source_name() const {
  return source_name_.GetNoArena();
}
inline void CanSource::_internal_set_source_name(const std::string& value) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CanSource::set_source_name(std::string&& value) {
  
  source_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.CanSource.source_name)
}
inline void CanSource::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.CanSource.source_name)
}
inline void CanSource::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.CanSource.source_name)
}
inline std::string* CanSource::_internal_mutable_source_name() {
  
  return source_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CanSource::release_source_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.CanSource.source_name)
  
  return source_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CanSource::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.CanSource.source_name)
}

// string source_version = 2;
inline void CanSource::clear_source_version() {
  source_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CanSource::source_version() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.CanSource.source_version)
  return _internal_source_version();
}
inline void CanSource::set_source_version(const std::string& value) {
  _internal_set_source_version(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.CanSource.source_version)
}
inline std::string* CanSource::mutable_source_version() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.CanSource.source_version)
  return _internal_mutable_source_version();
}
inline const std::string& CanSource::_internal_source_version() const {
  return source_version_.GetNoArena();
}
inline void CanSource::_internal_set_source_version(const std::string& value) {
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CanSource::set_source_version(std::string&& value) {
  
  source_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.CanSource.source_version)
}
inline void CanSource::set_source_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.CanSource.source_version)
}
inline void CanSource::set_source_version(const char* value, size_t size) {
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.CanSource.source_version)
}
inline std::string* CanSource::_internal_mutable_source_version() {
  
  return source_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CanSource::release_source_version() {
  // @@protoc_insertion_point(field_release:signal_source_definition.CanSource.source_version)
  
  return source_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CanSource::set_allocated_source_version(std::string* source_version) {
  if (source_version != nullptr) {
    
  } else {
    
  }
  source_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_version);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.CanSource.source_version)
}

// string frame_name = 3;
inline void CanSource::clear_frame_name() {
  frame_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CanSource::frame_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.CanSource.frame_name)
  return _internal_frame_name();
}
inline void CanSource::set_frame_name(const std::string& value) {
  _internal_set_frame_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.CanSource.frame_name)
}
inline std::string* CanSource::mutable_frame_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.CanSource.frame_name)
  return _internal_mutable_frame_name();
}
inline const std::string& CanSource::_internal_frame_name() const {
  return frame_name_.GetNoArena();
}
inline void CanSource::_internal_set_frame_name(const std::string& value) {
  
  frame_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CanSource::set_frame_name(std::string&& value) {
  
  frame_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.CanSource.frame_name)
}
inline void CanSource::set_frame_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.CanSource.frame_name)
}
inline void CanSource::set_frame_name(const char* value, size_t size) {
  
  frame_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.CanSource.frame_name)
}
inline std::string* CanSource::_internal_mutable_frame_name() {
  
  return frame_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CanSource::release_frame_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.CanSource.frame_name)
  
  return frame_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CanSource::set_allocated_frame_name(std::string* frame_name) {
  if (frame_name != nullptr) {
    
  } else {
    
  }
  frame_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.CanSource.frame_name)
}

// string signal_name = 4;
inline void CanSource::clear_signal_name() {
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CanSource::signal_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.CanSource.signal_name)
  return _internal_signal_name();
}
inline void CanSource::set_signal_name(const std::string& value) {
  _internal_set_signal_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.CanSource.signal_name)
}
inline std::string* CanSource::mutable_signal_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.CanSource.signal_name)
  return _internal_mutable_signal_name();
}
inline const std::string& CanSource::_internal_signal_name() const {
  return signal_name_.GetNoArena();
}
inline void CanSource::_internal_set_signal_name(const std::string& value) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CanSource::set_signal_name(std::string&& value) {
  
  signal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.CanSource.signal_name)
}
inline void CanSource::set_signal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.CanSource.signal_name)
}
inline void CanSource::set_signal_name(const char* value, size_t size) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.CanSource.signal_name)
}
inline std::string* CanSource::_internal_mutable_signal_name() {
  
  return signal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CanSource::release_signal_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.CanSource.signal_name)
  
  return signal_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CanSource::set_allocated_signal_name(std::string* signal_name) {
  if (signal_name != nullptr) {
    
  } else {
    
  }
  signal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.CanSource.signal_name)
}

// -------------------------------------------------------------------

// LinSource

// string source_name = 1;
inline void LinSource::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LinSource::source_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.LinSource.source_name)
  return _internal_source_name();
}
inline void LinSource::set_source_name(const std::string& value) {
  _internal_set_source_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.LinSource.source_name)
}
inline std::string* LinSource::mutable_source_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.LinSource.source_name)
  return _internal_mutable_source_name();
}
inline const std::string& LinSource::_internal_source_name() const {
  return source_name_.GetNoArena();
}
inline void LinSource::_internal_set_source_name(const std::string& value) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LinSource::set_source_name(std::string&& value) {
  
  source_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.LinSource.source_name)
}
inline void LinSource::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.LinSource.source_name)
}
inline void LinSource::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.LinSource.source_name)
}
inline std::string* LinSource::_internal_mutable_source_name() {
  
  return source_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LinSource::release_source_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.LinSource.source_name)
  
  return source_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LinSource::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.LinSource.source_name)
}

// string source_version = 2;
inline void LinSource::clear_source_version() {
  source_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LinSource::source_version() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.LinSource.source_version)
  return _internal_source_version();
}
inline void LinSource::set_source_version(const std::string& value) {
  _internal_set_source_version(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.LinSource.source_version)
}
inline std::string* LinSource::mutable_source_version() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.LinSource.source_version)
  return _internal_mutable_source_version();
}
inline const std::string& LinSource::_internal_source_version() const {
  return source_version_.GetNoArena();
}
inline void LinSource::_internal_set_source_version(const std::string& value) {
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LinSource::set_source_version(std::string&& value) {
  
  source_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.LinSource.source_version)
}
inline void LinSource::set_source_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.LinSource.source_version)
}
inline void LinSource::set_source_version(const char* value, size_t size) {
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.LinSource.source_version)
}
inline std::string* LinSource::_internal_mutable_source_version() {
  
  return source_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LinSource::release_source_version() {
  // @@protoc_insertion_point(field_release:signal_source_definition.LinSource.source_version)
  
  return source_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LinSource::set_allocated_source_version(std::string* source_version) {
  if (source_version != nullptr) {
    
  } else {
    
  }
  source_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_version);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.LinSource.source_version)
}

// string frame_name = 3;
inline void LinSource::clear_frame_name() {
  frame_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LinSource::frame_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.LinSource.frame_name)
  return _internal_frame_name();
}
inline void LinSource::set_frame_name(const std::string& value) {
  _internal_set_frame_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.LinSource.frame_name)
}
inline std::string* LinSource::mutable_frame_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.LinSource.frame_name)
  return _internal_mutable_frame_name();
}
inline const std::string& LinSource::_internal_frame_name() const {
  return frame_name_.GetNoArena();
}
inline void LinSource::_internal_set_frame_name(const std::string& value) {
  
  frame_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LinSource::set_frame_name(std::string&& value) {
  
  frame_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.LinSource.frame_name)
}
inline void LinSource::set_frame_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.LinSource.frame_name)
}
inline void LinSource::set_frame_name(const char* value, size_t size) {
  
  frame_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.LinSource.frame_name)
}
inline std::string* LinSource::_internal_mutable_frame_name() {
  
  return frame_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LinSource::release_frame_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.LinSource.frame_name)
  
  return frame_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LinSource::set_allocated_frame_name(std::string* frame_name) {
  if (frame_name != nullptr) {
    
  } else {
    
  }
  frame_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.LinSource.frame_name)
}

// string signal_name = 4;
inline void LinSource::clear_signal_name() {
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LinSource::signal_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.LinSource.signal_name)
  return _internal_signal_name();
}
inline void LinSource::set_signal_name(const std::string& value) {
  _internal_set_signal_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.LinSource.signal_name)
}
inline std::string* LinSource::mutable_signal_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.LinSource.signal_name)
  return _internal_mutable_signal_name();
}
inline const std::string& LinSource::_internal_signal_name() const {
  return signal_name_.GetNoArena();
}
inline void LinSource::_internal_set_signal_name(const std::string& value) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LinSource::set_signal_name(std::string&& value) {
  
  signal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.LinSource.signal_name)
}
inline void LinSource::set_signal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.LinSource.signal_name)
}
inline void LinSource::set_signal_name(const char* value, size_t size) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.LinSource.signal_name)
}
inline std::string* LinSource::_internal_mutable_signal_name() {
  
  return signal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LinSource::release_signal_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.LinSource.signal_name)
  
  return signal_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LinSource::set_allocated_signal_name(std::string* signal_name) {
  if (signal_name != nullptr) {
    
  } else {
    
  }
  signal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.LinSource.signal_name)
}

// -------------------------------------------------------------------

// EthernetSource

// string source_name = 1;
inline void EthernetSource::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthernetSource::source_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EthernetSource.source_name)
  return _internal_source_name();
}
inline void EthernetSource::set_source_name(const std::string& value) {
  _internal_set_source_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EthernetSource.source_name)
}
inline std::string* EthernetSource::mutable_source_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.EthernetSource.source_name)
  return _internal_mutable_source_name();
}
inline const std::string& EthernetSource::_internal_source_name() const {
  return source_name_.GetNoArena();
}
inline void EthernetSource::_internal_set_source_name(const std::string& value) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthernetSource::set_source_name(std::string&& value) {
  
  source_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.EthernetSource.source_name)
}
inline void EthernetSource::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.EthernetSource.source_name)
}
inline void EthernetSource::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.EthernetSource.source_name)
}
inline std::string* EthernetSource::_internal_mutable_source_name() {
  
  return source_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthernetSource::release_source_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.EthernetSource.source_name)
  
  return source_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthernetSource::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.EthernetSource.source_name)
}

// string source_version = 2;
inline void EthernetSource::clear_source_version() {
  source_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthernetSource::source_version() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EthernetSource.source_version)
  return _internal_source_version();
}
inline void EthernetSource::set_source_version(const std::string& value) {
  _internal_set_source_version(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EthernetSource.source_version)
}
inline std::string* EthernetSource::mutable_source_version() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.EthernetSource.source_version)
  return _internal_mutable_source_version();
}
inline const std::string& EthernetSource::_internal_source_version() const {
  return source_version_.GetNoArena();
}
inline void EthernetSource::_internal_set_source_version(const std::string& value) {
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthernetSource::set_source_version(std::string&& value) {
  
  source_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.EthernetSource.source_version)
}
inline void EthernetSource::set_source_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.EthernetSource.source_version)
}
inline void EthernetSource::set_source_version(const char* value, size_t size) {
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.EthernetSource.source_version)
}
inline std::string* EthernetSource::_internal_mutable_source_version() {
  
  return source_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthernetSource::release_source_version() {
  // @@protoc_insertion_point(field_release:signal_source_definition.EthernetSource.source_version)
  
  return source_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthernetSource::set_allocated_source_version(std::string* source_version) {
  if (source_version != nullptr) {
    
  } else {
    
  }
  source_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_version);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.EthernetSource.source_version)
}

// uint32 vlan_id = 3;
inline void EthernetSource::clear_vlan_id() {
  vlan_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthernetSource::_internal_vlan_id() const {
  return vlan_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EthernetSource::vlan_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EthernetSource.vlan_id)
  return _internal_vlan_id();
}
inline void EthernetSource::_internal_set_vlan_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vlan_id_ = value;
}
inline void EthernetSource::set_vlan_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vlan_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EthernetSource.vlan_id)
}

// string frame_name = 4;
inline void EthernetSource::clear_frame_name() {
  frame_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthernetSource::frame_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EthernetSource.frame_name)
  return _internal_frame_name();
}
inline void EthernetSource::set_frame_name(const std::string& value) {
  _internal_set_frame_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EthernetSource.frame_name)
}
inline std::string* EthernetSource::mutable_frame_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.EthernetSource.frame_name)
  return _internal_mutable_frame_name();
}
inline const std::string& EthernetSource::_internal_frame_name() const {
  return frame_name_.GetNoArena();
}
inline void EthernetSource::_internal_set_frame_name(const std::string& value) {
  
  frame_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthernetSource::set_frame_name(std::string&& value) {
  
  frame_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.EthernetSource.frame_name)
}
inline void EthernetSource::set_frame_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  frame_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.EthernetSource.frame_name)
}
inline void EthernetSource::set_frame_name(const char* value, size_t size) {
  
  frame_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.EthernetSource.frame_name)
}
inline std::string* EthernetSource::_internal_mutable_frame_name() {
  
  return frame_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthernetSource::release_frame_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.EthernetSource.frame_name)
  
  return frame_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthernetSource::set_allocated_frame_name(std::string* frame_name) {
  if (frame_name != nullptr) {
    
  } else {
    
  }
  frame_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.EthernetSource.frame_name)
}

// string signal_name = 5;
inline void EthernetSource::clear_signal_name() {
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EthernetSource::signal_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EthernetSource.signal_name)
  return _internal_signal_name();
}
inline void EthernetSource::set_signal_name(const std::string& value) {
  _internal_set_signal_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EthernetSource.signal_name)
}
inline std::string* EthernetSource::mutable_signal_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.EthernetSource.signal_name)
  return _internal_mutable_signal_name();
}
inline const std::string& EthernetSource::_internal_signal_name() const {
  return signal_name_.GetNoArena();
}
inline void EthernetSource::_internal_set_signal_name(const std::string& value) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EthernetSource::set_signal_name(std::string&& value) {
  
  signal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.EthernetSource.signal_name)
}
inline void EthernetSource::set_signal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.EthernetSource.signal_name)
}
inline void EthernetSource::set_signal_name(const char* value, size_t size) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.EthernetSource.signal_name)
}
inline std::string* EthernetSource::_internal_mutable_signal_name() {
  
  return signal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EthernetSource::release_signal_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.EthernetSource.signal_name)
  
  return signal_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EthernetSource::set_allocated_signal_name(std::string* signal_name) {
  if (signal_name != nullptr) {
    
  } else {
    
  }
  signal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.EthernetSource.signal_name)
}

// -------------------------------------------------------------------

// Scaling

// double numerator_linear_factor = 1;
inline void Scaling::clear_numerator_linear_factor() {
  numerator_linear_factor_ = 0;
}
inline double Scaling::_internal_numerator_linear_factor() const {
  return numerator_linear_factor_;
}
inline double Scaling::numerator_linear_factor() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Scaling.numerator_linear_factor)
  return _internal_numerator_linear_factor();
}
inline void Scaling::_internal_set_numerator_linear_factor(double value) {
  
  numerator_linear_factor_ = value;
}
inline void Scaling::set_numerator_linear_factor(double value) {
  _internal_set_numerator_linear_factor(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Scaling.numerator_linear_factor)
}

// double numerator_offset = 2;
inline void Scaling::clear_numerator_offset() {
  numerator_offset_ = 0;
}
inline double Scaling::_internal_numerator_offset() const {
  return numerator_offset_;
}
inline double Scaling::numerator_offset() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Scaling.numerator_offset)
  return _internal_numerator_offset();
}
inline void Scaling::_internal_set_numerator_offset(double value) {
  
  numerator_offset_ = value;
}
inline void Scaling::set_numerator_offset(double value) {
  _internal_set_numerator_offset(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Scaling.numerator_offset)
}

// double denominator_offset = 3;
inline void Scaling::clear_denominator_offset() {
  denominator_offset_ = 0;
}
inline double Scaling::_internal_denominator_offset() const {
  return denominator_offset_;
}
inline double Scaling::denominator_offset() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Scaling.denominator_offset)
  return _internal_denominator_offset();
}
inline void Scaling::_internal_set_denominator_offset(double value) {
  
  denominator_offset_ = value;
}
inline void Scaling::set_denominator_offset(double value) {
  _internal_set_denominator_offset(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Scaling.denominator_offset)
}

// -------------------------------------------------------------------

// NetworkSource

// uint32 service_id = 1;
inline void NetworkSource::clear_service_id() {
  service_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkSource::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkSource::service_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.service_id)
  return _internal_service_id();
}
inline void NetworkSource::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  service_id_ = value;
}
inline void NetworkSource::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.NetworkSource.service_id)
}

// string service_name = 2;
inline void NetworkSource::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkSource::service_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.service_name)
  return _internal_service_name();
}
inline void NetworkSource::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.NetworkSource.service_name)
}
inline std::string* NetworkSource::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.NetworkSource.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& NetworkSource::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void NetworkSource::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkSource::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.NetworkSource.service_name)
}
inline void NetworkSource::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.NetworkSource.service_name)
}
inline void NetworkSource::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.NetworkSource.service_name)
}
inline std::string* NetworkSource::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkSource::release_service_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.NetworkSource.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSource::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.NetworkSource.service_name)
}

// repeated .signal_source_definition.EventGroup event_group = 3;
inline int NetworkSource::_internal_event_group_size() const {
  return event_group_.size();
}
inline int NetworkSource::event_group_size() const {
  return _internal_event_group_size();
}
inline void NetworkSource::clear_event_group() {
  event_group_.Clear();
}
inline ::signal_source_definition::EventGroup* NetworkSource::mutable_event_group(int index) {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.NetworkSource.event_group)
  return event_group_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::EventGroup >*
NetworkSource::mutable_event_group() {
  // @@protoc_insertion_point(field_mutable_list:signal_source_definition.NetworkSource.event_group)
  return &event_group_;
}
inline const ::signal_source_definition::EventGroup& NetworkSource::_internal_event_group(int index) const {
  return event_group_.Get(index);
}
inline const ::signal_source_definition::EventGroup& NetworkSource::event_group(int index) const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.event_group)
  return _internal_event_group(index);
}
inline ::signal_source_definition::EventGroup* NetworkSource::_internal_add_event_group() {
  return event_group_.Add();
}
inline ::signal_source_definition::EventGroup* NetworkSource::add_event_group() {
  // @@protoc_insertion_point(field_add:signal_source_definition.NetworkSource.event_group)
  return _internal_add_event_group();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::EventGroup >&
NetworkSource::event_group() const {
  // @@protoc_insertion_point(field_list:signal_source_definition.NetworkSource.event_group)
  return event_group_;
}

// uint32 event_id = 4;
inline void NetworkSource::clear_event_id() {
  event_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkSource::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 NetworkSource::event_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.event_id)
  return _internal_event_id();
}
inline void NetworkSource::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_id_ = value;
}
inline void NetworkSource::set_event_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.NetworkSource.event_id)
}

// string event_name = 5;
inline void NetworkSource::clear_event_name() {
  event_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkSource::event_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.event_name)
  return _internal_event_name();
}
inline void NetworkSource::set_event_name(const std::string& value) {
  _internal_set_event_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.NetworkSource.event_name)
}
inline std::string* NetworkSource::mutable_event_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.NetworkSource.event_name)
  return _internal_mutable_event_name();
}
inline const std::string& NetworkSource::_internal_event_name() const {
  return event_name_.GetNoArena();
}
inline void NetworkSource::_internal_set_event_name(const std::string& value) {
  
  event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkSource::set_event_name(std::string&& value) {
  
  event_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.NetworkSource.event_name)
}
inline void NetworkSource::set_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.NetworkSource.event_name)
}
inline void NetworkSource::set_event_name(const char* value, size_t size) {
  
  event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.NetworkSource.event_name)
}
inline std::string* NetworkSource::_internal_mutable_event_name() {
  
  return event_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkSource::release_event_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.NetworkSource.event_name)
  
  return event_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSource::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    
  } else {
    
  }
  event_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.NetworkSource.event_name)
}

// string pdu_name = 6;
inline void NetworkSource::clear_pdu_name() {
  pdu_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkSource::pdu_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.pdu_name)
  return _internal_pdu_name();
}
inline void NetworkSource::set_pdu_name(const std::string& value) {
  _internal_set_pdu_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.NetworkSource.pdu_name)
}
inline std::string* NetworkSource::mutable_pdu_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.NetworkSource.pdu_name)
  return _internal_mutable_pdu_name();
}
inline const std::string& NetworkSource::_internal_pdu_name() const {
  return pdu_name_.GetNoArena();
}
inline void NetworkSource::_internal_set_pdu_name(const std::string& value) {
  
  pdu_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkSource::set_pdu_name(std::string&& value) {
  
  pdu_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.NetworkSource.pdu_name)
}
inline void NetworkSource::set_pdu_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pdu_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.NetworkSource.pdu_name)
}
inline void NetworkSource::set_pdu_name(const char* value, size_t size) {
  
  pdu_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.NetworkSource.pdu_name)
}
inline std::string* NetworkSource::_internal_mutable_pdu_name() {
  
  return pdu_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkSource::release_pdu_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.NetworkSource.pdu_name)
  
  return pdu_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSource::set_allocated_pdu_name(std::string* pdu_name) {
  if (pdu_name != nullptr) {
    
  } else {
    
  }
  pdu_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pdu_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.NetworkSource.pdu_name)
}

// string signal_group_name = 7;
inline void NetworkSource::clear_signal_group_name() {
  signal_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkSource::signal_group_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.signal_group_name)
  return _internal_signal_group_name();
}
inline void NetworkSource::set_signal_group_name(const std::string& value) {
  _internal_set_signal_group_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.NetworkSource.signal_group_name)
}
inline std::string* NetworkSource::mutable_signal_group_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.NetworkSource.signal_group_name)
  return _internal_mutable_signal_group_name();
}
inline const std::string& NetworkSource::_internal_signal_group_name() const {
  return signal_group_name_.GetNoArena();
}
inline void NetworkSource::_internal_set_signal_group_name(const std::string& value) {
  
  signal_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkSource::set_signal_group_name(std::string&& value) {
  
  signal_group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.NetworkSource.signal_group_name)
}
inline void NetworkSource::set_signal_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.NetworkSource.signal_group_name)
}
inline void NetworkSource::set_signal_group_name(const char* value, size_t size) {
  
  signal_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.NetworkSource.signal_group_name)
}
inline std::string* NetworkSource::_internal_mutable_signal_group_name() {
  
  return signal_group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkSource::release_signal_group_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.NetworkSource.signal_group_name)
  
  return signal_group_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSource::set_allocated_signal_group_name(std::string* signal_group_name) {
  if (signal_group_name != nullptr) {
    
  } else {
    
  }
  signal_group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_group_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.NetworkSource.signal_group_name)
}

// string signal_name = 8;
inline void NetworkSource::clear_signal_name() {
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NetworkSource::signal_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.signal_name)
  return _internal_signal_name();
}
inline void NetworkSource::set_signal_name(const std::string& value) {
  _internal_set_signal_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.NetworkSource.signal_name)
}
inline std::string* NetworkSource::mutable_signal_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.NetworkSource.signal_name)
  return _internal_mutable_signal_name();
}
inline const std::string& NetworkSource::_internal_signal_name() const {
  return signal_name_.GetNoArena();
}
inline void NetworkSource::_internal_set_signal_name(const std::string& value) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NetworkSource::set_signal_name(std::string&& value) {
  
  signal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.NetworkSource.signal_name)
}
inline void NetworkSource::set_signal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.NetworkSource.signal_name)
}
inline void NetworkSource::set_signal_name(const char* value, size_t size) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.NetworkSource.signal_name)
}
inline std::string* NetworkSource::_internal_mutable_signal_name() {
  
  return signal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NetworkSource::release_signal_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.NetworkSource.signal_name)
  
  return signal_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkSource::set_allocated_signal_name(std::string* signal_name) {
  if (signal_name != nullptr) {
    
  } else {
    
  }
  signal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.NetworkSource.signal_name)
}

// repeated .signal_source_definition.Element element_path = 9;
inline int NetworkSource::_internal_element_path_size() const {
  return element_path_.size();
}
inline int NetworkSource::element_path_size() const {
  return _internal_element_path_size();
}
inline void NetworkSource::clear_element_path() {
  element_path_.Clear();
}
inline ::signal_source_definition::Element* NetworkSource::mutable_element_path(int index) {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.NetworkSource.element_path)
  return element_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Element >*
NetworkSource::mutable_element_path() {
  // @@protoc_insertion_point(field_mutable_list:signal_source_definition.NetworkSource.element_path)
  return &element_path_;
}
inline const ::signal_source_definition::Element& NetworkSource::_internal_element_path(int index) const {
  return element_path_.Get(index);
}
inline const ::signal_source_definition::Element& NetworkSource::element_path(int index) const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.element_path)
  return _internal_element_path(index);
}
inline ::signal_source_definition::Element* NetworkSource::_internal_add_element_path() {
  return element_path_.Add();
}
inline ::signal_source_definition::Element* NetworkSource::add_element_path() {
  // @@protoc_insertion_point(field_add:signal_source_definition.NetworkSource.element_path)
  return _internal_add_element_path();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Element >&
NetworkSource::element_path() const {
  // @@protoc_insertion_point(field_list:signal_source_definition.NetworkSource.element_path)
  return element_path_;
}

// bool scaling = 10;
inline void NetworkSource::clear_scaling() {
  scaling_ = false;
}
inline bool NetworkSource::_internal_scaling() const {
  return scaling_;
}
inline bool NetworkSource::scaling() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.scaling)
  return _internal_scaling();
}
inline void NetworkSource::_internal_set_scaling(bool value) {
  
  scaling_ = value;
}
inline void NetworkSource::set_scaling(bool value) {
  _internal_set_scaling(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.NetworkSource.scaling)
}

// .signal_source_definition.Scaling scaling_values = 11;
inline bool NetworkSource::_internal_has_scaling_values() const {
  return this != internal_default_instance() && scaling_values_ != nullptr;
}
inline bool NetworkSource::has_scaling_values() const {
  return _internal_has_scaling_values();
}
inline void NetworkSource::clear_scaling_values() {
  if (GetArenaNoVirtual() == nullptr && scaling_values_ != nullptr) {
    delete scaling_values_;
  }
  scaling_values_ = nullptr;
}
inline const ::signal_source_definition::Scaling& NetworkSource::_internal_scaling_values() const {
  const ::signal_source_definition::Scaling* p = scaling_values_;
  return p != nullptr ? *p : *reinterpret_cast<const ::signal_source_definition::Scaling*>(
      &::signal_source_definition::_Scaling_default_instance_);
}
inline const ::signal_source_definition::Scaling& NetworkSource::scaling_values() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.scaling_values)
  return _internal_scaling_values();
}
inline ::signal_source_definition::Scaling* NetworkSource::release_scaling_values() {
  // @@protoc_insertion_point(field_release:signal_source_definition.NetworkSource.scaling_values)
  
  ::signal_source_definition::Scaling* temp = scaling_values_;
  scaling_values_ = nullptr;
  return temp;
}
inline ::signal_source_definition::Scaling* NetworkSource::_internal_mutable_scaling_values() {
  
  if (scaling_values_ == nullptr) {
    auto* p = CreateMaybeMessage<::signal_source_definition::Scaling>(GetArenaNoVirtual());
    scaling_values_ = p;
  }
  return scaling_values_;
}
inline ::signal_source_definition::Scaling* NetworkSource::mutable_scaling_values() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.NetworkSource.scaling_values)
  return _internal_mutable_scaling_values();
}
inline void NetworkSource::set_allocated_scaling_values(::signal_source_definition::Scaling* scaling_values) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete scaling_values_;
  }
  if (scaling_values) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      scaling_values = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scaling_values, submessage_arena);
    }
    
  } else {
    
  }
  scaling_values_ = scaling_values;
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.NetworkSource.scaling_values)
}

// .signal_source_definition.SternbildAPI sternbild_api = 12;
inline bool NetworkSource::_internal_has_sternbild_api() const {
  return this != internal_default_instance() && sternbild_api_ != nullptr;
}
inline bool NetworkSource::has_sternbild_api() const {
  return _internal_has_sternbild_api();
}
inline void NetworkSource::clear_sternbild_api() {
  if (GetArenaNoVirtual() == nullptr && sternbild_api_ != nullptr) {
    delete sternbild_api_;
  }
  sternbild_api_ = nullptr;
}
inline const ::signal_source_definition::SternbildAPI& NetworkSource::_internal_sternbild_api() const {
  const ::signal_source_definition::SternbildAPI* p = sternbild_api_;
  return p != nullptr ? *p : *reinterpret_cast<const ::signal_source_definition::SternbildAPI*>(
      &::signal_source_definition::_SternbildAPI_default_instance_);
}
inline const ::signal_source_definition::SternbildAPI& NetworkSource::sternbild_api() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.NetworkSource.sternbild_api)
  return _internal_sternbild_api();
}
inline ::signal_source_definition::SternbildAPI* NetworkSource::release_sternbild_api() {
  // @@protoc_insertion_point(field_release:signal_source_definition.NetworkSource.sternbild_api)
  
  ::signal_source_definition::SternbildAPI* temp = sternbild_api_;
  sternbild_api_ = nullptr;
  return temp;
}
inline ::signal_source_definition::SternbildAPI* NetworkSource::_internal_mutable_sternbild_api() {
  
  if (sternbild_api_ == nullptr) {
    auto* p = CreateMaybeMessage<::signal_source_definition::SternbildAPI>(GetArenaNoVirtual());
    sternbild_api_ = p;
  }
  return sternbild_api_;
}
inline ::signal_source_definition::SternbildAPI* NetworkSource::mutable_sternbild_api() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.NetworkSource.sternbild_api)
  return _internal_mutable_sternbild_api();
}
inline void NetworkSource::set_allocated_sternbild_api(::signal_source_definition::SternbildAPI* sternbild_api) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sternbild_api_;
  }
  if (sternbild_api) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sternbild_api = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sternbild_api, submessage_arena);
    }
    
  } else {
    
  }
  sternbild_api_ = sternbild_api;
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.NetworkSource.sternbild_api)
}

// -------------------------------------------------------------------

// EventGroup

// uint32 event_group_id = 1;
inline void EventGroup::clear_event_group_id() {
  event_group_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventGroup::_internal_event_group_id() const {
  return event_group_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EventGroup::event_group_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EventGroup.event_group_id)
  return _internal_event_group_id();
}
inline void EventGroup::_internal_set_event_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  event_group_id_ = value;
}
inline void EventGroup::set_event_group_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_event_group_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EventGroup.event_group_id)
}

// string event_group_name = 2;
inline void EventGroup::clear_event_group_name() {
  event_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventGroup::event_group_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.EventGroup.event_group_name)
  return _internal_event_group_name();
}
inline void EventGroup::set_event_group_name(const std::string& value) {
  _internal_set_event_group_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.EventGroup.event_group_name)
}
inline std::string* EventGroup::mutable_event_group_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.EventGroup.event_group_name)
  return _internal_mutable_event_group_name();
}
inline const std::string& EventGroup::_internal_event_group_name() const {
  return event_group_name_.GetNoArena();
}
inline void EventGroup::_internal_set_event_group_name(const std::string& value) {
  
  event_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EventGroup::set_event_group_name(std::string&& value) {
  
  event_group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.EventGroup.event_group_name)
}
inline void EventGroup::set_event_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.EventGroup.event_group_name)
}
inline void EventGroup::set_event_group_name(const char* value, size_t size) {
  
  event_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.EventGroup.event_group_name)
}
inline std::string* EventGroup::_internal_mutable_event_group_name() {
  
  return event_group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventGroup::release_event_group_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.EventGroup.event_group_name)
  
  return event_group_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventGroup::set_allocated_event_group_name(std::string* event_group_name) {
  if (event_group_name != nullptr) {
    
  } else {
    
  }
  event_group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event_group_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.EventGroup.event_group_name)
}

// -------------------------------------------------------------------

// Element

// int32 index = 1;
inline void Element::clear_index() {
  index_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Element::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Element::index() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Element.index)
  return _internal_index();
}
inline void Element::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  index_ = value;
}
inline void Element::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Element.index)
}

// uint32 sequence_number = 2;
inline void Element::clear_sequence_number() {
  sequence_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Element::_internal_sequence_number() const {
  return sequence_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Element::sequence_number() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Element.sequence_number)
  return _internal_sequence_number();
}
inline void Element::_internal_set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  sequence_number_ = value;
}
inline void Element::set_sequence_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Element.sequence_number)
}

// string name = 3;
inline void Element::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Element::name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Element.name)
  return _internal_name();
}
inline void Element::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Element.name)
}
inline std::string* Element::mutable_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.Element.name)
  return _internal_mutable_name();
}
inline const std::string& Element::_internal_name() const {
  return name_.GetNoArena();
}
inline void Element::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Element::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.Element.name)
}
inline void Element::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.Element.name)
}
inline void Element::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.Element.name)
}
inline std::string* Element::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Element::release_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.Element.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Element::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.Element.name)
}

// -------------------------------------------------------------------

// SternbildAPI

// string sternbild_service_name = 1;
inline void SternbildAPI::clear_sternbild_service_name() {
  sternbild_service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SternbildAPI::sternbild_service_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.SternbildAPI.sternbild_service_name)
  return _internal_sternbild_service_name();
}
inline void SternbildAPI::set_sternbild_service_name(const std::string& value) {
  _internal_set_sternbild_service_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.SternbildAPI.sternbild_service_name)
}
inline std::string* SternbildAPI::mutable_sternbild_service_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.SternbildAPI.sternbild_service_name)
  return _internal_mutable_sternbild_service_name();
}
inline const std::string& SternbildAPI::_internal_sternbild_service_name() const {
  return sternbild_service_name_.GetNoArena();
}
inline void SternbildAPI::_internal_set_sternbild_service_name(const std::string& value) {
  
  sternbild_service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SternbildAPI::set_sternbild_service_name(std::string&& value) {
  
  sternbild_service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.SternbildAPI.sternbild_service_name)
}
inline void SternbildAPI::set_sternbild_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sternbild_service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.SternbildAPI.sternbild_service_name)
}
inline void SternbildAPI::set_sternbild_service_name(const char* value, size_t size) {
  
  sternbild_service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.SternbildAPI.sternbild_service_name)
}
inline std::string* SternbildAPI::_internal_mutable_sternbild_service_name() {
  
  return sternbild_service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SternbildAPI::release_sternbild_service_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.SternbildAPI.sternbild_service_name)
  
  return sternbild_service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SternbildAPI::set_allocated_sternbild_service_name(std::string* sternbild_service_name) {
  if (sternbild_service_name != nullptr) {
    
  } else {
    
  }
  sternbild_service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sternbild_service_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.SternbildAPI.sternbild_service_name)
}

// string sternbild_signal_group_name = 2;
inline void SternbildAPI::clear_sternbild_signal_group_name() {
  sternbild_signal_group_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SternbildAPI::sternbild_signal_group_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.SternbildAPI.sternbild_signal_group_name)
  return _internal_sternbild_signal_group_name();
}
inline void SternbildAPI::set_sternbild_signal_group_name(const std::string& value) {
  _internal_set_sternbild_signal_group_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.SternbildAPI.sternbild_signal_group_name)
}
inline std::string* SternbildAPI::mutable_sternbild_signal_group_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.SternbildAPI.sternbild_signal_group_name)
  return _internal_mutable_sternbild_signal_group_name();
}
inline const std::string& SternbildAPI::_internal_sternbild_signal_group_name() const {
  return sternbild_signal_group_name_.GetNoArena();
}
inline void SternbildAPI::_internal_set_sternbild_signal_group_name(const std::string& value) {
  
  sternbild_signal_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SternbildAPI::set_sternbild_signal_group_name(std::string&& value) {
  
  sternbild_signal_group_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.SternbildAPI.sternbild_signal_group_name)
}
inline void SternbildAPI::set_sternbild_signal_group_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sternbild_signal_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.SternbildAPI.sternbild_signal_group_name)
}
inline void SternbildAPI::set_sternbild_signal_group_name(const char* value, size_t size) {
  
  sternbild_signal_group_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.SternbildAPI.sternbild_signal_group_name)
}
inline std::string* SternbildAPI::_internal_mutable_sternbild_signal_group_name() {
  
  return sternbild_signal_group_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SternbildAPI::release_sternbild_signal_group_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.SternbildAPI.sternbild_signal_group_name)
  
  return sternbild_signal_group_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SternbildAPI::set_allocated_sternbild_signal_group_name(std::string* sternbild_signal_group_name) {
  if (sternbild_signal_group_name != nullptr) {
    
  } else {
    
  }
  sternbild_signal_group_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sternbild_signal_group_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.SternbildAPI.sternbild_signal_group_name)
}

// string sternbild_event_name = 3;
inline void SternbildAPI::clear_sternbild_event_name() {
  sternbild_event_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SternbildAPI::sternbild_event_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.SternbildAPI.sternbild_event_name)
  return _internal_sternbild_event_name();
}
inline void SternbildAPI::set_sternbild_event_name(const std::string& value) {
  _internal_set_sternbild_event_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.SternbildAPI.sternbild_event_name)
}
inline std::string* SternbildAPI::mutable_sternbild_event_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.SternbildAPI.sternbild_event_name)
  return _internal_mutable_sternbild_event_name();
}
inline const std::string& SternbildAPI::_internal_sternbild_event_name() const {
  return sternbild_event_name_.GetNoArena();
}
inline void SternbildAPI::_internal_set_sternbild_event_name(const std::string& value) {
  
  sternbild_event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SternbildAPI::set_sternbild_event_name(std::string&& value) {
  
  sternbild_event_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.SternbildAPI.sternbild_event_name)
}
inline void SternbildAPI::set_sternbild_event_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sternbild_event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.SternbildAPI.sternbild_event_name)
}
inline void SternbildAPI::set_sternbild_event_name(const char* value, size_t size) {
  
  sternbild_event_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.SternbildAPI.sternbild_event_name)
}
inline std::string* SternbildAPI::_internal_mutable_sternbild_event_name() {
  
  return sternbild_event_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SternbildAPI::release_sternbild_event_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.SternbildAPI.sternbild_event_name)
  
  return sternbild_event_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SternbildAPI::set_allocated_sternbild_event_name(std::string* sternbild_event_name) {
  if (sternbild_event_name != nullptr) {
    
  } else {
    
  }
  sternbild_event_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sternbild_event_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.SternbildAPI.sternbild_event_name)
}

// -------------------------------------------------------------------

// InternalSource

// string source_name = 1;
inline void InternalSource::clear_source_name() {
  source_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalSource::source_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.InternalSource.source_name)
  return _internal_source_name();
}
inline void InternalSource::set_source_name(const std::string& value) {
  _internal_set_source_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.InternalSource.source_name)
}
inline std::string* InternalSource::mutable_source_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.InternalSource.source_name)
  return _internal_mutable_source_name();
}
inline const std::string& InternalSource::_internal_source_name() const {
  return source_name_.GetNoArena();
}
inline void InternalSource::_internal_set_source_name(const std::string& value) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InternalSource::set_source_name(std::string&& value) {
  
  source_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.InternalSource.source_name)
}
inline void InternalSource::set_source_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.InternalSource.source_name)
}
inline void InternalSource::set_source_name(const char* value, size_t size) {
  
  source_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.InternalSource.source_name)
}
inline std::string* InternalSource::_internal_mutable_source_name() {
  
  return source_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalSource::release_source_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.InternalSource.source_name)
  
  return source_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalSource::set_allocated_source_name(std::string* source_name) {
  if (source_name != nullptr) {
    
  } else {
    
  }
  source_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.InternalSource.source_name)
}

// string source_version = 2;
inline void InternalSource::clear_source_version() {
  source_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalSource::source_version() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.InternalSource.source_version)
  return _internal_source_version();
}
inline void InternalSource::set_source_version(const std::string& value) {
  _internal_set_source_version(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.InternalSource.source_version)
}
inline std::string* InternalSource::mutable_source_version() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.InternalSource.source_version)
  return _internal_mutable_source_version();
}
inline const std::string& InternalSource::_internal_source_version() const {
  return source_version_.GetNoArena();
}
inline void InternalSource::_internal_set_source_version(const std::string& value) {
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InternalSource::set_source_version(std::string&& value) {
  
  source_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.InternalSource.source_version)
}
inline void InternalSource::set_source_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.InternalSource.source_version)
}
inline void InternalSource::set_source_version(const char* value, size_t size) {
  
  source_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.InternalSource.source_version)
}
inline std::string* InternalSource::_internal_mutable_source_version() {
  
  return source_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalSource::release_source_version() {
  // @@protoc_insertion_point(field_release:signal_source_definition.InternalSource.source_version)
  
  return source_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalSource::set_allocated_source_version(std::string* source_version) {
  if (source_version != nullptr) {
    
  } else {
    
  }
  source_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_version);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.InternalSource.source_version)
}

// string signal_name = 3;
inline void InternalSource::clear_signal_name() {
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& InternalSource::signal_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.InternalSource.signal_name)
  return _internal_signal_name();
}
inline void InternalSource::set_signal_name(const std::string& value) {
  _internal_set_signal_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.InternalSource.signal_name)
}
inline std::string* InternalSource::mutable_signal_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.InternalSource.signal_name)
  return _internal_mutable_signal_name();
}
inline const std::string& InternalSource::_internal_signal_name() const {
  return signal_name_.GetNoArena();
}
inline void InternalSource::_internal_set_signal_name(const std::string& value) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void InternalSource::set_signal_name(std::string&& value) {
  
  signal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.InternalSource.signal_name)
}
inline void InternalSource::set_signal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.InternalSource.signal_name)
}
inline void InternalSource::set_signal_name(const char* value, size_t size) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.InternalSource.signal_name)
}
inline std::string* InternalSource::_internal_mutable_signal_name() {
  
  return signal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* InternalSource::release_signal_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.InternalSource.signal_name)
  
  return signal_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void InternalSource::set_allocated_signal_name(std::string* signal_name) {
  if (signal_name != nullptr) {
    
  } else {
    
  }
  signal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.InternalSource.signal_name)
}

// -------------------------------------------------------------------

// ProcessingToolboxSource

// string toolbox_id = 1;
inline void ProcessingToolboxSource::clear_toolbox_id() {
  toolbox_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingToolboxSource::toolbox_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ProcessingToolboxSource.toolbox_id)
  return _internal_toolbox_id();
}
inline void ProcessingToolboxSource::set_toolbox_id(const std::string& value) {
  _internal_set_toolbox_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ProcessingToolboxSource.toolbox_id)
}
inline std::string* ProcessingToolboxSource::mutable_toolbox_id() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ProcessingToolboxSource.toolbox_id)
  return _internal_mutable_toolbox_id();
}
inline const std::string& ProcessingToolboxSource::_internal_toolbox_id() const {
  return toolbox_id_.GetNoArena();
}
inline void ProcessingToolboxSource::_internal_set_toolbox_id(const std::string& value) {
  
  toolbox_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingToolboxSource::set_toolbox_id(std::string&& value) {
  
  toolbox_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ProcessingToolboxSource.toolbox_id)
}
inline void ProcessingToolboxSource::set_toolbox_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  toolbox_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ProcessingToolboxSource.toolbox_id)
}
inline void ProcessingToolboxSource::set_toolbox_id(const char* value, size_t size) {
  
  toolbox_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ProcessingToolboxSource.toolbox_id)
}
inline std::string* ProcessingToolboxSource::_internal_mutable_toolbox_id() {
  
  return toolbox_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingToolboxSource::release_toolbox_id() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ProcessingToolboxSource.toolbox_id)
  
  return toolbox_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingToolboxSource::set_allocated_toolbox_id(std::string* toolbox_id) {
  if (toolbox_id != nullptr) {
    
  } else {
    
  }
  toolbox_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toolbox_id);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ProcessingToolboxSource.toolbox_id)
}

// string toolbox_version = 2;
inline void ProcessingToolboxSource::clear_toolbox_version() {
  toolbox_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingToolboxSource::toolbox_version() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ProcessingToolboxSource.toolbox_version)
  return _internal_toolbox_version();
}
inline void ProcessingToolboxSource::set_toolbox_version(const std::string& value) {
  _internal_set_toolbox_version(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ProcessingToolboxSource.toolbox_version)
}
inline std::string* ProcessingToolboxSource::mutable_toolbox_version() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ProcessingToolboxSource.toolbox_version)
  return _internal_mutable_toolbox_version();
}
inline const std::string& ProcessingToolboxSource::_internal_toolbox_version() const {
  return toolbox_version_.GetNoArena();
}
inline void ProcessingToolboxSource::_internal_set_toolbox_version(const std::string& value) {
  
  toolbox_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingToolboxSource::set_toolbox_version(std::string&& value) {
  
  toolbox_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ProcessingToolboxSource.toolbox_version)
}
inline void ProcessingToolboxSource::set_toolbox_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  toolbox_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ProcessingToolboxSource.toolbox_version)
}
inline void ProcessingToolboxSource::set_toolbox_version(const char* value, size_t size) {
  
  toolbox_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ProcessingToolboxSource.toolbox_version)
}
inline std::string* ProcessingToolboxSource::_internal_mutable_toolbox_version() {
  
  return toolbox_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingToolboxSource::release_toolbox_version() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ProcessingToolboxSource.toolbox_version)
  
  return toolbox_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingToolboxSource::set_allocated_toolbox_version(std::string* toolbox_version) {
  if (toolbox_version != nullptr) {
    
  } else {
    
  }
  toolbox_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), toolbox_version);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ProcessingToolboxSource.toolbox_version)
}

// string format_name = 3;
inline void ProcessingToolboxSource::clear_format_name() {
  format_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingToolboxSource::format_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ProcessingToolboxSource.format_name)
  return _internal_format_name();
}
inline void ProcessingToolboxSource::set_format_name(const std::string& value) {
  _internal_set_format_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ProcessingToolboxSource.format_name)
}
inline std::string* ProcessingToolboxSource::mutable_format_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ProcessingToolboxSource.format_name)
  return _internal_mutable_format_name();
}
inline const std::string& ProcessingToolboxSource::_internal_format_name() const {
  return format_name_.GetNoArena();
}
inline void ProcessingToolboxSource::_internal_set_format_name(const std::string& value) {
  
  format_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingToolboxSource::set_format_name(std::string&& value) {
  
  format_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ProcessingToolboxSource.format_name)
}
inline void ProcessingToolboxSource::set_format_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ProcessingToolboxSource.format_name)
}
inline void ProcessingToolboxSource::set_format_name(const char* value, size_t size) {
  
  format_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ProcessingToolboxSource.format_name)
}
inline std::string* ProcessingToolboxSource::_internal_mutable_format_name() {
  
  return format_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingToolboxSource::release_format_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ProcessingToolboxSource.format_name)
  
  return format_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingToolboxSource::set_allocated_format_name(std::string* format_name) {
  if (format_name != nullptr) {
    
  } else {
    
  }
  format_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ProcessingToolboxSource.format_name)
}

// string format_version = 4;
inline void ProcessingToolboxSource::clear_format_version() {
  format_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingToolboxSource::format_version() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ProcessingToolboxSource.format_version)
  return _internal_format_version();
}
inline void ProcessingToolboxSource::set_format_version(const std::string& value) {
  _internal_set_format_version(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ProcessingToolboxSource.format_version)
}
inline std::string* ProcessingToolboxSource::mutable_format_version() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ProcessingToolboxSource.format_version)
  return _internal_mutable_format_version();
}
inline const std::string& ProcessingToolboxSource::_internal_format_version() const {
  return format_version_.GetNoArena();
}
inline void ProcessingToolboxSource::_internal_set_format_version(const std::string& value) {
  
  format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingToolboxSource::set_format_version(std::string&& value) {
  
  format_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ProcessingToolboxSource.format_version)
}
inline void ProcessingToolboxSource::set_format_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ProcessingToolboxSource.format_version)
}
inline void ProcessingToolboxSource::set_format_version(const char* value, size_t size) {
  
  format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ProcessingToolboxSource.format_version)
}
inline std::string* ProcessingToolboxSource::_internal_mutable_format_version() {
  
  return format_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingToolboxSource::release_format_version() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ProcessingToolboxSource.format_version)
  
  return format_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingToolboxSource::set_allocated_format_version(std::string* format_version) {
  if (format_version != nullptr) {
    
  } else {
    
  }
  format_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format_version);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ProcessingToolboxSource.format_version)
}

// string signal_name = 5;
inline void ProcessingToolboxSource::clear_signal_name() {
  signal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingToolboxSource::signal_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ProcessingToolboxSource.signal_name)
  return _internal_signal_name();
}
inline void ProcessingToolboxSource::set_signal_name(const std::string& value) {
  _internal_set_signal_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ProcessingToolboxSource.signal_name)
}
inline std::string* ProcessingToolboxSource::mutable_signal_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ProcessingToolboxSource.signal_name)
  return _internal_mutable_signal_name();
}
inline const std::string& ProcessingToolboxSource::_internal_signal_name() const {
  return signal_name_.GetNoArena();
}
inline void ProcessingToolboxSource::_internal_set_signal_name(const std::string& value) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingToolboxSource::set_signal_name(std::string&& value) {
  
  signal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ProcessingToolboxSource.signal_name)
}
inline void ProcessingToolboxSource::set_signal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ProcessingToolboxSource.signal_name)
}
inline void ProcessingToolboxSource::set_signal_name(const char* value, size_t size) {
  
  signal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ProcessingToolboxSource.signal_name)
}
inline std::string* ProcessingToolboxSource::_internal_mutable_signal_name() {
  
  return signal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingToolboxSource::release_signal_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ProcessingToolboxSource.signal_name)
  
  return signal_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingToolboxSource::set_allocated_signal_name(std::string* signal_name) {
  if (signal_name != nullptr) {
    
  } else {
    
  }
  signal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signal_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ProcessingToolboxSource.signal_name)
}

// repeated .signal_source_definition.ToolMetadata tool_metadata = 6;
inline int ProcessingToolboxSource::_internal_tool_metadata_size() const {
  return tool_metadata_.size();
}
inline int ProcessingToolboxSource::tool_metadata_size() const {
  return _internal_tool_metadata_size();
}
inline void ProcessingToolboxSource::clear_tool_metadata() {
  tool_metadata_.Clear();
}
inline ::signal_source_definition::ToolMetadata* ProcessingToolboxSource::mutable_tool_metadata(int index) {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ProcessingToolboxSource.tool_metadata)
  return tool_metadata_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::ToolMetadata >*
ProcessingToolboxSource::mutable_tool_metadata() {
  // @@protoc_insertion_point(field_mutable_list:signal_source_definition.ProcessingToolboxSource.tool_metadata)
  return &tool_metadata_;
}
inline const ::signal_source_definition::ToolMetadata& ProcessingToolboxSource::_internal_tool_metadata(int index) const {
  return tool_metadata_.Get(index);
}
inline const ::signal_source_definition::ToolMetadata& ProcessingToolboxSource::tool_metadata(int index) const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ProcessingToolboxSource.tool_metadata)
  return _internal_tool_metadata(index);
}
inline ::signal_source_definition::ToolMetadata* ProcessingToolboxSource::_internal_add_tool_metadata() {
  return tool_metadata_.Add();
}
inline ::signal_source_definition::ToolMetadata* ProcessingToolboxSource::add_tool_metadata() {
  // @@protoc_insertion_point(field_add:signal_source_definition.ProcessingToolboxSource.tool_metadata)
  return _internal_add_tool_metadata();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::ToolMetadata >&
ProcessingToolboxSource::tool_metadata() const {
  // @@protoc_insertion_point(field_list:signal_source_definition.ProcessingToolboxSource.tool_metadata)
  return tool_metadata_;
}

// -------------------------------------------------------------------

// ToolMetadata

// string dpj_id = 1;
inline void ToolMetadata::clear_dpj_id() {
  dpj_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ToolMetadata::dpj_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ToolMetadata.dpj_id)
  return _internal_dpj_id();
}
inline void ToolMetadata::set_dpj_id(const std::string& value) {
  _internal_set_dpj_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ToolMetadata.dpj_id)
}
inline std::string* ToolMetadata::mutable_dpj_id() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ToolMetadata.dpj_id)
  return _internal_mutable_dpj_id();
}
inline const std::string& ToolMetadata::_internal_dpj_id() const {
  return dpj_id_.GetNoArena();
}
inline void ToolMetadata::_internal_set_dpj_id(const std::string& value) {
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ToolMetadata::set_dpj_id(std::string&& value) {
  
  dpj_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ToolMetadata.dpj_id)
}
inline void ToolMetadata::set_dpj_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ToolMetadata.dpj_id)
}
inline void ToolMetadata::set_dpj_id(const char* value, size_t size) {
  
  dpj_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ToolMetadata.dpj_id)
}
inline std::string* ToolMetadata::_internal_mutable_dpj_id() {
  
  return dpj_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ToolMetadata::release_dpj_id() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ToolMetadata.dpj_id)
  
  return dpj_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ToolMetadata::set_allocated_dpj_id(std::string* dpj_id) {
  if (dpj_id != nullptr) {
    
  } else {
    
  }
  dpj_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dpj_id);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ToolMetadata.dpj_id)
}

// string named_output = 2;
inline void ToolMetadata::clear_named_output() {
  named_output_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ToolMetadata::named_output() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ToolMetadata.named_output)
  return _internal_named_output();
}
inline void ToolMetadata::set_named_output(const std::string& value) {
  _internal_set_named_output(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ToolMetadata.named_output)
}
inline std::string* ToolMetadata::mutable_named_output() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ToolMetadata.named_output)
  return _internal_mutable_named_output();
}
inline const std::string& ToolMetadata::_internal_named_output() const {
  return named_output_.GetNoArena();
}
inline void ToolMetadata::_internal_set_named_output(const std::string& value) {
  
  named_output_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ToolMetadata::set_named_output(std::string&& value) {
  
  named_output_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ToolMetadata.named_output)
}
inline void ToolMetadata::set_named_output(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  named_output_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ToolMetadata.named_output)
}
inline void ToolMetadata::set_named_output(const char* value, size_t size) {
  
  named_output_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ToolMetadata.named_output)
}
inline std::string* ToolMetadata::_internal_mutable_named_output() {
  
  return named_output_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ToolMetadata::release_named_output() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ToolMetadata.named_output)
  
  return named_output_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ToolMetadata::set_allocated_named_output(std::string* named_output) {
  if (named_output != nullptr) {
    
  } else {
    
  }
  named_output_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), named_output);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ToolMetadata.named_output)
}

// int32 output_id = 3;
inline void ToolMetadata::clear_output_id() {
  output_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToolMetadata::_internal_output_id() const {
  return output_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ToolMetadata::output_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ToolMetadata.output_id)
  return _internal_output_id();
}
inline void ToolMetadata::_internal_set_output_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  output_id_ = value;
}
inline void ToolMetadata::set_output_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_output_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ToolMetadata.output_id)
}

// .signal_source_definition.ToolMetadata.INPUTCONFIG input_config = 4;
inline void ToolMetadata::clear_input_config() {
  input_config_ = 0;
}
inline ::signal_source_definition::ToolMetadata_INPUTCONFIG ToolMetadata::_internal_input_config() const {
  return static_cast< ::signal_source_definition::ToolMetadata_INPUTCONFIG >(input_config_);
}
inline ::signal_source_definition::ToolMetadata_INPUTCONFIG ToolMetadata::input_config() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ToolMetadata.input_config)
  return _internal_input_config();
}
inline void ToolMetadata::_internal_set_input_config(::signal_source_definition::ToolMetadata_INPUTCONFIG value) {
  
  input_config_ = value;
}
inline void ToolMetadata::set_input_config(::signal_source_definition::ToolMetadata_INPUTCONFIG value) {
  _internal_set_input_config(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ToolMetadata.input_config)
}

// .signal_source_definition.SamplingRate sampling_rate = 5;
inline bool ToolMetadata::_internal_has_sampling_rate() const {
  return this != internal_default_instance() && sampling_rate_ != nullptr;
}
inline bool ToolMetadata::has_sampling_rate() const {
  return _internal_has_sampling_rate();
}
inline void ToolMetadata::clear_sampling_rate() {
  if (GetArenaNoVirtual() == nullptr && sampling_rate_ != nullptr) {
    delete sampling_rate_;
  }
  sampling_rate_ = nullptr;
}
inline const ::signal_source_definition::SamplingRate& ToolMetadata::_internal_sampling_rate() const {
  const ::signal_source_definition::SamplingRate* p = sampling_rate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::signal_source_definition::SamplingRate*>(
      &::signal_source_definition::_SamplingRate_default_instance_);
}
inline const ::signal_source_definition::SamplingRate& ToolMetadata::sampling_rate() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ToolMetadata.sampling_rate)
  return _internal_sampling_rate();
}
inline ::signal_source_definition::SamplingRate* ToolMetadata::release_sampling_rate() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ToolMetadata.sampling_rate)
  
  ::signal_source_definition::SamplingRate* temp = sampling_rate_;
  sampling_rate_ = nullptr;
  return temp;
}
inline ::signal_source_definition::SamplingRate* ToolMetadata::_internal_mutable_sampling_rate() {
  
  if (sampling_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::signal_source_definition::SamplingRate>(GetArenaNoVirtual());
    sampling_rate_ = p;
  }
  return sampling_rate_;
}
inline ::signal_source_definition::SamplingRate* ToolMetadata::mutable_sampling_rate() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ToolMetadata.sampling_rate)
  return _internal_mutable_sampling_rate();
}
inline void ToolMetadata::set_allocated_sampling_rate(::signal_source_definition::SamplingRate* sampling_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sampling_rate_;
  }
  if (sampling_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sampling_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampling_rate, submessage_arena);
    }
    
  } else {
    
  }
  sampling_rate_ = sampling_rate;
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ToolMetadata.sampling_rate)
}

// .signal_source_definition.ToolMetadata.FAILSAFE failsafe_option = 6;
inline void ToolMetadata::clear_failsafe_option() {
  failsafe_option_ = 0;
}
inline ::signal_source_definition::ToolMetadata_FAILSAFE ToolMetadata::_internal_failsafe_option() const {
  return static_cast< ::signal_source_definition::ToolMetadata_FAILSAFE >(failsafe_option_);
}
inline ::signal_source_definition::ToolMetadata_FAILSAFE ToolMetadata::failsafe_option() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ToolMetadata.failsafe_option)
  return _internal_failsafe_option();
}
inline void ToolMetadata::_internal_set_failsafe_option(::signal_source_definition::ToolMetadata_FAILSAFE value) {
  
  failsafe_option_ = value;
}
inline void ToolMetadata::set_failsafe_option(::signal_source_definition::ToolMetadata_FAILSAFE value) {
  _internal_set_failsafe_option(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ToolMetadata.failsafe_option)
}

// -------------------------------------------------------------------

// SamplingRate

// uint32 sampling_rate_time_ms = 1;
inline bool SamplingRate::_internal_has_sampling_rate_time_ms() const {
  return sampling_rate_case() == kSamplingRateTimeMs;
}
inline void SamplingRate::set_has_sampling_rate_time_ms() {
  _oneof_case_[0] = kSamplingRateTimeMs;
}
inline void SamplingRate::clear_sampling_rate_time_ms() {
  if (_internal_has_sampling_rate_time_ms()) {
    sampling_rate_.sampling_rate_time_ms_ = 0u;
    clear_has_sampling_rate();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SamplingRate::_internal_sampling_rate_time_ms() const {
  if (_internal_has_sampling_rate_time_ms()) {
    return sampling_rate_.sampling_rate_time_ms_;
  }
  return 0u;
}
inline void SamplingRate::_internal_set_sampling_rate_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_sampling_rate_time_ms()) {
    clear_sampling_rate();
    set_has_sampling_rate_time_ms();
  }
  sampling_rate_.sampling_rate_time_ms_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SamplingRate::sampling_rate_time_ms() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.SamplingRate.sampling_rate_time_ms)
  return _internal_sampling_rate_time_ms();
}
inline void SamplingRate::set_sampling_rate_time_ms(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sampling_rate_time_ms(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.SamplingRate.sampling_rate_time_ms)
}

// uint32 sampling_rate_injection_count = 2;
inline bool SamplingRate::_internal_has_sampling_rate_injection_count() const {
  return sampling_rate_case() == kSamplingRateInjectionCount;
}
inline void SamplingRate::set_has_sampling_rate_injection_count() {
  _oneof_case_[0] = kSamplingRateInjectionCount;
}
inline void SamplingRate::clear_sampling_rate_injection_count() {
  if (_internal_has_sampling_rate_injection_count()) {
    sampling_rate_.sampling_rate_injection_count_ = 0u;
    clear_has_sampling_rate();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SamplingRate::_internal_sampling_rate_injection_count() const {
  if (_internal_has_sampling_rate_injection_count()) {
    return sampling_rate_.sampling_rate_injection_count_;
  }
  return 0u;
}
inline void SamplingRate::_internal_set_sampling_rate_injection_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_sampling_rate_injection_count()) {
    clear_sampling_rate();
    set_has_sampling_rate_injection_count();
  }
  sampling_rate_.sampling_rate_injection_count_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SamplingRate::sampling_rate_injection_count() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.SamplingRate.sampling_rate_injection_count)
  return _internal_sampling_rate_injection_count();
}
inline void SamplingRate::set_sampling_rate_injection_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_sampling_rate_injection_count(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.SamplingRate.sampling_rate_injection_count)
}

inline bool SamplingRate::has_sampling_rate() const {
  return sampling_rate_case() != SAMPLING_RATE_NOT_SET;
}
inline void SamplingRate::clear_has_sampling_rate() {
  _oneof_case_[0] = SAMPLING_RATE_NOT_SET;
}
inline SamplingRate::SamplingRateCase SamplingRate::sampling_rate_case() const {
  return SamplingRate::SamplingRateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ThriftmeSource

// int32 service_hash_id = 1;
inline void ThriftmeSource::clear_service_hash_id() {
  service_hash_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeSource::_internal_service_hash_id() const {
  return service_hash_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeSource::service_hash_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSource.service_hash_id)
  return _internal_service_hash_id();
}
inline void ThriftmeSource::_internal_set_service_hash_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  service_hash_id_ = value;
}
inline void ThriftmeSource::set_service_hash_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service_hash_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSource.service_hash_id)
}

// int32 function_id = 2;
inline void ThriftmeSource::clear_function_id() {
  function_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeSource::_internal_function_id() const {
  return function_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeSource::function_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSource.function_id)
  return _internal_function_id();
}
inline void ThriftmeSource::_internal_set_function_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  function_id_ = value;
}
inline void ThriftmeSource::set_function_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_function_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSource.function_id)
}

// string service_name = 3;
inline void ThriftmeSource::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThriftmeSource::service_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSource.service_name)
  return _internal_service_name();
}
inline void ThriftmeSource::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSource.service_name)
}
inline std::string* ThriftmeSource::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ThriftmeSource.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ThriftmeSource::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void ThriftmeSource::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ThriftmeSource::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ThriftmeSource.service_name)
}
inline void ThriftmeSource::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ThriftmeSource.service_name)
}
inline void ThriftmeSource::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ThriftmeSource.service_name)
}
inline std::string* ThriftmeSource::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThriftmeSource::release_service_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ThriftmeSource.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThriftmeSource::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ThriftmeSource.service_name)
}

// string function_name = 4;
inline void ThriftmeSource::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThriftmeSource::function_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSource.function_name)
  return _internal_function_name();
}
inline void ThriftmeSource::set_function_name(const std::string& value) {
  _internal_set_function_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSource.function_name)
}
inline std::string* ThriftmeSource::mutable_function_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ThriftmeSource.function_name)
  return _internal_mutable_function_name();
}
inline const std::string& ThriftmeSource::_internal_function_name() const {
  return function_name_.GetNoArena();
}
inline void ThriftmeSource::_internal_set_function_name(const std::string& value) {
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ThriftmeSource::set_function_name(std::string&& value) {
  
  function_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ThriftmeSource.function_name)
}
inline void ThriftmeSource::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ThriftmeSource.function_name)
}
inline void ThriftmeSource::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ThriftmeSource.function_name)
}
inline std::string* ThriftmeSource::_internal_mutable_function_name() {
  
  return function_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThriftmeSource::release_function_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ThriftmeSource.function_name)
  
  return function_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThriftmeSource::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ThriftmeSource.function_name)
}

// .signal_source_definition.ThriftmeSource.MessageTypeEnum message_type = 5;
inline void ThriftmeSource::clear_message_type() {
  message_type_ = 0;
}
inline ::signal_source_definition::ThriftmeSource_MessageTypeEnum ThriftmeSource::_internal_message_type() const {
  return static_cast< ::signal_source_definition::ThriftmeSource_MessageTypeEnum >(message_type_);
}
inline ::signal_source_definition::ThriftmeSource_MessageTypeEnum ThriftmeSource::message_type() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSource.message_type)
  return _internal_message_type();
}
inline void ThriftmeSource::_internal_set_message_type(::signal_source_definition::ThriftmeSource_MessageTypeEnum value) {
  
  message_type_ = value;
}
inline void ThriftmeSource::set_message_type(::signal_source_definition::ThriftmeSource_MessageTypeEnum value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSource.message_type)
}

// -------------------------------------------------------------------

// ThriftmeSourceActive

// string service_name = 1;
inline void ThriftmeSourceActive::clear_service_name() {
  service_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThriftmeSourceActive::service_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSourceActive.service_name)
  return _internal_service_name();
}
inline void ThriftmeSourceActive::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSourceActive.service_name)
}
inline std::string* ThriftmeSourceActive::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ThriftmeSourceActive.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ThriftmeSourceActive::_internal_service_name() const {
  return service_name_.GetNoArena();
}
inline void ThriftmeSourceActive::_internal_set_service_name(const std::string& value) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ThriftmeSourceActive::set_service_name(std::string&& value) {
  
  service_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ThriftmeSourceActive.service_name)
}
inline void ThriftmeSourceActive::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ThriftmeSourceActive.service_name)
}
inline void ThriftmeSourceActive::set_service_name(const char* value, size_t size) {
  
  service_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ThriftmeSourceActive.service_name)
}
inline std::string* ThriftmeSourceActive::_internal_mutable_service_name() {
  
  return service_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThriftmeSourceActive::release_service_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ThriftmeSourceActive.service_name)
  
  return service_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThriftmeSourceActive::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ThriftmeSourceActive.service_name)
}

// int32 service_hash_id = 2;
inline void ThriftmeSourceActive::clear_service_hash_id() {
  service_hash_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeSourceActive::_internal_service_hash_id() const {
  return service_hash_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeSourceActive::service_hash_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSourceActive.service_hash_id)
  return _internal_service_hash_id();
}
inline void ThriftmeSourceActive::_internal_set_service_hash_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  service_hash_id_ = value;
}
inline void ThriftmeSourceActive::set_service_hash_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_service_hash_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSourceActive.service_hash_id)
}

// string broker_url = 3;
inline void ThriftmeSourceActive::clear_broker_url() {
  broker_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThriftmeSourceActive::broker_url() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSourceActive.broker_url)
  return _internal_broker_url();
}
inline void ThriftmeSourceActive::set_broker_url(const std::string& value) {
  _internal_set_broker_url(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSourceActive.broker_url)
}
inline std::string* ThriftmeSourceActive::mutable_broker_url() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ThriftmeSourceActive.broker_url)
  return _internal_mutable_broker_url();
}
inline const std::string& ThriftmeSourceActive::_internal_broker_url() const {
  return broker_url_.GetNoArena();
}
inline void ThriftmeSourceActive::_internal_set_broker_url(const std::string& value) {
  
  broker_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ThriftmeSourceActive::set_broker_url(std::string&& value) {
  
  broker_url_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ThriftmeSourceActive.broker_url)
}
inline void ThriftmeSourceActive::set_broker_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  broker_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ThriftmeSourceActive.broker_url)
}
inline void ThriftmeSourceActive::set_broker_url(const char* value, size_t size) {
  
  broker_url_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ThriftmeSourceActive.broker_url)
}
inline std::string* ThriftmeSourceActive::_internal_mutable_broker_url() {
  
  return broker_url_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThriftmeSourceActive::release_broker_url() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ThriftmeSourceActive.broker_url)
  
  return broker_url_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThriftmeSourceActive::set_allocated_broker_url(std::string* broker_url) {
  if (broker_url != nullptr) {
    
  } else {
    
  }
  broker_url_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), broker_url);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ThriftmeSourceActive.broker_url)
}

// string function_name = 4;
inline void ThriftmeSourceActive::clear_function_name() {
  function_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ThriftmeSourceActive::function_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSourceActive.function_name)
  return _internal_function_name();
}
inline void ThriftmeSourceActive::set_function_name(const std::string& value) {
  _internal_set_function_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSourceActive.function_name)
}
inline std::string* ThriftmeSourceActive::mutable_function_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ThriftmeSourceActive.function_name)
  return _internal_mutable_function_name();
}
inline const std::string& ThriftmeSourceActive::_internal_function_name() const {
  return function_name_.GetNoArena();
}
inline void ThriftmeSourceActive::_internal_set_function_name(const std::string& value) {
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ThriftmeSourceActive::set_function_name(std::string&& value) {
  
  function_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.ThriftmeSourceActive.function_name)
}
inline void ThriftmeSourceActive::set_function_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.ThriftmeSourceActive.function_name)
}
inline void ThriftmeSourceActive::set_function_name(const char* value, size_t size) {
  
  function_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.ThriftmeSourceActive.function_name)
}
inline std::string* ThriftmeSourceActive::_internal_mutable_function_name() {
  
  return function_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ThriftmeSourceActive::release_function_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.ThriftmeSourceActive.function_name)
  
  return function_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ThriftmeSourceActive::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    
  } else {
    
  }
  function_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.ThriftmeSourceActive.function_name)
}

// int32 function_id = 5;
inline void ThriftmeSourceActive::clear_function_id() {
  function_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeSourceActive::_internal_function_id() const {
  return function_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeSourceActive::function_id() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSourceActive.function_id)
  return _internal_function_id();
}
inline void ThriftmeSourceActive::_internal_set_function_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  function_id_ = value;
}
inline void ThriftmeSourceActive::set_function_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_function_id(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.ThriftmeSourceActive.function_id)
}

// repeated .signal_source_definition.DataMembers member = 6;
inline int ThriftmeSourceActive::_internal_member_size() const {
  return member_.size();
}
inline int ThriftmeSourceActive::member_size() const {
  return _internal_member_size();
}
inline void ThriftmeSourceActive::clear_member() {
  member_.Clear();
}
inline ::signal_source_definition::DataMembers* ThriftmeSourceActive::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ThriftmeSourceActive.member)
  return member_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::DataMembers >*
ThriftmeSourceActive::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:signal_source_definition.ThriftmeSourceActive.member)
  return &member_;
}
inline const ::signal_source_definition::DataMembers& ThriftmeSourceActive::_internal_member(int index) const {
  return member_.Get(index);
}
inline const ::signal_source_definition::DataMembers& ThriftmeSourceActive::member(int index) const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSourceActive.member)
  return _internal_member(index);
}
inline ::signal_source_definition::DataMembers* ThriftmeSourceActive::_internal_add_member() {
  return member_.Add();
}
inline ::signal_source_definition::DataMembers* ThriftmeSourceActive::add_member() {
  // @@protoc_insertion_point(field_add:signal_source_definition.ThriftmeSourceActive.member)
  return _internal_add_member();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::DataMembers >&
ThriftmeSourceActive::member() const {
  // @@protoc_insertion_point(field_list:signal_source_definition.ThriftmeSourceActive.member)
  return member_;
}

// repeated .signal_source_definition.Parameters parameter = 7;
inline int ThriftmeSourceActive::_internal_parameter_size() const {
  return parameter_.size();
}
inline int ThriftmeSourceActive::parameter_size() const {
  return _internal_parameter_size();
}
inline void ThriftmeSourceActive::clear_parameter() {
  parameter_.Clear();
}
inline ::signal_source_definition::Parameters* ThriftmeSourceActive::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.ThriftmeSourceActive.parameter)
  return parameter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Parameters >*
ThriftmeSourceActive::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:signal_source_definition.ThriftmeSourceActive.parameter)
  return &parameter_;
}
inline const ::signal_source_definition::Parameters& ThriftmeSourceActive::_internal_parameter(int index) const {
  return parameter_.Get(index);
}
inline const ::signal_source_definition::Parameters& ThriftmeSourceActive::parameter(int index) const {
  // @@protoc_insertion_point(field_get:signal_source_definition.ThriftmeSourceActive.parameter)
  return _internal_parameter(index);
}
inline ::signal_source_definition::Parameters* ThriftmeSourceActive::_internal_add_parameter() {
  return parameter_.Add();
}
inline ::signal_source_definition::Parameters* ThriftmeSourceActive::add_parameter() {
  // @@protoc_insertion_point(field_add:signal_source_definition.ThriftmeSourceActive.parameter)
  return _internal_add_parameter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::signal_source_definition::Parameters >&
ThriftmeSourceActive::parameter() const {
  // @@protoc_insertion_point(field_list:signal_source_definition.ThriftmeSourceActive.parameter)
  return parameter_;
}

// -------------------------------------------------------------------

// Parameters

// string parameter_name = 1;
inline void Parameters::clear_parameter_name() {
  parameter_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Parameters::parameter_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.parameter_name)
  return _internal_parameter_name();
}
inline void Parameters::set_parameter_name(const std::string& value) {
  _internal_set_parameter_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.parameter_name)
}
inline std::string* Parameters::mutable_parameter_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.Parameters.parameter_name)
  return _internal_mutable_parameter_name();
}
inline const std::string& Parameters::_internal_parameter_name() const {
  return parameter_name_.GetNoArena();
}
inline void Parameters::_internal_set_parameter_name(const std::string& value) {
  
  parameter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Parameters::set_parameter_name(std::string&& value) {
  
  parameter_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.Parameters.parameter_name)
}
inline void Parameters::set_parameter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parameter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.Parameters.parameter_name)
}
inline void Parameters::set_parameter_name(const char* value, size_t size) {
  
  parameter_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.Parameters.parameter_name)
}
inline std::string* Parameters::_internal_mutable_parameter_name() {
  
  return parameter_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Parameters::release_parameter_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.Parameters.parameter_name)
  
  return parameter_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Parameters::set_allocated_parameter_name(std::string* parameter_name) {
  if (parameter_name != nullptr) {
    
  } else {
    
  }
  parameter_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.Parameters.parameter_name)
}

// double double_value = 2;
inline bool Parameters::_internal_has_double_value() const {
  return parameter_value_case() == kDoubleValue;
}
inline void Parameters::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void Parameters::clear_double_value() {
  if (_internal_has_double_value()) {
    parameter_value_.double_value_ = 0;
    clear_has_parameter_value();
  }
}
inline double Parameters::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return parameter_value_.double_value_;
  }
  return 0;
}
inline void Parameters::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_parameter_value();
    set_has_double_value();
  }
  parameter_value_.double_value_ = value;
}
inline double Parameters::double_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.double_value)
  return _internal_double_value();
}
inline void Parameters::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.double_value)
}

// float float_value = 3;
inline bool Parameters::_internal_has_float_value() const {
  return parameter_value_case() == kFloatValue;
}
inline void Parameters::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Parameters::clear_float_value() {
  if (_internal_has_float_value()) {
    parameter_value_.float_value_ = 0;
    clear_has_parameter_value();
  }
}
inline float Parameters::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return parameter_value_.float_value_;
  }
  return 0;
}
inline void Parameters::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_parameter_value();
    set_has_float_value();
  }
  parameter_value_.float_value_ = value;
}
inline float Parameters::float_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.float_value)
  return _internal_float_value();
}
inline void Parameters::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.float_value)
}

// int32 int32_value = 4;
inline bool Parameters::_internal_has_int32_value() const {
  return parameter_value_case() == kInt32Value;
}
inline void Parameters::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void Parameters::clear_int32_value() {
  if (_internal_has_int32_value()) {
    parameter_value_.int32_value_ = 0;
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameters::_internal_int32_value() const {
  if (_internal_has_int32_value()) {
    return parameter_value_.int32_value_;
  }
  return 0;
}
inline void Parameters::_internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int32_value()) {
    clear_parameter_value();
    set_has_int32_value();
  }
  parameter_value_.int32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameters::int32_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.int32_value)
  return _internal_int32_value();
}
inline void Parameters::set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.int32_value)
}

// int64 int64_value = 5;
inline bool Parameters::_internal_has_int64_value() const {
  return parameter_value_case() == kInt64Value;
}
inline void Parameters::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void Parameters::clear_int64_value() {
  if (_internal_has_int64_value()) {
    parameter_value_.int64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Parameters::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return parameter_value_.int64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Parameters::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64_value()) {
    clear_parameter_value();
    set_has_int64_value();
  }
  parameter_value_.int64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Parameters::int64_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.int64_value)
  return _internal_int64_value();
}
inline void Parameters::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.int64_value)
}

// uint32 uint32_value = 6;
inline bool Parameters::_internal_has_uint32_value() const {
  return parameter_value_case() == kUint32Value;
}
inline void Parameters::set_has_uint32_value() {
  _oneof_case_[0] = kUint32Value;
}
inline void Parameters::clear_uint32_value() {
  if (_internal_has_uint32_value()) {
    parameter_value_.uint32_value_ = 0u;
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameters::_internal_uint32_value() const {
  if (_internal_has_uint32_value()) {
    return parameter_value_.uint32_value_;
  }
  return 0u;
}
inline void Parameters::_internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_uint32_value()) {
    clear_parameter_value();
    set_has_uint32_value();
  }
  parameter_value_.uint32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameters::uint32_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.uint32_value)
  return _internal_uint32_value();
}
inline void Parameters::set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.uint32_value)
}

// uint64 uint64_value = 7;
inline bool Parameters::_internal_has_uint64_value() const {
  return parameter_value_case() == kUint64Value;
}
inline void Parameters::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void Parameters::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    parameter_value_.uint64_value_ = PROTOBUF_ULONGLONG(0);
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Parameters::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return parameter_value_.uint64_value_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Parameters::_internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint64_value()) {
    clear_parameter_value();
    set_has_uint64_value();
  }
  parameter_value_.uint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Parameters::uint64_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.uint64_value)
  return _internal_uint64_value();
}
inline void Parameters::set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.uint64_value)
}

// sint32 sint32_value = 8;
inline bool Parameters::_internal_has_sint32_value() const {
  return parameter_value_case() == kSint32Value;
}
inline void Parameters::set_has_sint32_value() {
  _oneof_case_[0] = kSint32Value;
}
inline void Parameters::clear_sint32_value() {
  if (_internal_has_sint32_value()) {
    parameter_value_.sint32_value_ = 0;
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameters::_internal_sint32_value() const {
  if (_internal_has_sint32_value()) {
    return parameter_value_.sint32_value_;
  }
  return 0;
}
inline void Parameters::_internal_set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sint32_value()) {
    clear_parameter_value();
    set_has_sint32_value();
  }
  parameter_value_.sint32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameters::sint32_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.sint32_value)
  return _internal_sint32_value();
}
inline void Parameters::set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint32_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.sint32_value)
}

// sint64 sint64_value = 9;
inline bool Parameters::_internal_has_sint64_value() const {
  return parameter_value_case() == kSint64Value;
}
inline void Parameters::set_has_sint64_value() {
  _oneof_case_[0] = kSint64Value;
}
inline void Parameters::clear_sint64_value() {
  if (_internal_has_sint64_value()) {
    parameter_value_.sint64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Parameters::_internal_sint64_value() const {
  if (_internal_has_sint64_value()) {
    return parameter_value_.sint64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Parameters::_internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64_value()) {
    clear_parameter_value();
    set_has_sint64_value();
  }
  parameter_value_.sint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Parameters::sint64_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.sint64_value)
  return _internal_sint64_value();
}
inline void Parameters::set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.sint64_value)
}

// fixed32 fixed32_value = 10;
inline bool Parameters::_internal_has_fixed32_value() const {
  return parameter_value_case() == kFixed32Value;
}
inline void Parameters::set_has_fixed32_value() {
  _oneof_case_[0] = kFixed32Value;
}
inline void Parameters::clear_fixed32_value() {
  if (_internal_has_fixed32_value()) {
    parameter_value_.fixed32_value_ = 0u;
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameters::_internal_fixed32_value() const {
  if (_internal_has_fixed32_value()) {
    return parameter_value_.fixed32_value_;
  }
  return 0u;
}
inline void Parameters::_internal_set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_fixed32_value()) {
    clear_parameter_value();
    set_has_fixed32_value();
  }
  parameter_value_.fixed32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Parameters::fixed32_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.fixed32_value)
  return _internal_fixed32_value();
}
inline void Parameters::set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed32_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.fixed32_value)
}

// fixed64 fixed64_value = 11;
inline bool Parameters::_internal_has_fixed64_value() const {
  return parameter_value_case() == kFixed64Value;
}
inline void Parameters::set_has_fixed64_value() {
  _oneof_case_[0] = kFixed64Value;
}
inline void Parameters::clear_fixed64_value() {
  if (_internal_has_fixed64_value()) {
    parameter_value_.fixed64_value_ = PROTOBUF_ULONGLONG(0);
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Parameters::_internal_fixed64_value() const {
  if (_internal_has_fixed64_value()) {
    return parameter_value_.fixed64_value_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void Parameters::_internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_fixed64_value()) {
    clear_parameter_value();
    set_has_fixed64_value();
  }
  parameter_value_.fixed64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Parameters::fixed64_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.fixed64_value)
  return _internal_fixed64_value();
}
inline void Parameters::set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixed64_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.fixed64_value)
}

// sfixed32 sfixed32_value = 12;
inline bool Parameters::_internal_has_sfixed32_value() const {
  return parameter_value_case() == kSfixed32Value;
}
inline void Parameters::set_has_sfixed32_value() {
  _oneof_case_[0] = kSfixed32Value;
}
inline void Parameters::clear_sfixed32_value() {
  if (_internal_has_sfixed32_value()) {
    parameter_value_.sfixed32_value_ = 0;
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameters::_internal_sfixed32_value() const {
  if (_internal_has_sfixed32_value()) {
    return parameter_value_.sfixed32_value_;
  }
  return 0;
}
inline void Parameters::_internal_set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sfixed32_value()) {
    clear_parameter_value();
    set_has_sfixed32_value();
  }
  parameter_value_.sfixed32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Parameters::sfixed32_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.sfixed32_value)
  return _internal_sfixed32_value();
}
inline void Parameters::set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sfixed32_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.sfixed32_value)
}

// sfixed64 sfixed64_value = 13;
inline bool Parameters::_internal_has_sfixed64_value() const {
  return parameter_value_case() == kSfixed64Value;
}
inline void Parameters::set_has_sfixed64_value() {
  _oneof_case_[0] = kSfixed64Value;
}
inline void Parameters::clear_sfixed64_value() {
  if (_internal_has_sfixed64_value()) {
    parameter_value_.sfixed64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_parameter_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Parameters::_internal_sfixed64_value() const {
  if (_internal_has_sfixed64_value()) {
    return parameter_value_.sfixed64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void Parameters::_internal_set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sfixed64_value()) {
    clear_parameter_value();
    set_has_sfixed64_value();
  }
  parameter_value_.sfixed64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Parameters::sfixed64_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.sfixed64_value)
  return _internal_sfixed64_value();
}
inline void Parameters::set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sfixed64_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.sfixed64_value)
}

// bool bool_value = 14;
inline bool Parameters::_internal_has_bool_value() const {
  return parameter_value_case() == kBoolValue;
}
inline void Parameters::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Parameters::clear_bool_value() {
  if (_internal_has_bool_value()) {
    parameter_value_.bool_value_ = false;
    clear_has_parameter_value();
  }
}
inline bool Parameters::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return parameter_value_.bool_value_;
  }
  return false;
}
inline void Parameters::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_parameter_value();
    set_has_bool_value();
  }
  parameter_value_.bool_value_ = value;
}
inline bool Parameters::bool_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.bool_value)
  return _internal_bool_value();
}
inline void Parameters::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.bool_value)
}

// string string_value = 15;
inline bool Parameters::_internal_has_string_value() const {
  return parameter_value_case() == kStringValue;
}
inline void Parameters::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Parameters::clear_string_value() {
  if (_internal_has_string_value()) {
    parameter_value_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_parameter_value();
  }
}
inline const std::string& Parameters::string_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.string_value)
  return _internal_string_value();
}
inline void Parameters::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.string_value)
}
inline std::string* Parameters::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.Parameters.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& Parameters::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return parameter_value_.string_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Parameters::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_parameter_value();
    set_has_string_value();
    parameter_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Parameters::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.string_value)
  if (!_internal_has_string_value()) {
    clear_parameter_value();
    set_has_string_value();
    parameter_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.Parameters.string_value)
}
inline void Parameters::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_parameter_value();
    set_has_string_value();
    parameter_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.Parameters.string_value)
}
inline void Parameters::set_string_value(const char* value, size_t size) {
  if (!_internal_has_string_value()) {
    clear_parameter_value();
    set_has_string_value();
    parameter_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.Parameters.string_value)
}
inline std::string* Parameters::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_parameter_value();
    set_has_string_value();
    parameter_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return parameter_value_.string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Parameters::release_string_value() {
  // @@protoc_insertion_point(field_release:signal_source_definition.Parameters.string_value)
  if (_internal_has_string_value()) {
    clear_has_parameter_value();
    return parameter_value_.string_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Parameters::set_allocated_string_value(std::string* string_value) {
  if (has_parameter_value()) {
    clear_parameter_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    parameter_value_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.Parameters.string_value)
}

// bytes bytes_value = 16;
inline bool Parameters::_internal_has_bytes_value() const {
  return parameter_value_case() == kBytesValue;
}
inline void Parameters::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void Parameters::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    parameter_value_.bytes_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_parameter_value();
  }
}
inline const std::string& Parameters::bytes_value() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.Parameters.bytes_value)
  return _internal_bytes_value();
}
inline void Parameters::set_bytes_value(const std::string& value) {
  _internal_set_bytes_value(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.bytes_value)
}
inline std::string* Parameters::mutable_bytes_value() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.Parameters.bytes_value)
  return _internal_mutable_bytes_value();
}
inline const std::string& Parameters::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return parameter_value_.bytes_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Parameters::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_parameter_value();
    set_has_bytes_value();
    parameter_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_value_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Parameters::set_bytes_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:signal_source_definition.Parameters.bytes_value)
  if (!_internal_has_bytes_value()) {
    clear_parameter_value();
    set_has_bytes_value();
    parameter_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_value_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.Parameters.bytes_value)
}
inline void Parameters::set_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_bytes_value()) {
    clear_parameter_value();
    set_has_bytes_value();
    parameter_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_value_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.Parameters.bytes_value)
}
inline void Parameters::set_bytes_value(const void* value, size_t size) {
  if (!_internal_has_bytes_value()) {
    clear_parameter_value();
    set_has_bytes_value();
    parameter_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_value_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.Parameters.bytes_value)
}
inline std::string* Parameters::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_parameter_value();
    set_has_bytes_value();
    parameter_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return parameter_value_.bytes_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Parameters::release_bytes_value() {
  // @@protoc_insertion_point(field_release:signal_source_definition.Parameters.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_parameter_value();
    return parameter_value_.bytes_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void Parameters::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_parameter_value()) {
    clear_parameter_value();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    parameter_value_.bytes_value_.UnsafeSetDefault(bytes_value);
  }
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.Parameters.bytes_value)
}

inline bool Parameters::has_parameter_value() const {
  return parameter_value_case() != PARAMETER_VALUE_NOT_SET;
}
inline void Parameters::clear_has_parameter_value() {
  _oneof_case_[0] = PARAMETER_VALUE_NOT_SET;
}
inline Parameters::ParameterValueCase Parameters::parameter_value_case() const {
  return Parameters::ParameterValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DataMembers

// string slug = 1;
inline void DataMembers::clear_slug() {
  slug_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataMembers::slug() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.DataMembers.slug)
  return _internal_slug();
}
inline void DataMembers::set_slug(const std::string& value) {
  _internal_set_slug(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.DataMembers.slug)
}
inline std::string* DataMembers::mutable_slug() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.DataMembers.slug)
  return _internal_mutable_slug();
}
inline const std::string& DataMembers::_internal_slug() const {
  return slug_.GetNoArena();
}
inline void DataMembers::_internal_set_slug(const std::string& value) {
  
  slug_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataMembers::set_slug(std::string&& value) {
  
  slug_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.DataMembers.slug)
}
inline void DataMembers::set_slug(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slug_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.DataMembers.slug)
}
inline void DataMembers::set_slug(const char* value, size_t size) {
  
  slug_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.DataMembers.slug)
}
inline std::string* DataMembers::_internal_mutable_slug() {
  
  return slug_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataMembers::release_slug() {
  // @@protoc_insertion_point(field_release:signal_source_definition.DataMembers.slug)
  
  return slug_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataMembers::set_allocated_slug(std::string* slug) {
  if (slug != nullptr) {
    
  } else {
    
  }
  slug_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slug);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.DataMembers.slug)
}

// string member_name = 2;
inline void DataMembers::clear_member_name() {
  member_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& DataMembers::member_name() const {
  // @@protoc_insertion_point(field_get:signal_source_definition.DataMembers.member_name)
  return _internal_member_name();
}
inline void DataMembers::set_member_name(const std::string& value) {
  _internal_set_member_name(value);
  // @@protoc_insertion_point(field_set:signal_source_definition.DataMembers.member_name)
}
inline std::string* DataMembers::mutable_member_name() {
  // @@protoc_insertion_point(field_mutable:signal_source_definition.DataMembers.member_name)
  return _internal_mutable_member_name();
}
inline const std::string& DataMembers::_internal_member_name() const {
  return member_name_.GetNoArena();
}
inline void DataMembers::_internal_set_member_name(const std::string& value) {
  
  member_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void DataMembers::set_member_name(std::string&& value) {
  
  member_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:signal_source_definition.DataMembers.member_name)
}
inline void DataMembers::set_member_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  member_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:signal_source_definition.DataMembers.member_name)
}
inline void DataMembers::set_member_name(const char* value, size_t size) {
  
  member_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:signal_source_definition.DataMembers.member_name)
}
inline std::string* DataMembers::_internal_mutable_member_name() {
  
  return member_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* DataMembers::release_member_name() {
  // @@protoc_insertion_point(field_release:signal_source_definition.DataMembers.member_name)
  
  return member_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void DataMembers::set_allocated_member_name(std::string* member_name) {
  if (member_name != nullptr) {
    
  } else {
    
  }
  member_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), member_name);
  // @@protoc_insertion_point(field_set_allocated:signal_source_definition.DataMembers.member_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace signal_source_definition

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::signal_source_definition::CollectdSource_CommandTypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::signal_source_definition::CollectdSource_CommandTypeEnum>() {
  return ::signal_source_definition::CollectdSource_CommandTypeEnum_descriptor();
}
template <> struct is_proto_enum< ::signal_source_definition::ToolMetadata_INPUTCONFIG> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::signal_source_definition::ToolMetadata_INPUTCONFIG>() {
  return ::signal_source_definition::ToolMetadata_INPUTCONFIG_descriptor();
}
template <> struct is_proto_enum< ::signal_source_definition::ToolMetadata_FAILSAFE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::signal_source_definition::ToolMetadata_FAILSAFE>() {
  return ::signal_source_definition::ToolMetadata_FAILSAFE_descriptor();
}
template <> struct is_proto_enum< ::signal_source_definition::ThriftmeSource_MessageTypeEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::signal_source_definition::ThriftmeSource_MessageTypeEnum>() {
  return ::signal_source_definition::ThriftmeSource_MessageTypeEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_signal_5fsource_5fdefinition_2eproto
