// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: backend_message_format.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_backend_5fmessage_5fformat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_backend_5fmessage_5fformat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "data_collection_configuration_request.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_backend_5fmessage_5fformat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_backend_5fmessage_5fformat_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[22]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_backend_5fmessage_5fformat_2eproto;
class AckMessage;
class AckMessageDefaultTypeInternal;
extern AckMessageDefaultTypeInternal _AckMessage_default_instance_;
class CompositeLocationArea;
class CompositeLocationAreaDefaultTypeInternal;
extern CompositeLocationAreaDefaultTypeInternal _CompositeLocationArea_default_instance_;
class DataCollectionJobsListMessage;
class DataCollectionJobsListMessageDefaultTypeInternal;
extern DataCollectionJobsListMessageDefaultTypeInternal _DataCollectionJobsListMessage_default_instance_;
class GeoCircleArea;
class GeoCircleAreaDefaultTypeInternal;
extern GeoCircleAreaDefaultTypeInternal _GeoCircleArea_default_instance_;
class GeoCoordinateArea;
class GeoCoordinateAreaDefaultTypeInternal;
extern GeoCoordinateAreaDefaultTypeInternal _GeoCoordinateArea_default_instance_;
class GeoHashMessage;
class GeoHashMessageDefaultTypeInternal;
extern GeoHashMessageDefaultTypeInternal _GeoHashMessage_default_instance_;
class GeoRectangleArea;
class GeoRectangleAreaDefaultTypeInternal;
extern GeoRectangleAreaDefaultTypeInternal _GeoRectangleArea_default_instance_;
class GeohashStreamArea;
class GeohashStreamAreaDefaultTypeInternal;
extern GeohashStreamAreaDefaultTypeInternal _GeohashStreamArea_default_instance_;
class GetDataCollectionJobsMessage;
class GetDataCollectionJobsMessageDefaultTypeInternal;
extern GetDataCollectionJobsMessageDefaultTypeInternal _GetDataCollectionJobsMessage_default_instance_;
class GetStaticConfigMessage;
class GetStaticConfigMessageDefaultTypeInternal;
extern GetStaticConfigMessageDefaultTypeInternal _GetStaticConfigMessage_default_instance_;
class InitiateGeohashStreamMessage;
class InitiateGeohashStreamMessageDefaultTypeInternal;
extern InitiateGeohashStreamMessageDefaultTypeInternal _InitiateGeohashStreamMessage_default_instance_;
class Job;
class JobDefaultTypeInternal;
extern JobDefaultTypeInternal _Job_default_instance_;
class JobStatistics;
class JobStatisticsDefaultTypeInternal;
extern JobStatisticsDefaultTypeInternal _JobStatistics_default_instance_;
class JobStatus;
class JobStatusDefaultTypeInternal;
extern JobStatusDefaultTypeInternal _JobStatus_default_instance_;
class JobStatusMessage;
class JobStatusMessageDefaultTypeInternal;
extern JobStatusMessageDefaultTypeInternal _JobStatusMessage_default_instance_;
class JobStatusReason;
class JobStatusReasonDefaultTypeInternal;
extern JobStatusReasonDefaultTypeInternal _JobStatusReason_default_instance_;
class JobStatusRequestMessage;
class JobStatusRequestMessageDefaultTypeInternal;
extern JobStatusRequestMessageDefaultTypeInternal _JobStatusRequestMessage_default_instance_;
class JobWarnings;
class JobWarningsDefaultTypeInternal;
extern JobWarningsDefaultTypeInternal _JobWarnings_default_instance_;
class MessageBody;
class MessageBodyDefaultTypeInternal;
extern MessageBodyDefaultTypeInternal _MessageBody_default_instance_;
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class StaticConfigMessage;
class StaticConfigMessageDefaultTypeInternal;
extern StaticConfigMessageDefaultTypeInternal _StaticConfigMessage_default_instance_;
class SupportedSourceVersion;
class SupportedSourceVersionDefaultTypeInternal;
extern SupportedSourceVersionDefaultTypeInternal _SupportedSourceVersion_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::AckMessage* Arena::CreateMaybeMessage<::AckMessage>(Arena*);
template<> ::CompositeLocationArea* Arena::CreateMaybeMessage<::CompositeLocationArea>(Arena*);
template<> ::DataCollectionJobsListMessage* Arena::CreateMaybeMessage<::DataCollectionJobsListMessage>(Arena*);
template<> ::GeoCircleArea* Arena::CreateMaybeMessage<::GeoCircleArea>(Arena*);
template<> ::GeoCoordinateArea* Arena::CreateMaybeMessage<::GeoCoordinateArea>(Arena*);
template<> ::GeoHashMessage* Arena::CreateMaybeMessage<::GeoHashMessage>(Arena*);
template<> ::GeoRectangleArea* Arena::CreateMaybeMessage<::GeoRectangleArea>(Arena*);
template<> ::GeohashStreamArea* Arena::CreateMaybeMessage<::GeohashStreamArea>(Arena*);
template<> ::GetDataCollectionJobsMessage* Arena::CreateMaybeMessage<::GetDataCollectionJobsMessage>(Arena*);
template<> ::GetStaticConfigMessage* Arena::CreateMaybeMessage<::GetStaticConfigMessage>(Arena*);
template<> ::InitiateGeohashStreamMessage* Arena::CreateMaybeMessage<::InitiateGeohashStreamMessage>(Arena*);
template<> ::Job* Arena::CreateMaybeMessage<::Job>(Arena*);
template<> ::JobStatistics* Arena::CreateMaybeMessage<::JobStatistics>(Arena*);
template<> ::JobStatus* Arena::CreateMaybeMessage<::JobStatus>(Arena*);
template<> ::JobStatusMessage* Arena::CreateMaybeMessage<::JobStatusMessage>(Arena*);
template<> ::JobStatusReason* Arena::CreateMaybeMessage<::JobStatusReason>(Arena*);
template<> ::JobStatusRequestMessage* Arena::CreateMaybeMessage<::JobStatusRequestMessage>(Arena*);
template<> ::JobWarnings* Arena::CreateMaybeMessage<::JobWarnings>(Arena*);
template<> ::MessageBody* Arena::CreateMaybeMessage<::MessageBody>(Arena*);
template<> ::MessageHeader* Arena::CreateMaybeMessage<::MessageHeader>(Arena*);
template<> ::StaticConfigMessage* Arena::CreateMaybeMessage<::StaticConfigMessage>(Arena*);
template<> ::SupportedSourceVersion* Arena::CreateMaybeMessage<::SupportedSourceVersion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum MessageHeader_Message_Type : int {
  MessageHeader_Message_Type_JOB_STATUS = 0,
  MessageHeader_Message_Type_JOB_STATUS_REQUEST = 1,
  MessageHeader_Message_Type_INITIATE_GEO_HASH_STREAM = 2,
  MessageHeader_Message_Type_GEO_HASH = 3,
  MessageHeader_Message_Type_JOB_LIST = 4,
  MessageHeader_Message_Type_JOB_STATUS_ACK = 5,
  MessageHeader_Message_Type_JOB_STATUS_REQUEST_ACK = 6,
  MessageHeader_Message_Type_INITIATE_GEO_HASH_STREAM_ACK = 7,
  MessageHeader_Message_Type_GEO_HASH_ACK = 8,
  MessageHeader_Message_Type_JOB_LIST_ACK = 9,
  MessageHeader_Message_Type_GET_STATIC_CONFIG = 10,
  MessageHeader_Message_Type_STATIC_CONFIG = 11,
  MessageHeader_Message_Type_GET_DATA_COLLECTION_JOB = 12,
  MessageHeader_Message_Type_MessageHeader_Message_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageHeader_Message_Type_MessageHeader_Message_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageHeader_Message_Type_IsValid(int value);
constexpr MessageHeader_Message_Type MessageHeader_Message_Type_Message_Type_MIN = MessageHeader_Message_Type_JOB_STATUS;
constexpr MessageHeader_Message_Type MessageHeader_Message_Type_Message_Type_MAX = MessageHeader_Message_Type_GET_DATA_COLLECTION_JOB;
constexpr int MessageHeader_Message_Type_Message_Type_ARRAYSIZE = MessageHeader_Message_Type_Message_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_Message_Type_descriptor();
template<typename T>
inline const std::string& MessageHeader_Message_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageHeader_Message_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageHeader_Message_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageHeader_Message_Type_descriptor(), enum_t_value);
}
inline bool MessageHeader_Message_Type_Parse(
    const std::string& name, MessageHeader_Message_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageHeader_Message_Type>(
    MessageHeader_Message_Type_descriptor(), name, value);
}
enum MessageHeader_Compression_Type : int {
  MessageHeader_Compression_Type_NO_COMPRESSION = 0,
  MessageHeader_Compression_Type_GZIP_COMPRESSION = 1,
  MessageHeader_Compression_Type_MessageHeader_Compression_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageHeader_Compression_Type_MessageHeader_Compression_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageHeader_Compression_Type_IsValid(int value);
constexpr MessageHeader_Compression_Type MessageHeader_Compression_Type_Compression_Type_MIN = MessageHeader_Compression_Type_NO_COMPRESSION;
constexpr MessageHeader_Compression_Type MessageHeader_Compression_Type_Compression_Type_MAX = MessageHeader_Compression_Type_GZIP_COMPRESSION;
constexpr int MessageHeader_Compression_Type_Compression_Type_ARRAYSIZE = MessageHeader_Compression_Type_Compression_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_Compression_Type_descriptor();
template<typename T>
inline const std::string& MessageHeader_Compression_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageHeader_Compression_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageHeader_Compression_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageHeader_Compression_Type_descriptor(), enum_t_value);
}
inline bool MessageHeader_Compression_Type_Parse(
    const std::string& name, MessageHeader_Compression_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageHeader_Compression_Type>(
    MessageHeader_Compression_Type_descriptor(), name, value);
}
enum MessageHeader_Ecu_Type : int {
  MessageHeader_Ecu_Type_CIVIC = 0,
  MessageHeader_Ecu_Type_IDC = 1,
  MessageHeader_Ecu_Type_CU = 2,
  MessageHeader_Ecu_Type_MessageHeader_Ecu_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageHeader_Ecu_Type_MessageHeader_Ecu_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageHeader_Ecu_Type_IsValid(int value);
constexpr MessageHeader_Ecu_Type MessageHeader_Ecu_Type_Ecu_Type_MIN = MessageHeader_Ecu_Type_CIVIC;
constexpr MessageHeader_Ecu_Type MessageHeader_Ecu_Type_Ecu_Type_MAX = MessageHeader_Ecu_Type_CU;
constexpr int MessageHeader_Ecu_Type_Ecu_Type_ARRAYSIZE = MessageHeader_Ecu_Type_Ecu_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageHeader_Ecu_Type_descriptor();
template<typename T>
inline const std::string& MessageHeader_Ecu_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageHeader_Ecu_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageHeader_Ecu_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageHeader_Ecu_Type_descriptor(), enum_t_value);
}
inline bool MessageHeader_Ecu_Type_Parse(
    const std::string& name, MessageHeader_Ecu_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageHeader_Ecu_Type>(
    MessageHeader_Ecu_Type_descriptor(), name, value);
}
enum AckMessage_Status_Code : int {
  AckMessage_Status_Code_FAILED = 0,
  AckMessage_Status_Code_OK = 1,
  AckMessage_Status_Code_AckMessage_Status_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AckMessage_Status_Code_AckMessage_Status_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AckMessage_Status_Code_IsValid(int value);
constexpr AckMessage_Status_Code AckMessage_Status_Code_Status_Code_MIN = AckMessage_Status_Code_FAILED;
constexpr AckMessage_Status_Code AckMessage_Status_Code_Status_Code_MAX = AckMessage_Status_Code_OK;
constexpr int AckMessage_Status_Code_Status_Code_ARRAYSIZE = AckMessage_Status_Code_Status_Code_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AckMessage_Status_Code_descriptor();
template<typename T>
inline const std::string& AckMessage_Status_Code_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AckMessage_Status_Code>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AckMessage_Status_Code_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AckMessage_Status_Code_descriptor(), enum_t_value);
}
inline bool AckMessage_Status_Code_Parse(
    const std::string& name, AckMessage_Status_Code* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AckMessage_Status_Code>(
    AckMessage_Status_Code_descriptor(), name, value);
}
enum JobStatusReason_Reason : int {
  JobStatusReason_Reason_PARSING_ERROR = 0,
  JobStatusReason_Reason_INCORRECT_FIELD_VALUE = 1,
  JobStatusReason_Reason_VERSION_MISMATCH = 2,
  JobStatusReason_Reason_TERMINATION_CONDITION_MET = 3,
  JobStatusReason_Reason_TERMINATED_BY_DCM = 4,
  JobStatusReason_Reason_RECEIVED_NEW = 5,
  JobStatusReason_Reason_ACTIVE_CONDITION_MET = 6,
  JobStatusReason_Reason_PAUSE_CONDITION_MET = 7,
  JobStatusReason_Reason_JobStatusReason_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JobStatusReason_Reason_JobStatusReason_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JobStatusReason_Reason_IsValid(int value);
constexpr JobStatusReason_Reason JobStatusReason_Reason_Reason_MIN = JobStatusReason_Reason_PARSING_ERROR;
constexpr JobStatusReason_Reason JobStatusReason_Reason_Reason_MAX = JobStatusReason_Reason_PAUSE_CONDITION_MET;
constexpr int JobStatusReason_Reason_Reason_ARRAYSIZE = JobStatusReason_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatusReason_Reason_descriptor();
template<typename T>
inline const std::string& JobStatusReason_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JobStatusReason_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JobStatusReason_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JobStatusReason_Reason_descriptor(), enum_t_value);
}
inline bool JobStatusReason_Reason_Parse(
    const std::string& name, JobStatusReason_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JobStatusReason_Reason>(
    JobStatusReason_Reason_descriptor(), name, value);
}
enum JobWarnings_Warnings : int {
  JobWarnings_Warnings_SIGNAL_NOT_FOUND = 0,
  JobWarnings_Warnings_JobWarnings_Warnings_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JobWarnings_Warnings_JobWarnings_Warnings_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JobWarnings_Warnings_IsValid(int value);
constexpr JobWarnings_Warnings JobWarnings_Warnings_Warnings_MIN = JobWarnings_Warnings_SIGNAL_NOT_FOUND;
constexpr JobWarnings_Warnings JobWarnings_Warnings_Warnings_MAX = JobWarnings_Warnings_SIGNAL_NOT_FOUND;
constexpr int JobWarnings_Warnings_Warnings_ARRAYSIZE = JobWarnings_Warnings_Warnings_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobWarnings_Warnings_descriptor();
template<typename T>
inline const std::string& JobWarnings_Warnings_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JobWarnings_Warnings>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JobWarnings_Warnings_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JobWarnings_Warnings_descriptor(), enum_t_value);
}
inline bool JobWarnings_Warnings_Parse(
    const std::string& name, JobWarnings_Warnings* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JobWarnings_Warnings>(
    JobWarnings_Warnings_descriptor(), name, value);
}
enum JobStatus_Job_Status : int {
  JobStatus_Job_Status_ACTIVE = 0,
  JobStatus_Job_Status_PAUSED = 1,
  JobStatus_Job_Status_TERMINATED = 2,
  JobStatus_Job_Status_INVALID = 3,
  JobStatus_Job_Status_JobStatus_Job_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  JobStatus_Job_Status_JobStatus_Job_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool JobStatus_Job_Status_IsValid(int value);
constexpr JobStatus_Job_Status JobStatus_Job_Status_Job_Status_MIN = JobStatus_Job_Status_ACTIVE;
constexpr JobStatus_Job_Status JobStatus_Job_Status_Job_Status_MAX = JobStatus_Job_Status_INVALID;
constexpr int JobStatus_Job_Status_Job_Status_ARRAYSIZE = JobStatus_Job_Status_Job_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JobStatus_Job_Status_descriptor();
template<typename T>
inline const std::string& JobStatus_Job_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JobStatus_Job_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JobStatus_Job_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JobStatus_Job_Status_descriptor(), enum_t_value);
}
inline bool JobStatus_Job_Status_Parse(
    const std::string& name, JobStatus_Job_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JobStatus_Job_Status>(
    JobStatus_Job_Status_descriptor(), name, value);
}
enum Content_Type : int {
  FULL = 0,
  DELTA = 1,
  Content_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Content_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Content_Type_IsValid(int value);
constexpr Content_Type Content_Type_MIN = FULL;
constexpr Content_Type Content_Type_MAX = DELTA;
constexpr int Content_Type_ARRAYSIZE = Content_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Content_Type_descriptor();
template<typename T>
inline const std::string& Content_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Content_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Content_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Content_Type_descriptor(), enum_t_value);
}
inline bool Content_Type_Parse(
    const std::string& name, Content_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Content_Type>(
    Content_Type_descriptor(), name, value);
}
enum Source_Type : int {
  UNDEFINED = 0,
  SOME_IP = 1,
  THRIFTME_PASSIVE = 2,
  THRIFTME_ACTIVE = 3,
  Source_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Source_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Source_Type_IsValid(int value);
constexpr Source_Type Source_Type_MIN = UNDEFINED;
constexpr Source_Type Source_Type_MAX = THRIFTME_ACTIVE;
constexpr int Source_Type_ARRAYSIZE = Source_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Source_Type_descriptor();
template<typename T>
inline const std::string& Source_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Source_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Source_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Source_Type_descriptor(), enum_t_value);
}
inline bool Source_Type_Parse(
    const std::string& name, Source_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Source_Type>(
    Source_Type_descriptor(), name, value);
}
// ===================================================================

class MessageHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageHeader) */ {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageHeader_Message_Type Message_Type;
  static constexpr Message_Type JOB_STATUS =
    MessageHeader_Message_Type_JOB_STATUS;
  static constexpr Message_Type JOB_STATUS_REQUEST =
    MessageHeader_Message_Type_JOB_STATUS_REQUEST;
  static constexpr Message_Type INITIATE_GEO_HASH_STREAM =
    MessageHeader_Message_Type_INITIATE_GEO_HASH_STREAM;
  static constexpr Message_Type GEO_HASH =
    MessageHeader_Message_Type_GEO_HASH;
  static constexpr Message_Type JOB_LIST =
    MessageHeader_Message_Type_JOB_LIST;
  static constexpr Message_Type JOB_STATUS_ACK =
    MessageHeader_Message_Type_JOB_STATUS_ACK;
  static constexpr Message_Type JOB_STATUS_REQUEST_ACK =
    MessageHeader_Message_Type_JOB_STATUS_REQUEST_ACK;
  static constexpr Message_Type INITIATE_GEO_HASH_STREAM_ACK =
    MessageHeader_Message_Type_INITIATE_GEO_HASH_STREAM_ACK;
  static constexpr Message_Type GEO_HASH_ACK =
    MessageHeader_Message_Type_GEO_HASH_ACK;
  static constexpr Message_Type JOB_LIST_ACK =
    MessageHeader_Message_Type_JOB_LIST_ACK;
  static constexpr Message_Type GET_STATIC_CONFIG =
    MessageHeader_Message_Type_GET_STATIC_CONFIG;
  static constexpr Message_Type STATIC_CONFIG =
    MessageHeader_Message_Type_STATIC_CONFIG;
  static constexpr Message_Type GET_DATA_COLLECTION_JOB =
    MessageHeader_Message_Type_GET_DATA_COLLECTION_JOB;
  static inline bool Message_Type_IsValid(int value) {
    return MessageHeader_Message_Type_IsValid(value);
  }
  static constexpr Message_Type Message_Type_MIN =
    MessageHeader_Message_Type_Message_Type_MIN;
  static constexpr Message_Type Message_Type_MAX =
    MessageHeader_Message_Type_Message_Type_MAX;
  static constexpr int Message_Type_ARRAYSIZE =
    MessageHeader_Message_Type_Message_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Message_Type_descriptor() {
    return MessageHeader_Message_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Message_Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Message_Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Message_Type_Name.");
    return MessageHeader_Message_Type_Name(enum_t_value);
  }
  static inline bool Message_Type_Parse(const std::string& name,
      Message_Type* value) {
    return MessageHeader_Message_Type_Parse(name, value);
  }

  typedef MessageHeader_Compression_Type Compression_Type;
  static constexpr Compression_Type NO_COMPRESSION =
    MessageHeader_Compression_Type_NO_COMPRESSION;
  static constexpr Compression_Type GZIP_COMPRESSION =
    MessageHeader_Compression_Type_GZIP_COMPRESSION;
  static inline bool Compression_Type_IsValid(int value) {
    return MessageHeader_Compression_Type_IsValid(value);
  }
  static constexpr Compression_Type Compression_Type_MIN =
    MessageHeader_Compression_Type_Compression_Type_MIN;
  static constexpr Compression_Type Compression_Type_MAX =
    MessageHeader_Compression_Type_Compression_Type_MAX;
  static constexpr int Compression_Type_ARRAYSIZE =
    MessageHeader_Compression_Type_Compression_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Compression_Type_descriptor() {
    return MessageHeader_Compression_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Compression_Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Compression_Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Compression_Type_Name.");
    return MessageHeader_Compression_Type_Name(enum_t_value);
  }
  static inline bool Compression_Type_Parse(const std::string& name,
      Compression_Type* value) {
    return MessageHeader_Compression_Type_Parse(name, value);
  }

  typedef MessageHeader_Ecu_Type Ecu_Type;
  static constexpr Ecu_Type CIVIC =
    MessageHeader_Ecu_Type_CIVIC;
  static constexpr Ecu_Type IDC =
    MessageHeader_Ecu_Type_IDC;
  static constexpr Ecu_Type CU =
    MessageHeader_Ecu_Type_CU;
  static inline bool Ecu_Type_IsValid(int value) {
    return MessageHeader_Ecu_Type_IsValid(value);
  }
  static constexpr Ecu_Type Ecu_Type_MIN =
    MessageHeader_Ecu_Type_Ecu_Type_MIN;
  static constexpr Ecu_Type Ecu_Type_MAX =
    MessageHeader_Ecu_Type_Ecu_Type_MAX;
  static constexpr int Ecu_Type_ARRAYSIZE =
    MessageHeader_Ecu_Type_Ecu_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Ecu_Type_descriptor() {
    return MessageHeader_Ecu_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Ecu_Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Ecu_Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Ecu_Type_Name.");
    return MessageHeader_Ecu_Type_Name(enum_t_value);
  }
  static inline bool Ecu_Type_Parse(const std::string& name,
      Ecu_Type* value) {
    return MessageHeader_Ecu_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolVersionMajorFieldNumber = 1,
    kProtocolVersionMinorFieldNumber = 2,
    kMessageTypeFieldNumber = 3,
    kPayloadSizeByteFieldNumber = 4,
    kTransmissionCompressionFieldNumber = 5,
    kSequenceNbFieldNumber = 6,
    kEcuFieldNumber = 7,
  };
  // int32 protocol_version_major = 1;
  void clear_protocol_version_major();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version_major() const;
  void set_protocol_version_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protocol_version_major() const;
  void _internal_set_protocol_version_major(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 protocol_version_minor = 2;
  void clear_protocol_version_minor();
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version_minor() const;
  void set_protocol_version_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_protocol_version_minor() const;
  void _internal_set_protocol_version_minor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .MessageHeader.Message_Type message_type = 3;
  void clear_message_type();
  ::MessageHeader_Message_Type message_type() const;
  void set_message_type(::MessageHeader_Message_Type value);
  private:
  ::MessageHeader_Message_Type _internal_message_type() const;
  void _internal_set_message_type(::MessageHeader_Message_Type value);
  public:

  // uint32 payload_size_byte = 4;
  void clear_payload_size_byte();
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_size_byte() const;
  void set_payload_size_byte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_payload_size_byte() const;
  void _internal_set_payload_size_byte(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .MessageHeader.Compression_Type transmission_compression = 5;
  void clear_transmission_compression();
  ::MessageHeader_Compression_Type transmission_compression() const;
  void set_transmission_compression(::MessageHeader_Compression_Type value);
  private:
  ::MessageHeader_Compression_Type _internal_transmission_compression() const;
  void _internal_set_transmission_compression(::MessageHeader_Compression_Type value);
  public:

  // int32 sequence_nb = 6;
  void clear_sequence_nb();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_nb() const;
  void set_sequence_nb(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_nb() const;
  void _internal_set_sequence_nb(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .MessageHeader.Ecu_Type ecu = 7;
  void clear_ecu();
  ::MessageHeader_Ecu_Type ecu() const;
  void set_ecu(::MessageHeader_Ecu_Type value);
  private:
  ::MessageHeader_Ecu_Type _internal_ecu() const;
  void _internal_set_ecu(::MessageHeader_Ecu_Type value);
  public:

  // @@protoc_insertion_point(class_scope:MessageHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version_major_;
  ::PROTOBUF_NAMESPACE_ID::int32 protocol_version_minor_;
  int message_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 payload_size_byte_;
  int transmission_compression_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_nb_;
  int ecu_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class MessageBody :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageBody) */ {
 public:
  MessageBody();
  virtual ~MessageBody();

  MessageBody(const MessageBody& from);
  MessageBody(MessageBody&& from) noexcept
    : MessageBody() {
    *this = ::std::move(from);
  }

  inline MessageBody& operator=(const MessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBody& operator=(MessageBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageBody& default_instance();

  enum MessageBodyCase {
    kJobStatus = 1,
    kJobStatusRequest = 2,
    kInitiateGeohashStream = 3,
    kGeoHash = 4,
    kDataCollectionJobsList = 5,
    kJobstatusAck = 6,
    kJobStatusRequestAck = 7,
    kInitiateGeohashAck = 8,
    kGeohashStreamAck = 9,
    kDatacollectionJobAck = 10,
    kGetStaticConfig = 11,
    kStaticConfig = 12,
    kGetDataCollectionJobs = 13,
    MESSAGE_BODY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageBody* internal_default_instance() {
    return reinterpret_cast<const MessageBody*>(
               &_MessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageBody& a, MessageBody& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBody* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageBody* New() const final {
    return CreateMaybeMessage<MessageBody>(nullptr);
  }

  MessageBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageBody>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageBody& from);
  void MergeFrom(const MessageBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBody* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageBody";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobStatusFieldNumber = 1,
    kJobStatusRequestFieldNumber = 2,
    kInitiateGeohashStreamFieldNumber = 3,
    kGeoHashFieldNumber = 4,
    kDataCollectionJobsListFieldNumber = 5,
    kJobstatusAckFieldNumber = 6,
    kJobStatusRequestAckFieldNumber = 7,
    kInitiateGeohashAckFieldNumber = 8,
    kGeohashStreamAckFieldNumber = 9,
    kDatacollectionJobAckFieldNumber = 10,
    kGetStaticConfigFieldNumber = 11,
    kStaticConfigFieldNumber = 12,
    kGetDataCollectionJobsFieldNumber = 13,
  };
  // .JobStatusMessage job_status = 1;
  bool has_job_status() const;
  private:
  bool _internal_has_job_status() const;
  public:
  void clear_job_status();
  const ::JobStatusMessage& job_status() const;
  ::JobStatusMessage* release_job_status();
  ::JobStatusMessage* mutable_job_status();
  void set_allocated_job_status(::JobStatusMessage* job_status);
  private:
  const ::JobStatusMessage& _internal_job_status() const;
  ::JobStatusMessage* _internal_mutable_job_status();
  public:

  // .JobStatusRequestMessage job_status_request = 2;
  bool has_job_status_request() const;
  private:
  bool _internal_has_job_status_request() const;
  public:
  void clear_job_status_request();
  const ::JobStatusRequestMessage& job_status_request() const;
  ::JobStatusRequestMessage* release_job_status_request();
  ::JobStatusRequestMessage* mutable_job_status_request();
  void set_allocated_job_status_request(::JobStatusRequestMessage* job_status_request);
  private:
  const ::JobStatusRequestMessage& _internal_job_status_request() const;
  ::JobStatusRequestMessage* _internal_mutable_job_status_request();
  public:

  // .InitiateGeohashStreamMessage initiate_geohash_stream = 3;
  bool has_initiate_geohash_stream() const;
  private:
  bool _internal_has_initiate_geohash_stream() const;
  public:
  void clear_initiate_geohash_stream();
  const ::InitiateGeohashStreamMessage& initiate_geohash_stream() const;
  ::InitiateGeohashStreamMessage* release_initiate_geohash_stream();
  ::InitiateGeohashStreamMessage* mutable_initiate_geohash_stream();
  void set_allocated_initiate_geohash_stream(::InitiateGeohashStreamMessage* initiate_geohash_stream);
  private:
  const ::InitiateGeohashStreamMessage& _internal_initiate_geohash_stream() const;
  ::InitiateGeohashStreamMessage* _internal_mutable_initiate_geohash_stream();
  public:

  // .GeoHashMessage geo_hash = 4;
  bool has_geo_hash() const;
  private:
  bool _internal_has_geo_hash() const;
  public:
  void clear_geo_hash();
  const ::GeoHashMessage& geo_hash() const;
  ::GeoHashMessage* release_geo_hash();
  ::GeoHashMessage* mutable_geo_hash();
  void set_allocated_geo_hash(::GeoHashMessage* geo_hash);
  private:
  const ::GeoHashMessage& _internal_geo_hash() const;
  ::GeoHashMessage* _internal_mutable_geo_hash();
  public:

  // .DataCollectionJobsListMessage data_collection_jobs_list = 5;
  bool has_data_collection_jobs_list() const;
  private:
  bool _internal_has_data_collection_jobs_list() const;
  public:
  void clear_data_collection_jobs_list();
  const ::DataCollectionJobsListMessage& data_collection_jobs_list() const;
  ::DataCollectionJobsListMessage* release_data_collection_jobs_list();
  ::DataCollectionJobsListMessage* mutable_data_collection_jobs_list();
  void set_allocated_data_collection_jobs_list(::DataCollectionJobsListMessage* data_collection_jobs_list);
  private:
  const ::DataCollectionJobsListMessage& _internal_data_collection_jobs_list() const;
  ::DataCollectionJobsListMessage* _internal_mutable_data_collection_jobs_list();
  public:

  // .AckMessage jobstatus_ack = 6;
  bool has_jobstatus_ack() const;
  private:
  bool _internal_has_jobstatus_ack() const;
  public:
  void clear_jobstatus_ack();
  const ::AckMessage& jobstatus_ack() const;
  ::AckMessage* release_jobstatus_ack();
  ::AckMessage* mutable_jobstatus_ack();
  void set_allocated_jobstatus_ack(::AckMessage* jobstatus_ack);
  private:
  const ::AckMessage& _internal_jobstatus_ack() const;
  ::AckMessage* _internal_mutable_jobstatus_ack();
  public:

  // .AckMessage job_status_request_ack = 7;
  bool has_job_status_request_ack() const;
  private:
  bool _internal_has_job_status_request_ack() const;
  public:
  void clear_job_status_request_ack();
  const ::AckMessage& job_status_request_ack() const;
  ::AckMessage* release_job_status_request_ack();
  ::AckMessage* mutable_job_status_request_ack();
  void set_allocated_job_status_request_ack(::AckMessage* job_status_request_ack);
  private:
  const ::AckMessage& _internal_job_status_request_ack() const;
  ::AckMessage* _internal_mutable_job_status_request_ack();
  public:

  // .AckMessage initiate_geohash_ack = 8;
  bool has_initiate_geohash_ack() const;
  private:
  bool _internal_has_initiate_geohash_ack() const;
  public:
  void clear_initiate_geohash_ack();
  const ::AckMessage& initiate_geohash_ack() const;
  ::AckMessage* release_initiate_geohash_ack();
  ::AckMessage* mutable_initiate_geohash_ack();
  void set_allocated_initiate_geohash_ack(::AckMessage* initiate_geohash_ack);
  private:
  const ::AckMessage& _internal_initiate_geohash_ack() const;
  ::AckMessage* _internal_mutable_initiate_geohash_ack();
  public:

  // .AckMessage geohash_stream_ack = 9;
  bool has_geohash_stream_ack() const;
  private:
  bool _internal_has_geohash_stream_ack() const;
  public:
  void clear_geohash_stream_ack();
  const ::AckMessage& geohash_stream_ack() const;
  ::AckMessage* release_geohash_stream_ack();
  ::AckMessage* mutable_geohash_stream_ack();
  void set_allocated_geohash_stream_ack(::AckMessage* geohash_stream_ack);
  private:
  const ::AckMessage& _internal_geohash_stream_ack() const;
  ::AckMessage* _internal_mutable_geohash_stream_ack();
  public:

  // .AckMessage datacollection_job_ack = 10;
  bool has_datacollection_job_ack() const;
  private:
  bool _internal_has_datacollection_job_ack() const;
  public:
  void clear_datacollection_job_ack();
  const ::AckMessage& datacollection_job_ack() const;
  ::AckMessage* release_datacollection_job_ack();
  ::AckMessage* mutable_datacollection_job_ack();
  void set_allocated_datacollection_job_ack(::AckMessage* datacollection_job_ack);
  private:
  const ::AckMessage& _internal_datacollection_job_ack() const;
  ::AckMessage* _internal_mutable_datacollection_job_ack();
  public:

  // .GetStaticConfigMessage get_static_config = 11;
  bool has_get_static_config() const;
  private:
  bool _internal_has_get_static_config() const;
  public:
  void clear_get_static_config();
  const ::GetStaticConfigMessage& get_static_config() const;
  ::GetStaticConfigMessage* release_get_static_config();
  ::GetStaticConfigMessage* mutable_get_static_config();
  void set_allocated_get_static_config(::GetStaticConfigMessage* get_static_config);
  private:
  const ::GetStaticConfigMessage& _internal_get_static_config() const;
  ::GetStaticConfigMessage* _internal_mutable_get_static_config();
  public:

  // .StaticConfigMessage static_config = 12;
  bool has_static_config() const;
  private:
  bool _internal_has_static_config() const;
  public:
  void clear_static_config();
  const ::StaticConfigMessage& static_config() const;
  ::StaticConfigMessage* release_static_config();
  ::StaticConfigMessage* mutable_static_config();
  void set_allocated_static_config(::StaticConfigMessage* static_config);
  private:
  const ::StaticConfigMessage& _internal_static_config() const;
  ::StaticConfigMessage* _internal_mutable_static_config();
  public:

  // .GetDataCollectionJobsMessage get_data_collection_jobs = 13;
  bool has_get_data_collection_jobs() const;
  private:
  bool _internal_has_get_data_collection_jobs() const;
  public:
  void clear_get_data_collection_jobs();
  const ::GetDataCollectionJobsMessage& get_data_collection_jobs() const;
  ::GetDataCollectionJobsMessage* release_get_data_collection_jobs();
  ::GetDataCollectionJobsMessage* mutable_get_data_collection_jobs();
  void set_allocated_get_data_collection_jobs(::GetDataCollectionJobsMessage* get_data_collection_jobs);
  private:
  const ::GetDataCollectionJobsMessage& _internal_get_data_collection_jobs() const;
  ::GetDataCollectionJobsMessage* _internal_mutable_get_data_collection_jobs();
  public:

  void clear_message_body();
  MessageBodyCase message_body_case() const;
  // @@protoc_insertion_point(class_scope:MessageBody)
 private:
  class _Internal;
  void set_has_job_status();
  void set_has_job_status_request();
  void set_has_initiate_geohash_stream();
  void set_has_geo_hash();
  void set_has_data_collection_jobs_list();
  void set_has_jobstatus_ack();
  void set_has_job_status_request_ack();
  void set_has_initiate_geohash_ack();
  void set_has_geohash_stream_ack();
  void set_has_datacollection_job_ack();
  void set_has_get_static_config();
  void set_has_static_config();
  void set_has_get_data_collection_jobs();

  inline bool has_message_body() const;
  inline void clear_has_message_body();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union MessageBodyUnion {
    MessageBodyUnion() {}
    ::JobStatusMessage* job_status_;
    ::JobStatusRequestMessage* job_status_request_;
    ::InitiateGeohashStreamMessage* initiate_geohash_stream_;
    ::GeoHashMessage* geo_hash_;
    ::DataCollectionJobsListMessage* data_collection_jobs_list_;
    ::AckMessage* jobstatus_ack_;
    ::AckMessage* job_status_request_ack_;
    ::AckMessage* initiate_geohash_ack_;
    ::AckMessage* geohash_stream_ack_;
    ::AckMessage* datacollection_job_ack_;
    ::GetStaticConfigMessage* get_static_config_;
    ::StaticConfigMessage* static_config_;
    ::GetDataCollectionJobsMessage* get_data_collection_jobs_;
  } message_body_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class AckMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AckMessage) */ {
 public:
  AckMessage();
  virtual ~AckMessage();

  AckMessage(const AckMessage& from);
  AckMessage(AckMessage&& from) noexcept
    : AckMessage() {
    *this = ::std::move(from);
  }

  inline AckMessage& operator=(const AckMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckMessage& operator=(AckMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AckMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AckMessage* internal_default_instance() {
    return reinterpret_cast<const AckMessage*>(
               &_AckMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AckMessage& a, AckMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AckMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckMessage* New() const final {
    return CreateMaybeMessage<AckMessage>(nullptr);
  }

  AckMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckMessage& from);
  void MergeFrom(const AckMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AckMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AckMessage_Status_Code Status_Code;
  static constexpr Status_Code FAILED =
    AckMessage_Status_Code_FAILED;
  static constexpr Status_Code OK =
    AckMessage_Status_Code_OK;
  static inline bool Status_Code_IsValid(int value) {
    return AckMessage_Status_Code_IsValid(value);
  }
  static constexpr Status_Code Status_Code_MIN =
    AckMessage_Status_Code_Status_Code_MIN;
  static constexpr Status_Code Status_Code_MAX =
    AckMessage_Status_Code_Status_Code_MAX;
  static constexpr int Status_Code_ARRAYSIZE =
    AckMessage_Status_Code_Status_Code_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_Code_descriptor() {
    return AckMessage_Status_Code_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Code_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status_Code>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Code_Name.");
    return AckMessage_Status_Code_Name(enum_t_value);
  }
  static inline bool Status_Code_Parse(const std::string& name,
      Status_Code* value) {
    return AckMessage_Status_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .AckMessage.Status_Code status = 1;
  void clear_status();
  ::AckMessage_Status_Code status() const;
  void set_status(::AckMessage_Status_Code value);
  private:
  ::AckMessage_Status_Code _internal_status() const;
  void _internal_set_status(::AckMessage_Status_Code value);
  public:

  // @@protoc_insertion_point(class_scope:AckMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class JobStatusMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JobStatusMessage) */ {
 public:
  JobStatusMessage();
  virtual ~JobStatusMessage();

  JobStatusMessage(const JobStatusMessage& from);
  JobStatusMessage(JobStatusMessage&& from) noexcept
    : JobStatusMessage() {
    *this = ::std::move(from);
  }

  inline JobStatusMessage& operator=(const JobStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatusMessage& operator=(JobStatusMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobStatusMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobStatusMessage* internal_default_instance() {
    return reinterpret_cast<const JobStatusMessage*>(
               &_JobStatusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JobStatusMessage& a, JobStatusMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStatusMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobStatusMessage* New() const final {
    return CreateMaybeMessage<JobStatusMessage>(nullptr);
  }

  JobStatusMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobStatusMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobStatusMessage& from);
  void MergeFrom(const JobStatusMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStatusMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JobStatusMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDcJobFieldNumber = 2,
    kContentTypeFieldNumber = 1,
    kMaxSupportedJobsFieldNumber = 3,
  };
  // repeated .Job dc_job = 2;
  int dc_job_size() const;
  private:
  int _internal_dc_job_size() const;
  public:
  void clear_dc_job();
  ::Job* mutable_dc_job(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Job >*
      mutable_dc_job();
  private:
  const ::Job& _internal_dc_job(int index) const;
  ::Job* _internal_add_dc_job();
  public:
  const ::Job& dc_job(int index) const;
  ::Job* add_dc_job();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Job >&
      dc_job() const;

  // .Content_Type content_type = 1;
  void clear_content_type();
  ::Content_Type content_type() const;
  void set_content_type(::Content_Type value);
  private:
  ::Content_Type _internal_content_type() const;
  void _internal_set_content_type(::Content_Type value);
  public:

  // int32 max_supported_jobs = 3;
  void clear_max_supported_jobs();
  ::PROTOBUF_NAMESPACE_ID::int32 max_supported_jobs() const;
  void set_max_supported_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_supported_jobs() const;
  void _internal_set_max_supported_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JobStatusMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Job > dc_job_;
  int content_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_supported_jobs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class JobStatusRequestMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JobStatusRequestMessage) */ {
 public:
  JobStatusRequestMessage();
  virtual ~JobStatusRequestMessage();

  JobStatusRequestMessage(const JobStatusRequestMessage& from);
  JobStatusRequestMessage(JobStatusRequestMessage&& from) noexcept
    : JobStatusRequestMessage() {
    *this = ::std::move(from);
  }

  inline JobStatusRequestMessage& operator=(const JobStatusRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatusRequestMessage& operator=(JobStatusRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobStatusRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobStatusRequestMessage* internal_default_instance() {
    return reinterpret_cast<const JobStatusRequestMessage*>(
               &_JobStatusRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(JobStatusRequestMessage& a, JobStatusRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStatusRequestMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobStatusRequestMessage* New() const final {
    return CreateMaybeMessage<JobStatusRequestMessage>(nullptr);
  }

  JobStatusRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobStatusRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobStatusRequestMessage& from);
  void MergeFrom(const JobStatusRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStatusRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JobStatusRequestMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 1,
  };
  // .Content_Type content_type = 1;
  void clear_content_type();
  ::Content_Type content_type() const;
  void set_content_type(::Content_Type value);
  private:
  ::Content_Type _internal_content_type() const;
  void _internal_set_content_type(::Content_Type value);
  public:

  // @@protoc_insertion_point(class_scope:JobStatusRequestMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int content_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class InitiateGeohashStreamMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:InitiateGeohashStreamMessage) */ {
 public:
  InitiateGeohashStreamMessage();
  virtual ~InitiateGeohashStreamMessage();

  InitiateGeohashStreamMessage(const InitiateGeohashStreamMessage& from);
  InitiateGeohashStreamMessage(InitiateGeohashStreamMessage&& from) noexcept
    : InitiateGeohashStreamMessage() {
    *this = ::std::move(from);
  }

  inline InitiateGeohashStreamMessage& operator=(const InitiateGeohashStreamMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitiateGeohashStreamMessage& operator=(InitiateGeohashStreamMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitiateGeohashStreamMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InitiateGeohashStreamMessage* internal_default_instance() {
    return reinterpret_cast<const InitiateGeohashStreamMessage*>(
               &_InitiateGeohashStreamMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InitiateGeohashStreamMessage& a, InitiateGeohashStreamMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InitiateGeohashStreamMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitiateGeohashStreamMessage* New() const final {
    return CreateMaybeMessage<InitiateGeohashStreamMessage>(nullptr);
  }

  InitiateGeohashStreamMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitiateGeohashStreamMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitiateGeohashStreamMessage& from);
  void MergeFrom(const InitiateGeohashStreamMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitiateGeohashStreamMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "InitiateGeohashStreamMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreasFieldNumber = 2,
    kEnabledFieldNumber = 1,
  };
  // repeated .GeohashStreamArea areas = 2;
  int areas_size() const;
  private:
  int _internal_areas_size() const;
  public:
  void clear_areas();
  ::GeohashStreamArea* mutable_areas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeohashStreamArea >*
      mutable_areas();
  private:
  const ::GeohashStreamArea& _internal_areas(int index) const;
  ::GeohashStreamArea* _internal_add_areas();
  public:
  const ::GeohashStreamArea& areas(int index) const;
  ::GeohashStreamArea* add_areas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeohashStreamArea >&
      areas() const;

  // bool enabled = 1;
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:InitiateGeohashStreamMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeohashStreamArea > areas_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class GeohashStreamArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GeohashStreamArea) */ {
 public:
  GeohashStreamArea();
  virtual ~GeohashStreamArea();

  GeohashStreamArea(const GeohashStreamArea& from);
  GeohashStreamArea(GeohashStreamArea&& from) noexcept
    : GeohashStreamArea() {
    *this = ::std::move(from);
  }

  inline GeohashStreamArea& operator=(const GeohashStreamArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeohashStreamArea& operator=(GeohashStreamArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeohashStreamArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeohashStreamArea* internal_default_instance() {
    return reinterpret_cast<const GeohashStreamArea*>(
               &_GeohashStreamArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GeohashStreamArea& a, GeohashStreamArea& b) {
    a.Swap(&b);
  }
  inline void Swap(GeohashStreamArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeohashStreamArea* New() const final {
    return CreateMaybeMessage<GeohashStreamArea>(nullptr);
  }

  GeohashStreamArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeohashStreamArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeohashStreamArea& from);
  void MergeFrom(const GeohashStreamArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeohashStreamArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GeohashStreamArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoAreaFieldNumber = 2,
    kPrecisionFieldNumber = 1,
  };
  // .CompositeLocationArea geo_area = 2;
  bool has_geo_area() const;
  private:
  bool _internal_has_geo_area() const;
  public:
  void clear_geo_area();
  const ::CompositeLocationArea& geo_area() const;
  ::CompositeLocationArea* release_geo_area();
  ::CompositeLocationArea* mutable_geo_area();
  void set_allocated_geo_area(::CompositeLocationArea* geo_area);
  private:
  const ::CompositeLocationArea& _internal_geo_area() const;
  ::CompositeLocationArea* _internal_mutable_geo_area();
  public:

  // int32 precision = 1;
  void clear_precision();
  ::PROTOBUF_NAMESPACE_ID::int32 precision() const;
  void set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_precision() const;
  void _internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GeohashStreamArea)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::CompositeLocationArea* geo_area_;
  ::PROTOBUF_NAMESPACE_ID::int32 precision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class GeoHashMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GeoHashMessage) */ {
 public:
  GeoHashMessage();
  virtual ~GeoHashMessage();

  GeoHashMessage(const GeoHashMessage& from);
  GeoHashMessage(GeoHashMessage&& from) noexcept
    : GeoHashMessage() {
    *this = ::std::move(from);
  }

  inline GeoHashMessage& operator=(const GeoHashMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoHashMessage& operator=(GeoHashMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoHashMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoHashMessage* internal_default_instance() {
    return reinterpret_cast<const GeoHashMessage*>(
               &_GeoHashMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GeoHashMessage& a, GeoHashMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoHashMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoHashMessage* New() const final {
    return CreateMaybeMessage<GeoHashMessage>(nullptr);
  }

  GeoHashMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoHashMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoHashMessage& from);
  void MergeFrom(const GeoHashMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoHashMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GeoHashMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoHashValueFieldNumber = 1,
  };
  // string geo_hash_value = 1;
  void clear_geo_hash_value();
  const std::string& geo_hash_value() const;
  void set_geo_hash_value(const std::string& value);
  void set_geo_hash_value(std::string&& value);
  void set_geo_hash_value(const char* value);
  void set_geo_hash_value(const char* value, size_t size);
  std::string* mutable_geo_hash_value();
  std::string* release_geo_hash_value();
  void set_allocated_geo_hash_value(std::string* geo_hash_value);
  private:
  const std::string& _internal_geo_hash_value() const;
  void _internal_set_geo_hash_value(const std::string& value);
  std::string* _internal_mutable_geo_hash_value();
  public:

  // @@protoc_insertion_point(class_scope:GeoHashMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr geo_hash_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class Job :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Job) */ {
 public:
  Job();
  virtual ~Job();

  Job(const Job& from);
  Job(Job&& from) noexcept
    : Job() {
    *this = ::std::move(from);
  }

  inline Job& operator=(const Job& from) {
    CopyFrom(from);
    return *this;
  }
  inline Job& operator=(Job&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Job& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Job* internal_default_instance() {
    return reinterpret_cast<const Job*>(
               &_Job_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Job& a, Job& b) {
    a.Swap(&b);
  }
  inline void Swap(Job* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Job* New() const final {
    return CreateMaybeMessage<Job>(nullptr);
  }

  Job* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Job>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Job& from);
  void MergeFrom(const Job& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Job* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Job";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJobWarningsFieldNumber = 5,
    kJobIdFieldNumber = 1,
    kJobStatusFieldNumber = 2,
    kReasonFieldNumber = 3,
    kJobStatisticsFieldNumber = 4,
    kUtcTimestampMsFieldNumber = 6,
  };
  // repeated .JobWarnings job_warnings = 5;
  int job_warnings_size() const;
  private:
  int _internal_job_warnings_size() const;
  public:
  void clear_job_warnings();
  ::JobWarnings* mutable_job_warnings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JobWarnings >*
      mutable_job_warnings();
  private:
  const ::JobWarnings& _internal_job_warnings(int index) const;
  ::JobWarnings* _internal_add_job_warnings();
  public:
  const ::JobWarnings& job_warnings(int index) const;
  ::JobWarnings* add_job_warnings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JobWarnings >&
      job_warnings() const;

  // string job_id = 1;
  void clear_job_id();
  const std::string& job_id() const;
  void set_job_id(const std::string& value);
  void set_job_id(std::string&& value);
  void set_job_id(const char* value);
  void set_job_id(const char* value, size_t size);
  std::string* mutable_job_id();
  std::string* release_job_id();
  void set_allocated_job_id(std::string* job_id);
  private:
  const std::string& _internal_job_id() const;
  void _internal_set_job_id(const std::string& value);
  std::string* _internal_mutable_job_id();
  public:

  // .JobStatus job_status = 2;
  bool has_job_status() const;
  private:
  bool _internal_has_job_status() const;
  public:
  void clear_job_status();
  const ::JobStatus& job_status() const;
  ::JobStatus* release_job_status();
  ::JobStatus* mutable_job_status();
  void set_allocated_job_status(::JobStatus* job_status);
  private:
  const ::JobStatus& _internal_job_status() const;
  ::JobStatus* _internal_mutable_job_status();
  public:

  // .JobStatusReason reason = 3;
  bool has_reason() const;
  private:
  bool _internal_has_reason() const;
  public:
  void clear_reason();
  const ::JobStatusReason& reason() const;
  ::JobStatusReason* release_reason();
  ::JobStatusReason* mutable_reason();
  void set_allocated_reason(::JobStatusReason* reason);
  private:
  const ::JobStatusReason& _internal_reason() const;
  ::JobStatusReason* _internal_mutable_reason();
  public:

  // .JobStatistics job_statistics = 4;
  bool has_job_statistics() const;
  private:
  bool _internal_has_job_statistics() const;
  public:
  void clear_job_statistics();
  const ::JobStatistics& job_statistics() const;
  ::JobStatistics* release_job_statistics();
  ::JobStatistics* mutable_job_statistics();
  void set_allocated_job_statistics(::JobStatistics* job_statistics);
  private:
  const ::JobStatistics& _internal_job_statistics() const;
  ::JobStatistics* _internal_mutable_job_statistics();
  public:

  // uint64 utc_timestamp_ms = 6;
  void clear_utc_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_timestamp_ms() const;
  void set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc_timestamp_ms() const;
  void _internal_set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Job)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JobWarnings > job_warnings_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_id_;
  ::JobStatus* job_status_;
  ::JobStatusReason* reason_;
  ::JobStatistics* job_statistics_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_timestamp_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class JobStatusReason :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JobStatusReason) */ {
 public:
  JobStatusReason();
  virtual ~JobStatusReason();

  JobStatusReason(const JobStatusReason& from);
  JobStatusReason(JobStatusReason&& from) noexcept
    : JobStatusReason() {
    *this = ::std::move(from);
  }

  inline JobStatusReason& operator=(const JobStatusReason& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatusReason& operator=(JobStatusReason&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobStatusReason& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobStatusReason* internal_default_instance() {
    return reinterpret_cast<const JobStatusReason*>(
               &_JobStatusReason_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(JobStatusReason& a, JobStatusReason& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStatusReason* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobStatusReason* New() const final {
    return CreateMaybeMessage<JobStatusReason>(nullptr);
  }

  JobStatusReason* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobStatusReason>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobStatusReason& from);
  void MergeFrom(const JobStatusReason& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStatusReason* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JobStatusReason";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JobStatusReason_Reason Reason;
  static constexpr Reason PARSING_ERROR =
    JobStatusReason_Reason_PARSING_ERROR;
  static constexpr Reason INCORRECT_FIELD_VALUE =
    JobStatusReason_Reason_INCORRECT_FIELD_VALUE;
  static constexpr Reason VERSION_MISMATCH =
    JobStatusReason_Reason_VERSION_MISMATCH;
  static constexpr Reason TERMINATION_CONDITION_MET =
    JobStatusReason_Reason_TERMINATION_CONDITION_MET;
  static constexpr Reason TERMINATED_BY_DCM =
    JobStatusReason_Reason_TERMINATED_BY_DCM;
  static constexpr Reason RECEIVED_NEW =
    JobStatusReason_Reason_RECEIVED_NEW;
  static constexpr Reason ACTIVE_CONDITION_MET =
    JobStatusReason_Reason_ACTIVE_CONDITION_MET;
  static constexpr Reason PAUSE_CONDITION_MET =
    JobStatusReason_Reason_PAUSE_CONDITION_MET;
  static inline bool Reason_IsValid(int value) {
    return JobStatusReason_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    JobStatusReason_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    JobStatusReason_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    JobStatusReason_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return JobStatusReason_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return JobStatusReason_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(const std::string& name,
      Reason* value) {
    return JobStatusReason_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 2,
    kReasonFieldNumber = 1,
  };
  // string detail = 2;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // .JobStatusReason.Reason reason = 1;
  void clear_reason();
  ::JobStatusReason_Reason reason() const;
  void set_reason(::JobStatusReason_Reason value);
  private:
  ::JobStatusReason_Reason _internal_reason() const;
  void _internal_set_reason(::JobStatusReason_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:JobStatusReason)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class JobWarnings :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JobWarnings) */ {
 public:
  JobWarnings();
  virtual ~JobWarnings();

  JobWarnings(const JobWarnings& from);
  JobWarnings(JobWarnings&& from) noexcept
    : JobWarnings() {
    *this = ::std::move(from);
  }

  inline JobWarnings& operator=(const JobWarnings& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobWarnings& operator=(JobWarnings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobWarnings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobWarnings* internal_default_instance() {
    return reinterpret_cast<const JobWarnings*>(
               &_JobWarnings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(JobWarnings& a, JobWarnings& b) {
    a.Swap(&b);
  }
  inline void Swap(JobWarnings* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobWarnings* New() const final {
    return CreateMaybeMessage<JobWarnings>(nullptr);
  }

  JobWarnings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobWarnings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobWarnings& from);
  void MergeFrom(const JobWarnings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobWarnings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JobWarnings";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JobWarnings_Warnings Warnings;
  static constexpr Warnings SIGNAL_NOT_FOUND =
    JobWarnings_Warnings_SIGNAL_NOT_FOUND;
  static inline bool Warnings_IsValid(int value) {
    return JobWarnings_Warnings_IsValid(value);
  }
  static constexpr Warnings Warnings_MIN =
    JobWarnings_Warnings_Warnings_MIN;
  static constexpr Warnings Warnings_MAX =
    JobWarnings_Warnings_Warnings_MAX;
  static constexpr int Warnings_ARRAYSIZE =
    JobWarnings_Warnings_Warnings_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Warnings_descriptor() {
    return JobWarnings_Warnings_descriptor();
  }
  template<typename T>
  static inline const std::string& Warnings_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Warnings>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Warnings_Name.");
    return JobWarnings_Warnings_Name(enum_t_value);
  }
  static inline bool Warnings_Parse(const std::string& name,
      Warnings* value) {
    return JobWarnings_Warnings_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDetailFieldNumber = 2,
    kUtcTimestampMsFieldNumber = 3,
    kWarningFieldNumber = 1,
  };
  // string detail = 2;
  void clear_detail();
  const std::string& detail() const;
  void set_detail(const std::string& value);
  void set_detail(std::string&& value);
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  std::string* mutable_detail();
  std::string* release_detail();
  void set_allocated_detail(std::string* detail);
  private:
  const std::string& _internal_detail() const;
  void _internal_set_detail(const std::string& value);
  std::string* _internal_mutable_detail();
  public:

  // uint64 utc_timestamp_ms = 3;
  void clear_utc_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_timestamp_ms() const;
  void set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc_timestamp_ms() const;
  void _internal_set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .JobWarnings.Warnings warning = 1;
  void clear_warning();
  ::JobWarnings_Warnings warning() const;
  void set_warning(::JobWarnings_Warnings value);
  private:
  ::JobWarnings_Warnings _internal_warning() const;
  void _internal_set_warning(::JobWarnings_Warnings value);
  public:

  // @@protoc_insertion_point(class_scope:JobWarnings)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_timestamp_ms_;
  int warning_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class JobStatistics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JobStatistics) */ {
 public:
  JobStatistics();
  virtual ~JobStatistics();

  JobStatistics(const JobStatistics& from);
  JobStatistics(JobStatistics&& from) noexcept
    : JobStatistics() {
    *this = ::std::move(from);
  }

  inline JobStatistics& operator=(const JobStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatistics& operator=(JobStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobStatistics* internal_default_instance() {
    return reinterpret_cast<const JobStatistics*>(
               &_JobStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(JobStatistics& a, JobStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStatistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobStatistics* New() const final {
    return CreateMaybeMessage<JobStatistics>(nullptr);
  }

  JobStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobStatistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobStatistics& from);
  void MergeFrom(const JobStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JobStatistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDrivenKmFieldNumber = 1,
    kDrivenTimeFieldNumber = 2,
    kUtcTimestampMsFieldNumber = 4,
    kNumOfUploadedFilesFieldNumber = 3,
  };
  // int32 driven_km = 1;
  void clear_driven_km();
  ::PROTOBUF_NAMESPACE_ID::int32 driven_km() const;
  void set_driven_km(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driven_km() const;
  void _internal_set_driven_km(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 driven_time = 2;
  void clear_driven_time();
  ::PROTOBUF_NAMESPACE_ID::int32 driven_time() const;
  void set_driven_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_driven_time() const;
  void _internal_set_driven_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 utc_timestamp_ms = 4;
  void clear_utc_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_timestamp_ms() const;
  void set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc_timestamp_ms() const;
  void _internal_set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 num_Of_uploaded_files = 3;
  void clear_num_of_uploaded_files();
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_uploaded_files() const;
  void set_num_of_uploaded_files(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_of_uploaded_files() const;
  void _internal_set_num_of_uploaded_files(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:JobStatistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 driven_km_;
  ::PROTOBUF_NAMESPACE_ID::int32 driven_time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_timestamp_ms_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_of_uploaded_files_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class JobStatus :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:JobStatus) */ {
 public:
  JobStatus();
  virtual ~JobStatus();

  JobStatus(const JobStatus& from);
  JobStatus(JobStatus&& from) noexcept
    : JobStatus() {
    *this = ::std::move(from);
  }

  inline JobStatus& operator=(const JobStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline JobStatus& operator=(JobStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JobStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobStatus* internal_default_instance() {
    return reinterpret_cast<const JobStatus*>(
               &_JobStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(JobStatus& a, JobStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(JobStatus* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JobStatus* New() const final {
    return CreateMaybeMessage<JobStatus>(nullptr);
  }

  JobStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JobStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JobStatus& from);
  void MergeFrom(const JobStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "JobStatus";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef JobStatus_Job_Status Job_Status;
  static constexpr Job_Status ACTIVE =
    JobStatus_Job_Status_ACTIVE;
  static constexpr Job_Status PAUSED =
    JobStatus_Job_Status_PAUSED;
  static constexpr Job_Status TERMINATED =
    JobStatus_Job_Status_TERMINATED;
  static constexpr Job_Status INVALID =
    JobStatus_Job_Status_INVALID;
  static inline bool Job_Status_IsValid(int value) {
    return JobStatus_Job_Status_IsValid(value);
  }
  static constexpr Job_Status Job_Status_MIN =
    JobStatus_Job_Status_Job_Status_MIN;
  static constexpr Job_Status Job_Status_MAX =
    JobStatus_Job_Status_Job_Status_MAX;
  static constexpr int Job_Status_ARRAYSIZE =
    JobStatus_Job_Status_Job_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Job_Status_descriptor() {
    return JobStatus_Job_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Job_Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Job_Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Job_Status_Name.");
    return JobStatus_Job_Status_Name(enum_t_value);
  }
  static inline bool Job_Status_Parse(const std::string& name,
      Job_Status* value) {
    return JobStatus_Job_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUtcTimestampMsFieldNumber = 2,
    kJobStatusFieldNumber = 1,
  };
  // uint64 utc_timestamp_ms = 2;
  void clear_utc_timestamp_ms();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_timestamp_ms() const;
  void set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc_timestamp_ms() const;
  void _internal_set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .JobStatus.Job_Status job_status = 1;
  void clear_job_status();
  ::JobStatus_Job_Status job_status() const;
  void set_job_status(::JobStatus_Job_Status value);
  private:
  ::JobStatus_Job_Status _internal_job_status() const;
  void _internal_set_job_status(::JobStatus_Job_Status value);
  public:

  // @@protoc_insertion_point(class_scope:JobStatus)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_timestamp_ms_;
  int job_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class GeoCoordinateArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GeoCoordinateArea) */ {
 public:
  GeoCoordinateArea();
  virtual ~GeoCoordinateArea();

  GeoCoordinateArea(const GeoCoordinateArea& from);
  GeoCoordinateArea(GeoCoordinateArea&& from) noexcept
    : GeoCoordinateArea() {
    *this = ::std::move(from);
  }

  inline GeoCoordinateArea& operator=(const GeoCoordinateArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoCoordinateArea& operator=(GeoCoordinateArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoCoordinateArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoCoordinateArea* internal_default_instance() {
    return reinterpret_cast<const GeoCoordinateArea*>(
               &_GeoCoordinateArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GeoCoordinateArea& a, GeoCoordinateArea& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoCoordinateArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoCoordinateArea* New() const final {
    return CreateMaybeMessage<GeoCoordinateArea>(nullptr);
  }

  GeoCoordinateArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoCoordinateArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoCoordinateArea& from);
  void MergeFrom(const GeoCoordinateArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoCoordinateArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GeoCoordinateArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // @@protoc_insertion_point(class_scope:GeoCoordinateArea)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_deg_;
  double longitude_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class GeoRectangleArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GeoRectangleArea) */ {
 public:
  GeoRectangleArea();
  virtual ~GeoRectangleArea();

  GeoRectangleArea(const GeoRectangleArea& from);
  GeoRectangleArea(GeoRectangleArea&& from) noexcept
    : GeoRectangleArea() {
    *this = ::std::move(from);
  }

  inline GeoRectangleArea& operator=(const GeoRectangleArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoRectangleArea& operator=(GeoRectangleArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoRectangleArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoRectangleArea* internal_default_instance() {
    return reinterpret_cast<const GeoRectangleArea*>(
               &_GeoRectangleArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GeoRectangleArea& a, GeoRectangleArea& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoRectangleArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoRectangleArea* New() const final {
    return CreateMaybeMessage<GeoRectangleArea>(nullptr);
  }

  GeoRectangleArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoRectangleArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoRectangleArea& from);
  void MergeFrom(const GeoRectangleArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoRectangleArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GeoRectangleArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopLeftFieldNumber = 1,
    kBottomRightFieldNumber = 2,
  };
  // .GeoCoordinateArea top_left = 1;
  bool has_top_left() const;
  private:
  bool _internal_has_top_left() const;
  public:
  void clear_top_left();
  const ::GeoCoordinateArea& top_left() const;
  ::GeoCoordinateArea* release_top_left();
  ::GeoCoordinateArea* mutable_top_left();
  void set_allocated_top_left(::GeoCoordinateArea* top_left);
  private:
  const ::GeoCoordinateArea& _internal_top_left() const;
  ::GeoCoordinateArea* _internal_mutable_top_left();
  public:

  // .GeoCoordinateArea bottom_right = 2;
  bool has_bottom_right() const;
  private:
  bool _internal_has_bottom_right() const;
  public:
  void clear_bottom_right();
  const ::GeoCoordinateArea& bottom_right() const;
  ::GeoCoordinateArea* release_bottom_right();
  ::GeoCoordinateArea* mutable_bottom_right();
  void set_allocated_bottom_right(::GeoCoordinateArea* bottom_right);
  private:
  const ::GeoCoordinateArea& _internal_bottom_right() const;
  ::GeoCoordinateArea* _internal_mutable_bottom_right();
  public:

  // @@protoc_insertion_point(class_scope:GeoRectangleArea)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::GeoCoordinateArea* top_left_;
  ::GeoCoordinateArea* bottom_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class GeoCircleArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GeoCircleArea) */ {
 public:
  GeoCircleArea();
  virtual ~GeoCircleArea();

  GeoCircleArea(const GeoCircleArea& from);
  GeoCircleArea(GeoCircleArea&& from) noexcept
    : GeoCircleArea() {
    *this = ::std::move(from);
  }

  inline GeoCircleArea& operator=(const GeoCircleArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoCircleArea& operator=(GeoCircleArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeoCircleArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeoCircleArea* internal_default_instance() {
    return reinterpret_cast<const GeoCircleArea*>(
               &_GeoCircleArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GeoCircleArea& a, GeoCircleArea& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoCircleArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeoCircleArea* New() const final {
    return CreateMaybeMessage<GeoCircleArea>(nullptr);
  }

  GeoCircleArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeoCircleArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeoCircleArea& from);
  void MergeFrom(const GeoCircleArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoCircleArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GeoCircleArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kRadiusMFieldNumber = 2,
  };
  // .GeoCoordinateArea center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::GeoCoordinateArea& center() const;
  ::GeoCoordinateArea* release_center();
  ::GeoCoordinateArea* mutable_center();
  void set_allocated_center(::GeoCoordinateArea* center);
  private:
  const ::GeoCoordinateArea& _internal_center() const;
  ::GeoCoordinateArea* _internal_mutable_center();
  public:

  // double radius_m = 2;
  void clear_radius_m();
  double radius_m() const;
  void set_radius_m(double value);
  private:
  double _internal_radius_m() const;
  void _internal_set_radius_m(double value);
  public:

  // @@protoc_insertion_point(class_scope:GeoCircleArea)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::GeoCoordinateArea* center_;
  double radius_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class CompositeLocationArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:CompositeLocationArea) */ {
 public:
  CompositeLocationArea();
  virtual ~CompositeLocationArea();

  CompositeLocationArea(const CompositeLocationArea& from);
  CompositeLocationArea(CompositeLocationArea&& from) noexcept
    : CompositeLocationArea() {
    *this = ::std::move(from);
  }

  inline CompositeLocationArea& operator=(const CompositeLocationArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompositeLocationArea& operator=(CompositeLocationArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompositeLocationArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompositeLocationArea* internal_default_instance() {
    return reinterpret_cast<const CompositeLocationArea*>(
               &_CompositeLocationArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CompositeLocationArea& a, CompositeLocationArea& b) {
    a.Swap(&b);
  }
  inline void Swap(CompositeLocationArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompositeLocationArea* New() const final {
    return CreateMaybeMessage<CompositeLocationArea>(nullptr);
  }

  CompositeLocationArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompositeLocationArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompositeLocationArea& from);
  void MergeFrom(const CompositeLocationArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompositeLocationArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "CompositeLocationArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeoCirclesFieldNumber = 1,
    kGeoRectanglesFieldNumber = 2,
  };
  // repeated .GeoCircleArea geo_circles = 1;
  int geo_circles_size() const;
  private:
  int _internal_geo_circles_size() const;
  public:
  void clear_geo_circles();
  ::GeoCircleArea* mutable_geo_circles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoCircleArea >*
      mutable_geo_circles();
  private:
  const ::GeoCircleArea& _internal_geo_circles(int index) const;
  ::GeoCircleArea* _internal_add_geo_circles();
  public:
  const ::GeoCircleArea& geo_circles(int index) const;
  ::GeoCircleArea* add_geo_circles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoCircleArea >&
      geo_circles() const;

  // repeated .GeoRectangleArea geo_rectangles = 2;
  int geo_rectangles_size() const;
  private:
  int _internal_geo_rectangles_size() const;
  public:
  void clear_geo_rectangles();
  ::GeoRectangleArea* mutable_geo_rectangles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoRectangleArea >*
      mutable_geo_rectangles();
  private:
  const ::GeoRectangleArea& _internal_geo_rectangles(int index) const;
  ::GeoRectangleArea* _internal_add_geo_rectangles();
  public:
  const ::GeoRectangleArea& geo_rectangles(int index) const;
  ::GeoRectangleArea* add_geo_rectangles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoRectangleArea >&
      geo_rectangles() const;

  // @@protoc_insertion_point(class_scope:CompositeLocationArea)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoCircleArea > geo_circles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoRectangleArea > geo_rectangles_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class GetStaticConfigMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetStaticConfigMessage) */ {
 public:
  GetStaticConfigMessage();
  virtual ~GetStaticConfigMessage();

  GetStaticConfigMessage(const GetStaticConfigMessage& from);
  GetStaticConfigMessage(GetStaticConfigMessage&& from) noexcept
    : GetStaticConfigMessage() {
    *this = ::std::move(from);
  }

  inline GetStaticConfigMessage& operator=(const GetStaticConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStaticConfigMessage& operator=(GetStaticConfigMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetStaticConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetStaticConfigMessage* internal_default_instance() {
    return reinterpret_cast<const GetStaticConfigMessage*>(
               &_GetStaticConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetStaticConfigMessage& a, GetStaticConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStaticConfigMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStaticConfigMessage* New() const final {
    return CreateMaybeMessage<GetStaticConfigMessage>(nullptr);
  }

  GetStaticConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStaticConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStaticConfigMessage& from);
  void MergeFrom(const GetStaticConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStaticConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetStaticConfigMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedSourceVersionFieldNumber = 4,
    kUdcVersionFieldNumber = 1,
    kSupportedJobFormatVersionFieldNumber = 2,
    kSupportedUploadFormatVersionFieldNumber = 3,
  };
  // repeated .SupportedSourceVersion supported_source_version = 4;
  int supported_source_version_size() const;
  private:
  int _internal_supported_source_version_size() const;
  public:
  void clear_supported_source_version();
  ::SupportedSourceVersion* mutable_supported_source_version(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SupportedSourceVersion >*
      mutable_supported_source_version();
  private:
  const ::SupportedSourceVersion& _internal_supported_source_version(int index) const;
  ::SupportedSourceVersion* _internal_add_supported_source_version();
  public:
  const ::SupportedSourceVersion& supported_source_version(int index) const;
  ::SupportedSourceVersion* add_supported_source_version();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SupportedSourceVersion >&
      supported_source_version() const;

  // string udc_version = 1;
  void clear_udc_version();
  const std::string& udc_version() const;
  void set_udc_version(const std::string& value);
  void set_udc_version(std::string&& value);
  void set_udc_version(const char* value);
  void set_udc_version(const char* value, size_t size);
  std::string* mutable_udc_version();
  std::string* release_udc_version();
  void set_allocated_udc_version(std::string* udc_version);
  private:
  const std::string& _internal_udc_version() const;
  void _internal_set_udc_version(const std::string& value);
  std::string* _internal_mutable_udc_version();
  public:

  // string supported_job_format_version = 2;
  void clear_supported_job_format_version();
  const std::string& supported_job_format_version() const;
  void set_supported_job_format_version(const std::string& value);
  void set_supported_job_format_version(std::string&& value);
  void set_supported_job_format_version(const char* value);
  void set_supported_job_format_version(const char* value, size_t size);
  std::string* mutable_supported_job_format_version();
  std::string* release_supported_job_format_version();
  void set_allocated_supported_job_format_version(std::string* supported_job_format_version);
  private:
  const std::string& _internal_supported_job_format_version() const;
  void _internal_set_supported_job_format_version(const std::string& value);
  std::string* _internal_mutable_supported_job_format_version();
  public:

  // string supported_upload_format_version = 3;
  void clear_supported_upload_format_version();
  const std::string& supported_upload_format_version() const;
  void set_supported_upload_format_version(const std::string& value);
  void set_supported_upload_format_version(std::string&& value);
  void set_supported_upload_format_version(const char* value);
  void set_supported_upload_format_version(const char* value, size_t size);
  std::string* mutable_supported_upload_format_version();
  std::string* release_supported_upload_format_version();
  void set_allocated_supported_upload_format_version(std::string* supported_upload_format_version);
  private:
  const std::string& _internal_supported_upload_format_version() const;
  void _internal_set_supported_upload_format_version(const std::string& value);
  std::string* _internal_mutable_supported_upload_format_version();
  public:

  // @@protoc_insertion_point(class_scope:GetStaticConfigMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SupportedSourceVersion > supported_source_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr udc_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supported_job_format_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supported_upload_format_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class GetDataCollectionJobsMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDataCollectionJobsMessage) */ {
 public:
  GetDataCollectionJobsMessage();
  virtual ~GetDataCollectionJobsMessage();

  GetDataCollectionJobsMessage(const GetDataCollectionJobsMessage& from);
  GetDataCollectionJobsMessage(GetDataCollectionJobsMessage&& from) noexcept
    : GetDataCollectionJobsMessage() {
    *this = ::std::move(from);
  }

  inline GetDataCollectionJobsMessage& operator=(const GetDataCollectionJobsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataCollectionJobsMessage& operator=(GetDataCollectionJobsMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDataCollectionJobsMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDataCollectionJobsMessage* internal_default_instance() {
    return reinterpret_cast<const GetDataCollectionJobsMessage*>(
               &_GetDataCollectionJobsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetDataCollectionJobsMessage& a, GetDataCollectionJobsMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDataCollectionJobsMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDataCollectionJobsMessage* New() const final {
    return CreateMaybeMessage<GetDataCollectionJobsMessage>(nullptr);
  }

  GetDataCollectionJobsMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDataCollectionJobsMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDataCollectionJobsMessage& from);
  void MergeFrom(const GetDataCollectionJobsMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDataCollectionJobsMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDataCollectionJobsMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxSupportedJobsFieldNumber = 1,
  };
  // int32 max_supported_jobs = 1;
  void clear_max_supported_jobs();
  ::PROTOBUF_NAMESPACE_ID::int32 max_supported_jobs() const;
  void set_max_supported_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_max_supported_jobs() const;
  void _internal_set_max_supported_jobs(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetDataCollectionJobsMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 max_supported_jobs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class DataCollectionJobsListMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataCollectionJobsListMessage) */ {
 public:
  DataCollectionJobsListMessage();
  virtual ~DataCollectionJobsListMessage();

  DataCollectionJobsListMessage(const DataCollectionJobsListMessage& from);
  DataCollectionJobsListMessage(DataCollectionJobsListMessage&& from) noexcept
    : DataCollectionJobsListMessage() {
    *this = ::std::move(from);
  }

  inline DataCollectionJobsListMessage& operator=(const DataCollectionJobsListMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataCollectionJobsListMessage& operator=(DataCollectionJobsListMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataCollectionJobsListMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataCollectionJobsListMessage* internal_default_instance() {
    return reinterpret_cast<const DataCollectionJobsListMessage*>(
               &_DataCollectionJobsListMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(DataCollectionJobsListMessage& a, DataCollectionJobsListMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DataCollectionJobsListMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataCollectionJobsListMessage* New() const final {
    return CreateMaybeMessage<DataCollectionJobsListMessage>(nullptr);
  }

  DataCollectionJobsListMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataCollectionJobsListMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataCollectionJobsListMessage& from);
  void MergeFrom(const DataCollectionJobsListMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataCollectionJobsListMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataCollectionJobsListMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewJobsFieldNumber = 1,
    kJobIdsToTerminateFieldNumber = 2,
  };
  // repeated .data_collection_configuration_request.DataCollectionJob new_jobs = 1;
  int new_jobs_size() const;
  private:
  int _internal_new_jobs_size() const;
  public:
  void clear_new_jobs();
  ::data_collection_configuration_request::DataCollectionJob* mutable_new_jobs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_collection_configuration_request::DataCollectionJob >*
      mutable_new_jobs();
  private:
  const ::data_collection_configuration_request::DataCollectionJob& _internal_new_jobs(int index) const;
  ::data_collection_configuration_request::DataCollectionJob* _internal_add_new_jobs();
  public:
  const ::data_collection_configuration_request::DataCollectionJob& new_jobs(int index) const;
  ::data_collection_configuration_request::DataCollectionJob* add_new_jobs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_collection_configuration_request::DataCollectionJob >&
      new_jobs() const;

  // repeated string job_ids_to_terminate = 2;
  int job_ids_to_terminate_size() const;
  private:
  int _internal_job_ids_to_terminate_size() const;
  public:
  void clear_job_ids_to_terminate();
  const std::string& job_ids_to_terminate(int index) const;
  std::string* mutable_job_ids_to_terminate(int index);
  void set_job_ids_to_terminate(int index, const std::string& value);
  void set_job_ids_to_terminate(int index, std::string&& value);
  void set_job_ids_to_terminate(int index, const char* value);
  void set_job_ids_to_terminate(int index, const char* value, size_t size);
  std::string* add_job_ids_to_terminate();
  void add_job_ids_to_terminate(const std::string& value);
  void add_job_ids_to_terminate(std::string&& value);
  void add_job_ids_to_terminate(const char* value);
  void add_job_ids_to_terminate(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& job_ids_to_terminate() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_job_ids_to_terminate();
  private:
  const std::string& _internal_job_ids_to_terminate(int index) const;
  std::string* _internal_add_job_ids_to_terminate();
  public:

  // @@protoc_insertion_point(class_scope:DataCollectionJobsListMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_collection_configuration_request::DataCollectionJob > new_jobs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> job_ids_to_terminate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class StaticConfigMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StaticConfigMessage) */ {
 public:
  StaticConfigMessage();
  virtual ~StaticConfigMessage();

  StaticConfigMessage(const StaticConfigMessage& from);
  StaticConfigMessage(StaticConfigMessage&& from) noexcept
    : StaticConfigMessage() {
    *this = ::std::move(from);
  }

  inline StaticConfigMessage& operator=(const StaticConfigMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticConfigMessage& operator=(StaticConfigMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StaticConfigMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StaticConfigMessage* internal_default_instance() {
    return reinterpret_cast<const StaticConfigMessage*>(
               &_StaticConfigMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(StaticConfigMessage& a, StaticConfigMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticConfigMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StaticConfigMessage* New() const final {
    return CreateMaybeMessage<StaticConfigMessage>(nullptr);
  }

  StaticConfigMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StaticConfigMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StaticConfigMessage& from);
  void MergeFrom(const StaticConfigMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticConfigMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StaticConfigMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:StaticConfigMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// -------------------------------------------------------------------

class SupportedSourceVersion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SupportedSourceVersion) */ {
 public:
  SupportedSourceVersion();
  virtual ~SupportedSourceVersion();

  SupportedSourceVersion(const SupportedSourceVersion& from);
  SupportedSourceVersion(SupportedSourceVersion&& from) noexcept
    : SupportedSourceVersion() {
    *this = ::std::move(from);
  }

  inline SupportedSourceVersion& operator=(const SupportedSourceVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupportedSourceVersion& operator=(SupportedSourceVersion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SupportedSourceVersion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SupportedSourceVersion* internal_default_instance() {
    return reinterpret_cast<const SupportedSourceVersion*>(
               &_SupportedSourceVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SupportedSourceVersion& a, SupportedSourceVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(SupportedSourceVersion* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SupportedSourceVersion* New() const final {
    return CreateMaybeMessage<SupportedSourceVersion>(nullptr);
  }

  SupportedSourceVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SupportedSourceVersion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SupportedSourceVersion& from);
  void MergeFrom(const SupportedSourceVersion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SupportedSourceVersion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SupportedSourceVersion";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_backend_5fmessage_5fformat_2eproto);
    return ::descriptor_table_backend_5fmessage_5fformat_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcuFieldNumber = 2,
    kVersionFieldNumber = 3,
    kSourceTypeFieldNumber = 1,
  };
  // string ecu = 2;
  void clear_ecu();
  const std::string& ecu() const;
  void set_ecu(const std::string& value);
  void set_ecu(std::string&& value);
  void set_ecu(const char* value);
  void set_ecu(const char* value, size_t size);
  std::string* mutable_ecu();
  std::string* release_ecu();
  void set_allocated_ecu(std::string* ecu);
  private:
  const std::string& _internal_ecu() const;
  void _internal_set_ecu(const std::string& value);
  std::string* _internal_mutable_ecu();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .Source_Type source_type = 1;
  void clear_source_type();
  ::Source_Type source_type() const;
  void set_source_type(::Source_Type value);
  private:
  ::Source_Type _internal_source_type() const;
  void _internal_set_source_type(::Source_Type value);
  public:

  // @@protoc_insertion_point(class_scope:SupportedSourceVersion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ecu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  int source_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_backend_5fmessage_5fformat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// int32 protocol_version_major = 1;
inline void MessageHeader::clear_protocol_version_major() {
  protocol_version_major_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageHeader::_internal_protocol_version_major() const {
  return protocol_version_major_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageHeader::protocol_version_major() const {
  // @@protoc_insertion_point(field_get:MessageHeader.protocol_version_major)
  return _internal_protocol_version_major();
}
inline void MessageHeader::_internal_set_protocol_version_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protocol_version_major_ = value;
}
inline void MessageHeader::set_protocol_version_major(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protocol_version_major(value);
  // @@protoc_insertion_point(field_set:MessageHeader.protocol_version_major)
}

// int32 protocol_version_minor = 2;
inline void MessageHeader::clear_protocol_version_minor() {
  protocol_version_minor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageHeader::_internal_protocol_version_minor() const {
  return protocol_version_minor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageHeader::protocol_version_minor() const {
  // @@protoc_insertion_point(field_get:MessageHeader.protocol_version_minor)
  return _internal_protocol_version_minor();
}
inline void MessageHeader::_internal_set_protocol_version_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  protocol_version_minor_ = value;
}
inline void MessageHeader::set_protocol_version_minor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_protocol_version_minor(value);
  // @@protoc_insertion_point(field_set:MessageHeader.protocol_version_minor)
}

// .MessageHeader.Message_Type message_type = 3;
inline void MessageHeader::clear_message_type() {
  message_type_ = 0;
}
inline ::MessageHeader_Message_Type MessageHeader::_internal_message_type() const {
  return static_cast< ::MessageHeader_Message_Type >(message_type_);
}
inline ::MessageHeader_Message_Type MessageHeader::message_type() const {
  // @@protoc_insertion_point(field_get:MessageHeader.message_type)
  return _internal_message_type();
}
inline void MessageHeader::_internal_set_message_type(::MessageHeader_Message_Type value) {
  
  message_type_ = value;
}
inline void MessageHeader::set_message_type(::MessageHeader_Message_Type value) {
  _internal_set_message_type(value);
  // @@protoc_insertion_point(field_set:MessageHeader.message_type)
}

// uint32 payload_size_byte = 4;
inline void MessageHeader::clear_payload_size_byte() {
  payload_size_byte_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::_internal_payload_size_byte() const {
  return payload_size_byte_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageHeader::payload_size_byte() const {
  // @@protoc_insertion_point(field_get:MessageHeader.payload_size_byte)
  return _internal_payload_size_byte();
}
inline void MessageHeader::_internal_set_payload_size_byte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  payload_size_byte_ = value;
}
inline void MessageHeader::set_payload_size_byte(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_payload_size_byte(value);
  // @@protoc_insertion_point(field_set:MessageHeader.payload_size_byte)
}

// .MessageHeader.Compression_Type transmission_compression = 5;
inline void MessageHeader::clear_transmission_compression() {
  transmission_compression_ = 0;
}
inline ::MessageHeader_Compression_Type MessageHeader::_internal_transmission_compression() const {
  return static_cast< ::MessageHeader_Compression_Type >(transmission_compression_);
}
inline ::MessageHeader_Compression_Type MessageHeader::transmission_compression() const {
  // @@protoc_insertion_point(field_get:MessageHeader.transmission_compression)
  return _internal_transmission_compression();
}
inline void MessageHeader::_internal_set_transmission_compression(::MessageHeader_Compression_Type value) {
  
  transmission_compression_ = value;
}
inline void MessageHeader::set_transmission_compression(::MessageHeader_Compression_Type value) {
  _internal_set_transmission_compression(value);
  // @@protoc_insertion_point(field_set:MessageHeader.transmission_compression)
}

// int32 sequence_nb = 6;
inline void MessageHeader::clear_sequence_nb() {
  sequence_nb_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageHeader::_internal_sequence_nb() const {
  return sequence_nb_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MessageHeader::sequence_nb() const {
  // @@protoc_insertion_point(field_get:MessageHeader.sequence_nb)
  return _internal_sequence_nb();
}
inline void MessageHeader::_internal_set_sequence_nb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_nb_ = value;
}
inline void MessageHeader::set_sequence_nb(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_nb(value);
  // @@protoc_insertion_point(field_set:MessageHeader.sequence_nb)
}

// .MessageHeader.Ecu_Type ecu = 7;
inline void MessageHeader::clear_ecu() {
  ecu_ = 0;
}
inline ::MessageHeader_Ecu_Type MessageHeader::_internal_ecu() const {
  return static_cast< ::MessageHeader_Ecu_Type >(ecu_);
}
inline ::MessageHeader_Ecu_Type MessageHeader::ecu() const {
  // @@protoc_insertion_point(field_get:MessageHeader.ecu)
  return _internal_ecu();
}
inline void MessageHeader::_internal_set_ecu(::MessageHeader_Ecu_Type value) {
  
  ecu_ = value;
}
inline void MessageHeader::set_ecu(::MessageHeader_Ecu_Type value) {
  _internal_set_ecu(value);
  // @@protoc_insertion_point(field_set:MessageHeader.ecu)
}

// -------------------------------------------------------------------

// MessageBody

// .JobStatusMessage job_status = 1;
inline bool MessageBody::_internal_has_job_status() const {
  return message_body_case() == kJobStatus;
}
inline bool MessageBody::has_job_status() const {
  return _internal_has_job_status();
}
inline void MessageBody::set_has_job_status() {
  _oneof_case_[0] = kJobStatus;
}
inline void MessageBody::clear_job_status() {
  if (_internal_has_job_status()) {
    delete message_body_.job_status_;
    clear_has_message_body();
  }
}
inline ::JobStatusMessage* MessageBody::release_job_status() {
  // @@protoc_insertion_point(field_release:MessageBody.job_status)
  if (_internal_has_job_status()) {
    clear_has_message_body();
      ::JobStatusMessage* temp = message_body_.job_status_;
    message_body_.job_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JobStatusMessage& MessageBody::_internal_job_status() const {
  return _internal_has_job_status()
      ? *message_body_.job_status_
      : *reinterpret_cast< ::JobStatusMessage*>(&::_JobStatusMessage_default_instance_);
}
inline const ::JobStatusMessage& MessageBody::job_status() const {
  // @@protoc_insertion_point(field_get:MessageBody.job_status)
  return _internal_job_status();
}
inline ::JobStatusMessage* MessageBody::_internal_mutable_job_status() {
  if (!_internal_has_job_status()) {
    clear_message_body();
    set_has_job_status();
    message_body_.job_status_ = CreateMaybeMessage< ::JobStatusMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.job_status_;
}
inline ::JobStatusMessage* MessageBody::mutable_job_status() {
  // @@protoc_insertion_point(field_mutable:MessageBody.job_status)
  return _internal_mutable_job_status();
}

// .JobStatusRequestMessage job_status_request = 2;
inline bool MessageBody::_internal_has_job_status_request() const {
  return message_body_case() == kJobStatusRequest;
}
inline bool MessageBody::has_job_status_request() const {
  return _internal_has_job_status_request();
}
inline void MessageBody::set_has_job_status_request() {
  _oneof_case_[0] = kJobStatusRequest;
}
inline void MessageBody::clear_job_status_request() {
  if (_internal_has_job_status_request()) {
    delete message_body_.job_status_request_;
    clear_has_message_body();
  }
}
inline ::JobStatusRequestMessage* MessageBody::release_job_status_request() {
  // @@protoc_insertion_point(field_release:MessageBody.job_status_request)
  if (_internal_has_job_status_request()) {
    clear_has_message_body();
      ::JobStatusRequestMessage* temp = message_body_.job_status_request_;
    message_body_.job_status_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::JobStatusRequestMessage& MessageBody::_internal_job_status_request() const {
  return _internal_has_job_status_request()
      ? *message_body_.job_status_request_
      : *reinterpret_cast< ::JobStatusRequestMessage*>(&::_JobStatusRequestMessage_default_instance_);
}
inline const ::JobStatusRequestMessage& MessageBody::job_status_request() const {
  // @@protoc_insertion_point(field_get:MessageBody.job_status_request)
  return _internal_job_status_request();
}
inline ::JobStatusRequestMessage* MessageBody::_internal_mutable_job_status_request() {
  if (!_internal_has_job_status_request()) {
    clear_message_body();
    set_has_job_status_request();
    message_body_.job_status_request_ = CreateMaybeMessage< ::JobStatusRequestMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.job_status_request_;
}
inline ::JobStatusRequestMessage* MessageBody::mutable_job_status_request() {
  // @@protoc_insertion_point(field_mutable:MessageBody.job_status_request)
  return _internal_mutable_job_status_request();
}

// .InitiateGeohashStreamMessage initiate_geohash_stream = 3;
inline bool MessageBody::_internal_has_initiate_geohash_stream() const {
  return message_body_case() == kInitiateGeohashStream;
}
inline bool MessageBody::has_initiate_geohash_stream() const {
  return _internal_has_initiate_geohash_stream();
}
inline void MessageBody::set_has_initiate_geohash_stream() {
  _oneof_case_[0] = kInitiateGeohashStream;
}
inline void MessageBody::clear_initiate_geohash_stream() {
  if (_internal_has_initiate_geohash_stream()) {
    delete message_body_.initiate_geohash_stream_;
    clear_has_message_body();
  }
}
inline ::InitiateGeohashStreamMessage* MessageBody::release_initiate_geohash_stream() {
  // @@protoc_insertion_point(field_release:MessageBody.initiate_geohash_stream)
  if (_internal_has_initiate_geohash_stream()) {
    clear_has_message_body();
      ::InitiateGeohashStreamMessage* temp = message_body_.initiate_geohash_stream_;
    message_body_.initiate_geohash_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::InitiateGeohashStreamMessage& MessageBody::_internal_initiate_geohash_stream() const {
  return _internal_has_initiate_geohash_stream()
      ? *message_body_.initiate_geohash_stream_
      : *reinterpret_cast< ::InitiateGeohashStreamMessage*>(&::_InitiateGeohashStreamMessage_default_instance_);
}
inline const ::InitiateGeohashStreamMessage& MessageBody::initiate_geohash_stream() const {
  // @@protoc_insertion_point(field_get:MessageBody.initiate_geohash_stream)
  return _internal_initiate_geohash_stream();
}
inline ::InitiateGeohashStreamMessage* MessageBody::_internal_mutable_initiate_geohash_stream() {
  if (!_internal_has_initiate_geohash_stream()) {
    clear_message_body();
    set_has_initiate_geohash_stream();
    message_body_.initiate_geohash_stream_ = CreateMaybeMessage< ::InitiateGeohashStreamMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.initiate_geohash_stream_;
}
inline ::InitiateGeohashStreamMessage* MessageBody::mutable_initiate_geohash_stream() {
  // @@protoc_insertion_point(field_mutable:MessageBody.initiate_geohash_stream)
  return _internal_mutable_initiate_geohash_stream();
}

// .GeoHashMessage geo_hash = 4;
inline bool MessageBody::_internal_has_geo_hash() const {
  return message_body_case() == kGeoHash;
}
inline bool MessageBody::has_geo_hash() const {
  return _internal_has_geo_hash();
}
inline void MessageBody::set_has_geo_hash() {
  _oneof_case_[0] = kGeoHash;
}
inline void MessageBody::clear_geo_hash() {
  if (_internal_has_geo_hash()) {
    delete message_body_.geo_hash_;
    clear_has_message_body();
  }
}
inline ::GeoHashMessage* MessageBody::release_geo_hash() {
  // @@protoc_insertion_point(field_release:MessageBody.geo_hash)
  if (_internal_has_geo_hash()) {
    clear_has_message_body();
      ::GeoHashMessage* temp = message_body_.geo_hash_;
    message_body_.geo_hash_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GeoHashMessage& MessageBody::_internal_geo_hash() const {
  return _internal_has_geo_hash()
      ? *message_body_.geo_hash_
      : *reinterpret_cast< ::GeoHashMessage*>(&::_GeoHashMessage_default_instance_);
}
inline const ::GeoHashMessage& MessageBody::geo_hash() const {
  // @@protoc_insertion_point(field_get:MessageBody.geo_hash)
  return _internal_geo_hash();
}
inline ::GeoHashMessage* MessageBody::_internal_mutable_geo_hash() {
  if (!_internal_has_geo_hash()) {
    clear_message_body();
    set_has_geo_hash();
    message_body_.geo_hash_ = CreateMaybeMessage< ::GeoHashMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.geo_hash_;
}
inline ::GeoHashMessage* MessageBody::mutable_geo_hash() {
  // @@protoc_insertion_point(field_mutable:MessageBody.geo_hash)
  return _internal_mutable_geo_hash();
}

// .DataCollectionJobsListMessage data_collection_jobs_list = 5;
inline bool MessageBody::_internal_has_data_collection_jobs_list() const {
  return message_body_case() == kDataCollectionJobsList;
}
inline bool MessageBody::has_data_collection_jobs_list() const {
  return _internal_has_data_collection_jobs_list();
}
inline void MessageBody::set_has_data_collection_jobs_list() {
  _oneof_case_[0] = kDataCollectionJobsList;
}
inline void MessageBody::clear_data_collection_jobs_list() {
  if (_internal_has_data_collection_jobs_list()) {
    delete message_body_.data_collection_jobs_list_;
    clear_has_message_body();
  }
}
inline ::DataCollectionJobsListMessage* MessageBody::release_data_collection_jobs_list() {
  // @@protoc_insertion_point(field_release:MessageBody.data_collection_jobs_list)
  if (_internal_has_data_collection_jobs_list()) {
    clear_has_message_body();
      ::DataCollectionJobsListMessage* temp = message_body_.data_collection_jobs_list_;
    message_body_.data_collection_jobs_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::DataCollectionJobsListMessage& MessageBody::_internal_data_collection_jobs_list() const {
  return _internal_has_data_collection_jobs_list()
      ? *message_body_.data_collection_jobs_list_
      : *reinterpret_cast< ::DataCollectionJobsListMessage*>(&::_DataCollectionJobsListMessage_default_instance_);
}
inline const ::DataCollectionJobsListMessage& MessageBody::data_collection_jobs_list() const {
  // @@protoc_insertion_point(field_get:MessageBody.data_collection_jobs_list)
  return _internal_data_collection_jobs_list();
}
inline ::DataCollectionJobsListMessage* MessageBody::_internal_mutable_data_collection_jobs_list() {
  if (!_internal_has_data_collection_jobs_list()) {
    clear_message_body();
    set_has_data_collection_jobs_list();
    message_body_.data_collection_jobs_list_ = CreateMaybeMessage< ::DataCollectionJobsListMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.data_collection_jobs_list_;
}
inline ::DataCollectionJobsListMessage* MessageBody::mutable_data_collection_jobs_list() {
  // @@protoc_insertion_point(field_mutable:MessageBody.data_collection_jobs_list)
  return _internal_mutable_data_collection_jobs_list();
}

// .AckMessage jobstatus_ack = 6;
inline bool MessageBody::_internal_has_jobstatus_ack() const {
  return message_body_case() == kJobstatusAck;
}
inline bool MessageBody::has_jobstatus_ack() const {
  return _internal_has_jobstatus_ack();
}
inline void MessageBody::set_has_jobstatus_ack() {
  _oneof_case_[0] = kJobstatusAck;
}
inline void MessageBody::clear_jobstatus_ack() {
  if (_internal_has_jobstatus_ack()) {
    delete message_body_.jobstatus_ack_;
    clear_has_message_body();
  }
}
inline ::AckMessage* MessageBody::release_jobstatus_ack() {
  // @@protoc_insertion_point(field_release:MessageBody.jobstatus_ack)
  if (_internal_has_jobstatus_ack()) {
    clear_has_message_body();
      ::AckMessage* temp = message_body_.jobstatus_ack_;
    message_body_.jobstatus_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AckMessage& MessageBody::_internal_jobstatus_ack() const {
  return _internal_has_jobstatus_ack()
      ? *message_body_.jobstatus_ack_
      : *reinterpret_cast< ::AckMessage*>(&::_AckMessage_default_instance_);
}
inline const ::AckMessage& MessageBody::jobstatus_ack() const {
  // @@protoc_insertion_point(field_get:MessageBody.jobstatus_ack)
  return _internal_jobstatus_ack();
}
inline ::AckMessage* MessageBody::_internal_mutable_jobstatus_ack() {
  if (!_internal_has_jobstatus_ack()) {
    clear_message_body();
    set_has_jobstatus_ack();
    message_body_.jobstatus_ack_ = CreateMaybeMessage< ::AckMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.jobstatus_ack_;
}
inline ::AckMessage* MessageBody::mutable_jobstatus_ack() {
  // @@protoc_insertion_point(field_mutable:MessageBody.jobstatus_ack)
  return _internal_mutable_jobstatus_ack();
}

// .AckMessage job_status_request_ack = 7;
inline bool MessageBody::_internal_has_job_status_request_ack() const {
  return message_body_case() == kJobStatusRequestAck;
}
inline bool MessageBody::has_job_status_request_ack() const {
  return _internal_has_job_status_request_ack();
}
inline void MessageBody::set_has_job_status_request_ack() {
  _oneof_case_[0] = kJobStatusRequestAck;
}
inline void MessageBody::clear_job_status_request_ack() {
  if (_internal_has_job_status_request_ack()) {
    delete message_body_.job_status_request_ack_;
    clear_has_message_body();
  }
}
inline ::AckMessage* MessageBody::release_job_status_request_ack() {
  // @@protoc_insertion_point(field_release:MessageBody.job_status_request_ack)
  if (_internal_has_job_status_request_ack()) {
    clear_has_message_body();
      ::AckMessage* temp = message_body_.job_status_request_ack_;
    message_body_.job_status_request_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AckMessage& MessageBody::_internal_job_status_request_ack() const {
  return _internal_has_job_status_request_ack()
      ? *message_body_.job_status_request_ack_
      : *reinterpret_cast< ::AckMessage*>(&::_AckMessage_default_instance_);
}
inline const ::AckMessage& MessageBody::job_status_request_ack() const {
  // @@protoc_insertion_point(field_get:MessageBody.job_status_request_ack)
  return _internal_job_status_request_ack();
}
inline ::AckMessage* MessageBody::_internal_mutable_job_status_request_ack() {
  if (!_internal_has_job_status_request_ack()) {
    clear_message_body();
    set_has_job_status_request_ack();
    message_body_.job_status_request_ack_ = CreateMaybeMessage< ::AckMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.job_status_request_ack_;
}
inline ::AckMessage* MessageBody::mutable_job_status_request_ack() {
  // @@protoc_insertion_point(field_mutable:MessageBody.job_status_request_ack)
  return _internal_mutable_job_status_request_ack();
}

// .AckMessage initiate_geohash_ack = 8;
inline bool MessageBody::_internal_has_initiate_geohash_ack() const {
  return message_body_case() == kInitiateGeohashAck;
}
inline bool MessageBody::has_initiate_geohash_ack() const {
  return _internal_has_initiate_geohash_ack();
}
inline void MessageBody::set_has_initiate_geohash_ack() {
  _oneof_case_[0] = kInitiateGeohashAck;
}
inline void MessageBody::clear_initiate_geohash_ack() {
  if (_internal_has_initiate_geohash_ack()) {
    delete message_body_.initiate_geohash_ack_;
    clear_has_message_body();
  }
}
inline ::AckMessage* MessageBody::release_initiate_geohash_ack() {
  // @@protoc_insertion_point(field_release:MessageBody.initiate_geohash_ack)
  if (_internal_has_initiate_geohash_ack()) {
    clear_has_message_body();
      ::AckMessage* temp = message_body_.initiate_geohash_ack_;
    message_body_.initiate_geohash_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AckMessage& MessageBody::_internal_initiate_geohash_ack() const {
  return _internal_has_initiate_geohash_ack()
      ? *message_body_.initiate_geohash_ack_
      : *reinterpret_cast< ::AckMessage*>(&::_AckMessage_default_instance_);
}
inline const ::AckMessage& MessageBody::initiate_geohash_ack() const {
  // @@protoc_insertion_point(field_get:MessageBody.initiate_geohash_ack)
  return _internal_initiate_geohash_ack();
}
inline ::AckMessage* MessageBody::_internal_mutable_initiate_geohash_ack() {
  if (!_internal_has_initiate_geohash_ack()) {
    clear_message_body();
    set_has_initiate_geohash_ack();
    message_body_.initiate_geohash_ack_ = CreateMaybeMessage< ::AckMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.initiate_geohash_ack_;
}
inline ::AckMessage* MessageBody::mutable_initiate_geohash_ack() {
  // @@protoc_insertion_point(field_mutable:MessageBody.initiate_geohash_ack)
  return _internal_mutable_initiate_geohash_ack();
}

// .AckMessage geohash_stream_ack = 9;
inline bool MessageBody::_internal_has_geohash_stream_ack() const {
  return message_body_case() == kGeohashStreamAck;
}
inline bool MessageBody::has_geohash_stream_ack() const {
  return _internal_has_geohash_stream_ack();
}
inline void MessageBody::set_has_geohash_stream_ack() {
  _oneof_case_[0] = kGeohashStreamAck;
}
inline void MessageBody::clear_geohash_stream_ack() {
  if (_internal_has_geohash_stream_ack()) {
    delete message_body_.geohash_stream_ack_;
    clear_has_message_body();
  }
}
inline ::AckMessage* MessageBody::release_geohash_stream_ack() {
  // @@protoc_insertion_point(field_release:MessageBody.geohash_stream_ack)
  if (_internal_has_geohash_stream_ack()) {
    clear_has_message_body();
      ::AckMessage* temp = message_body_.geohash_stream_ack_;
    message_body_.geohash_stream_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AckMessage& MessageBody::_internal_geohash_stream_ack() const {
  return _internal_has_geohash_stream_ack()
      ? *message_body_.geohash_stream_ack_
      : *reinterpret_cast< ::AckMessage*>(&::_AckMessage_default_instance_);
}
inline const ::AckMessage& MessageBody::geohash_stream_ack() const {
  // @@protoc_insertion_point(field_get:MessageBody.geohash_stream_ack)
  return _internal_geohash_stream_ack();
}
inline ::AckMessage* MessageBody::_internal_mutable_geohash_stream_ack() {
  if (!_internal_has_geohash_stream_ack()) {
    clear_message_body();
    set_has_geohash_stream_ack();
    message_body_.geohash_stream_ack_ = CreateMaybeMessage< ::AckMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.geohash_stream_ack_;
}
inline ::AckMessage* MessageBody::mutable_geohash_stream_ack() {
  // @@protoc_insertion_point(field_mutable:MessageBody.geohash_stream_ack)
  return _internal_mutable_geohash_stream_ack();
}

// .AckMessage datacollection_job_ack = 10;
inline bool MessageBody::_internal_has_datacollection_job_ack() const {
  return message_body_case() == kDatacollectionJobAck;
}
inline bool MessageBody::has_datacollection_job_ack() const {
  return _internal_has_datacollection_job_ack();
}
inline void MessageBody::set_has_datacollection_job_ack() {
  _oneof_case_[0] = kDatacollectionJobAck;
}
inline void MessageBody::clear_datacollection_job_ack() {
  if (_internal_has_datacollection_job_ack()) {
    delete message_body_.datacollection_job_ack_;
    clear_has_message_body();
  }
}
inline ::AckMessage* MessageBody::release_datacollection_job_ack() {
  // @@protoc_insertion_point(field_release:MessageBody.datacollection_job_ack)
  if (_internal_has_datacollection_job_ack()) {
    clear_has_message_body();
      ::AckMessage* temp = message_body_.datacollection_job_ack_;
    message_body_.datacollection_job_ack_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::AckMessage& MessageBody::_internal_datacollection_job_ack() const {
  return _internal_has_datacollection_job_ack()
      ? *message_body_.datacollection_job_ack_
      : *reinterpret_cast< ::AckMessage*>(&::_AckMessage_default_instance_);
}
inline const ::AckMessage& MessageBody::datacollection_job_ack() const {
  // @@protoc_insertion_point(field_get:MessageBody.datacollection_job_ack)
  return _internal_datacollection_job_ack();
}
inline ::AckMessage* MessageBody::_internal_mutable_datacollection_job_ack() {
  if (!_internal_has_datacollection_job_ack()) {
    clear_message_body();
    set_has_datacollection_job_ack();
    message_body_.datacollection_job_ack_ = CreateMaybeMessage< ::AckMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.datacollection_job_ack_;
}
inline ::AckMessage* MessageBody::mutable_datacollection_job_ack() {
  // @@protoc_insertion_point(field_mutable:MessageBody.datacollection_job_ack)
  return _internal_mutable_datacollection_job_ack();
}

// .GetStaticConfigMessage get_static_config = 11;
inline bool MessageBody::_internal_has_get_static_config() const {
  return message_body_case() == kGetStaticConfig;
}
inline bool MessageBody::has_get_static_config() const {
  return _internal_has_get_static_config();
}
inline void MessageBody::set_has_get_static_config() {
  _oneof_case_[0] = kGetStaticConfig;
}
inline void MessageBody::clear_get_static_config() {
  if (_internal_has_get_static_config()) {
    delete message_body_.get_static_config_;
    clear_has_message_body();
  }
}
inline ::GetStaticConfigMessage* MessageBody::release_get_static_config() {
  // @@protoc_insertion_point(field_release:MessageBody.get_static_config)
  if (_internal_has_get_static_config()) {
    clear_has_message_body();
      ::GetStaticConfigMessage* temp = message_body_.get_static_config_;
    message_body_.get_static_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GetStaticConfigMessage& MessageBody::_internal_get_static_config() const {
  return _internal_has_get_static_config()
      ? *message_body_.get_static_config_
      : *reinterpret_cast< ::GetStaticConfigMessage*>(&::_GetStaticConfigMessage_default_instance_);
}
inline const ::GetStaticConfigMessage& MessageBody::get_static_config() const {
  // @@protoc_insertion_point(field_get:MessageBody.get_static_config)
  return _internal_get_static_config();
}
inline ::GetStaticConfigMessage* MessageBody::_internal_mutable_get_static_config() {
  if (!_internal_has_get_static_config()) {
    clear_message_body();
    set_has_get_static_config();
    message_body_.get_static_config_ = CreateMaybeMessage< ::GetStaticConfigMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.get_static_config_;
}
inline ::GetStaticConfigMessage* MessageBody::mutable_get_static_config() {
  // @@protoc_insertion_point(field_mutable:MessageBody.get_static_config)
  return _internal_mutable_get_static_config();
}

// .StaticConfigMessage static_config = 12;
inline bool MessageBody::_internal_has_static_config() const {
  return message_body_case() == kStaticConfig;
}
inline bool MessageBody::has_static_config() const {
  return _internal_has_static_config();
}
inline void MessageBody::set_has_static_config() {
  _oneof_case_[0] = kStaticConfig;
}
inline void MessageBody::clear_static_config() {
  if (_internal_has_static_config()) {
    delete message_body_.static_config_;
    clear_has_message_body();
  }
}
inline ::StaticConfigMessage* MessageBody::release_static_config() {
  // @@protoc_insertion_point(field_release:MessageBody.static_config)
  if (_internal_has_static_config()) {
    clear_has_message_body();
      ::StaticConfigMessage* temp = message_body_.static_config_;
    message_body_.static_config_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::StaticConfigMessage& MessageBody::_internal_static_config() const {
  return _internal_has_static_config()
      ? *message_body_.static_config_
      : *reinterpret_cast< ::StaticConfigMessage*>(&::_StaticConfigMessage_default_instance_);
}
inline const ::StaticConfigMessage& MessageBody::static_config() const {
  // @@protoc_insertion_point(field_get:MessageBody.static_config)
  return _internal_static_config();
}
inline ::StaticConfigMessage* MessageBody::_internal_mutable_static_config() {
  if (!_internal_has_static_config()) {
    clear_message_body();
    set_has_static_config();
    message_body_.static_config_ = CreateMaybeMessage< ::StaticConfigMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.static_config_;
}
inline ::StaticConfigMessage* MessageBody::mutable_static_config() {
  // @@protoc_insertion_point(field_mutable:MessageBody.static_config)
  return _internal_mutable_static_config();
}

// .GetDataCollectionJobsMessage get_data_collection_jobs = 13;
inline bool MessageBody::_internal_has_get_data_collection_jobs() const {
  return message_body_case() == kGetDataCollectionJobs;
}
inline bool MessageBody::has_get_data_collection_jobs() const {
  return _internal_has_get_data_collection_jobs();
}
inline void MessageBody::set_has_get_data_collection_jobs() {
  _oneof_case_[0] = kGetDataCollectionJobs;
}
inline void MessageBody::clear_get_data_collection_jobs() {
  if (_internal_has_get_data_collection_jobs()) {
    delete message_body_.get_data_collection_jobs_;
    clear_has_message_body();
  }
}
inline ::GetDataCollectionJobsMessage* MessageBody::release_get_data_collection_jobs() {
  // @@protoc_insertion_point(field_release:MessageBody.get_data_collection_jobs)
  if (_internal_has_get_data_collection_jobs()) {
    clear_has_message_body();
      ::GetDataCollectionJobsMessage* temp = message_body_.get_data_collection_jobs_;
    message_body_.get_data_collection_jobs_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::GetDataCollectionJobsMessage& MessageBody::_internal_get_data_collection_jobs() const {
  return _internal_has_get_data_collection_jobs()
      ? *message_body_.get_data_collection_jobs_
      : *reinterpret_cast< ::GetDataCollectionJobsMessage*>(&::_GetDataCollectionJobsMessage_default_instance_);
}
inline const ::GetDataCollectionJobsMessage& MessageBody::get_data_collection_jobs() const {
  // @@protoc_insertion_point(field_get:MessageBody.get_data_collection_jobs)
  return _internal_get_data_collection_jobs();
}
inline ::GetDataCollectionJobsMessage* MessageBody::_internal_mutable_get_data_collection_jobs() {
  if (!_internal_has_get_data_collection_jobs()) {
    clear_message_body();
    set_has_get_data_collection_jobs();
    message_body_.get_data_collection_jobs_ = CreateMaybeMessage< ::GetDataCollectionJobsMessage >(
        GetArenaNoVirtual());
  }
  return message_body_.get_data_collection_jobs_;
}
inline ::GetDataCollectionJobsMessage* MessageBody::mutable_get_data_collection_jobs() {
  // @@protoc_insertion_point(field_mutable:MessageBody.get_data_collection_jobs)
  return _internal_mutable_get_data_collection_jobs();
}

inline bool MessageBody::has_message_body() const {
  return message_body_case() != MESSAGE_BODY_NOT_SET;
}
inline void MessageBody::clear_has_message_body() {
  _oneof_case_[0] = MESSAGE_BODY_NOT_SET;
}
inline MessageBody::MessageBodyCase MessageBody::message_body_case() const {
  return MessageBody::MessageBodyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AckMessage

// .AckMessage.Status_Code status = 1;
inline void AckMessage::clear_status() {
  status_ = 0;
}
inline ::AckMessage_Status_Code AckMessage::_internal_status() const {
  return static_cast< ::AckMessage_Status_Code >(status_);
}
inline ::AckMessage_Status_Code AckMessage::status() const {
  // @@protoc_insertion_point(field_get:AckMessage.status)
  return _internal_status();
}
inline void AckMessage::_internal_set_status(::AckMessage_Status_Code value) {
  
  status_ = value;
}
inline void AckMessage::set_status(::AckMessage_Status_Code value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:AckMessage.status)
}

// -------------------------------------------------------------------

// JobStatusMessage

// .Content_Type content_type = 1;
inline void JobStatusMessage::clear_content_type() {
  content_type_ = 0;
}
inline ::Content_Type JobStatusMessage::_internal_content_type() const {
  return static_cast< ::Content_Type >(content_type_);
}
inline ::Content_Type JobStatusMessage::content_type() const {
  // @@protoc_insertion_point(field_get:JobStatusMessage.content_type)
  return _internal_content_type();
}
inline void JobStatusMessage::_internal_set_content_type(::Content_Type value) {
  
  content_type_ = value;
}
inline void JobStatusMessage::set_content_type(::Content_Type value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:JobStatusMessage.content_type)
}

// repeated .Job dc_job = 2;
inline int JobStatusMessage::_internal_dc_job_size() const {
  return dc_job_.size();
}
inline int JobStatusMessage::dc_job_size() const {
  return _internal_dc_job_size();
}
inline void JobStatusMessage::clear_dc_job() {
  dc_job_.Clear();
}
inline ::Job* JobStatusMessage::mutable_dc_job(int index) {
  // @@protoc_insertion_point(field_mutable:JobStatusMessage.dc_job)
  return dc_job_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Job >*
JobStatusMessage::mutable_dc_job() {
  // @@protoc_insertion_point(field_mutable_list:JobStatusMessage.dc_job)
  return &dc_job_;
}
inline const ::Job& JobStatusMessage::_internal_dc_job(int index) const {
  return dc_job_.Get(index);
}
inline const ::Job& JobStatusMessage::dc_job(int index) const {
  // @@protoc_insertion_point(field_get:JobStatusMessage.dc_job)
  return _internal_dc_job(index);
}
inline ::Job* JobStatusMessage::_internal_add_dc_job() {
  return dc_job_.Add();
}
inline ::Job* JobStatusMessage::add_dc_job() {
  // @@protoc_insertion_point(field_add:JobStatusMessage.dc_job)
  return _internal_add_dc_job();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Job >&
JobStatusMessage::dc_job() const {
  // @@protoc_insertion_point(field_list:JobStatusMessage.dc_job)
  return dc_job_;
}

// int32 max_supported_jobs = 3;
inline void JobStatusMessage::clear_max_supported_jobs() {
  max_supported_jobs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatusMessage::_internal_max_supported_jobs() const {
  return max_supported_jobs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatusMessage::max_supported_jobs() const {
  // @@protoc_insertion_point(field_get:JobStatusMessage.max_supported_jobs)
  return _internal_max_supported_jobs();
}
inline void JobStatusMessage::_internal_set_max_supported_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_supported_jobs_ = value;
}
inline void JobStatusMessage::set_max_supported_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_supported_jobs(value);
  // @@protoc_insertion_point(field_set:JobStatusMessage.max_supported_jobs)
}

// -------------------------------------------------------------------

// JobStatusRequestMessage

// .Content_Type content_type = 1;
inline void JobStatusRequestMessage::clear_content_type() {
  content_type_ = 0;
}
inline ::Content_Type JobStatusRequestMessage::_internal_content_type() const {
  return static_cast< ::Content_Type >(content_type_);
}
inline ::Content_Type JobStatusRequestMessage::content_type() const {
  // @@protoc_insertion_point(field_get:JobStatusRequestMessage.content_type)
  return _internal_content_type();
}
inline void JobStatusRequestMessage::_internal_set_content_type(::Content_Type value) {
  
  content_type_ = value;
}
inline void JobStatusRequestMessage::set_content_type(::Content_Type value) {
  _internal_set_content_type(value);
  // @@protoc_insertion_point(field_set:JobStatusRequestMessage.content_type)
}

// -------------------------------------------------------------------

// InitiateGeohashStreamMessage

// bool enabled = 1;
inline void InitiateGeohashStreamMessage::clear_enabled() {
  enabled_ = false;
}
inline bool InitiateGeohashStreamMessage::_internal_enabled() const {
  return enabled_;
}
inline bool InitiateGeohashStreamMessage::enabled() const {
  // @@protoc_insertion_point(field_get:InitiateGeohashStreamMessage.enabled)
  return _internal_enabled();
}
inline void InitiateGeohashStreamMessage::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void InitiateGeohashStreamMessage::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:InitiateGeohashStreamMessage.enabled)
}

// repeated .GeohashStreamArea areas = 2;
inline int InitiateGeohashStreamMessage::_internal_areas_size() const {
  return areas_.size();
}
inline int InitiateGeohashStreamMessage::areas_size() const {
  return _internal_areas_size();
}
inline void InitiateGeohashStreamMessage::clear_areas() {
  areas_.Clear();
}
inline ::GeohashStreamArea* InitiateGeohashStreamMessage::mutable_areas(int index) {
  // @@protoc_insertion_point(field_mutable:InitiateGeohashStreamMessage.areas)
  return areas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeohashStreamArea >*
InitiateGeohashStreamMessage::mutable_areas() {
  // @@protoc_insertion_point(field_mutable_list:InitiateGeohashStreamMessage.areas)
  return &areas_;
}
inline const ::GeohashStreamArea& InitiateGeohashStreamMessage::_internal_areas(int index) const {
  return areas_.Get(index);
}
inline const ::GeohashStreamArea& InitiateGeohashStreamMessage::areas(int index) const {
  // @@protoc_insertion_point(field_get:InitiateGeohashStreamMessage.areas)
  return _internal_areas(index);
}
inline ::GeohashStreamArea* InitiateGeohashStreamMessage::_internal_add_areas() {
  return areas_.Add();
}
inline ::GeohashStreamArea* InitiateGeohashStreamMessage::add_areas() {
  // @@protoc_insertion_point(field_add:InitiateGeohashStreamMessage.areas)
  return _internal_add_areas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeohashStreamArea >&
InitiateGeohashStreamMessage::areas() const {
  // @@protoc_insertion_point(field_list:InitiateGeohashStreamMessage.areas)
  return areas_;
}

// -------------------------------------------------------------------

// GeohashStreamArea

// int32 precision = 1;
inline void GeohashStreamArea::clear_precision() {
  precision_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeohashStreamArea::_internal_precision() const {
  return precision_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GeohashStreamArea::precision() const {
  // @@protoc_insertion_point(field_get:GeohashStreamArea.precision)
  return _internal_precision();
}
inline void GeohashStreamArea::_internal_set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  precision_ = value;
}
inline void GeohashStreamArea::set_precision(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_precision(value);
  // @@protoc_insertion_point(field_set:GeohashStreamArea.precision)
}

// .CompositeLocationArea geo_area = 2;
inline bool GeohashStreamArea::_internal_has_geo_area() const {
  return this != internal_default_instance() && geo_area_ != nullptr;
}
inline bool GeohashStreamArea::has_geo_area() const {
  return _internal_has_geo_area();
}
inline void GeohashStreamArea::clear_geo_area() {
  if (GetArenaNoVirtual() == nullptr && geo_area_ != nullptr) {
    delete geo_area_;
  }
  geo_area_ = nullptr;
}
inline const ::CompositeLocationArea& GeohashStreamArea::_internal_geo_area() const {
  const ::CompositeLocationArea* p = geo_area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::CompositeLocationArea*>(
      &::_CompositeLocationArea_default_instance_);
}
inline const ::CompositeLocationArea& GeohashStreamArea::geo_area() const {
  // @@protoc_insertion_point(field_get:GeohashStreamArea.geo_area)
  return _internal_geo_area();
}
inline ::CompositeLocationArea* GeohashStreamArea::release_geo_area() {
  // @@protoc_insertion_point(field_release:GeohashStreamArea.geo_area)
  
  ::CompositeLocationArea* temp = geo_area_;
  geo_area_ = nullptr;
  return temp;
}
inline ::CompositeLocationArea* GeohashStreamArea::_internal_mutable_geo_area() {
  
  if (geo_area_ == nullptr) {
    auto* p = CreateMaybeMessage<::CompositeLocationArea>(GetArenaNoVirtual());
    geo_area_ = p;
  }
  return geo_area_;
}
inline ::CompositeLocationArea* GeohashStreamArea::mutable_geo_area() {
  // @@protoc_insertion_point(field_mutable:GeohashStreamArea.geo_area)
  return _internal_mutable_geo_area();
}
inline void GeohashStreamArea::set_allocated_geo_area(::CompositeLocationArea* geo_area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete geo_area_;
  }
  if (geo_area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geo_area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_area, submessage_arena);
    }
    
  } else {
    
  }
  geo_area_ = geo_area;
  // @@protoc_insertion_point(field_set_allocated:GeohashStreamArea.geo_area)
}

// -------------------------------------------------------------------

// GeoHashMessage

// string geo_hash_value = 1;
inline void GeoHashMessage::clear_geo_hash_value() {
  geo_hash_value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GeoHashMessage::geo_hash_value() const {
  // @@protoc_insertion_point(field_get:GeoHashMessage.geo_hash_value)
  return _internal_geo_hash_value();
}
inline void GeoHashMessage::set_geo_hash_value(const std::string& value) {
  _internal_set_geo_hash_value(value);
  // @@protoc_insertion_point(field_set:GeoHashMessage.geo_hash_value)
}
inline std::string* GeoHashMessage::mutable_geo_hash_value() {
  // @@protoc_insertion_point(field_mutable:GeoHashMessage.geo_hash_value)
  return _internal_mutable_geo_hash_value();
}
inline const std::string& GeoHashMessage::_internal_geo_hash_value() const {
  return geo_hash_value_.GetNoArena();
}
inline void GeoHashMessage::_internal_set_geo_hash_value(const std::string& value) {
  
  geo_hash_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GeoHashMessage::set_geo_hash_value(std::string&& value) {
  
  geo_hash_value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GeoHashMessage.geo_hash_value)
}
inline void GeoHashMessage::set_geo_hash_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  geo_hash_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GeoHashMessage.geo_hash_value)
}
inline void GeoHashMessage::set_geo_hash_value(const char* value, size_t size) {
  
  geo_hash_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GeoHashMessage.geo_hash_value)
}
inline std::string* GeoHashMessage::_internal_mutable_geo_hash_value() {
  
  return geo_hash_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GeoHashMessage::release_geo_hash_value() {
  // @@protoc_insertion_point(field_release:GeoHashMessage.geo_hash_value)
  
  return geo_hash_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GeoHashMessage::set_allocated_geo_hash_value(std::string* geo_hash_value) {
  if (geo_hash_value != nullptr) {
    
  } else {
    
  }
  geo_hash_value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), geo_hash_value);
  // @@protoc_insertion_point(field_set_allocated:GeoHashMessage.geo_hash_value)
}

// -------------------------------------------------------------------

// Job

// string job_id = 1;
inline void Job::clear_job_id() {
  job_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Job::job_id() const {
  // @@protoc_insertion_point(field_get:Job.job_id)
  return _internal_job_id();
}
inline void Job::set_job_id(const std::string& value) {
  _internal_set_job_id(value);
  // @@protoc_insertion_point(field_set:Job.job_id)
}
inline std::string* Job::mutable_job_id() {
  // @@protoc_insertion_point(field_mutable:Job.job_id)
  return _internal_mutable_job_id();
}
inline const std::string& Job::_internal_job_id() const {
  return job_id_.GetNoArena();
}
inline void Job::_internal_set_job_id(const std::string& value) {
  
  job_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Job::set_job_id(std::string&& value) {
  
  job_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Job.job_id)
}
inline void Job::set_job_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Job.job_id)
}
inline void Job::set_job_id(const char* value, size_t size) {
  
  job_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Job.job_id)
}
inline std::string* Job::_internal_mutable_job_id() {
  
  return job_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Job::release_job_id() {
  // @@protoc_insertion_point(field_release:Job.job_id)
  
  return job_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Job::set_allocated_job_id(std::string* job_id) {
  if (job_id != nullptr) {
    
  } else {
    
  }
  job_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_id);
  // @@protoc_insertion_point(field_set_allocated:Job.job_id)
}

// .JobStatus job_status = 2;
inline bool Job::_internal_has_job_status() const {
  return this != internal_default_instance() && job_status_ != nullptr;
}
inline bool Job::has_job_status() const {
  return _internal_has_job_status();
}
inline void Job::clear_job_status() {
  if (GetArenaNoVirtual() == nullptr && job_status_ != nullptr) {
    delete job_status_;
  }
  job_status_ = nullptr;
}
inline const ::JobStatus& Job::_internal_job_status() const {
  const ::JobStatus* p = job_status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::JobStatus*>(
      &::_JobStatus_default_instance_);
}
inline const ::JobStatus& Job::job_status() const {
  // @@protoc_insertion_point(field_get:Job.job_status)
  return _internal_job_status();
}
inline ::JobStatus* Job::release_job_status() {
  // @@protoc_insertion_point(field_release:Job.job_status)
  
  ::JobStatus* temp = job_status_;
  job_status_ = nullptr;
  return temp;
}
inline ::JobStatus* Job::_internal_mutable_job_status() {
  
  if (job_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::JobStatus>(GetArenaNoVirtual());
    job_status_ = p;
  }
  return job_status_;
}
inline ::JobStatus* Job::mutable_job_status() {
  // @@protoc_insertion_point(field_mutable:Job.job_status)
  return _internal_mutable_job_status();
}
inline void Job::set_allocated_job_status(::JobStatus* job_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete job_status_;
  }
  if (job_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      job_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_status, submessage_arena);
    }
    
  } else {
    
  }
  job_status_ = job_status;
  // @@protoc_insertion_point(field_set_allocated:Job.job_status)
}

// .JobStatusReason reason = 3;
inline bool Job::_internal_has_reason() const {
  return this != internal_default_instance() && reason_ != nullptr;
}
inline bool Job::has_reason() const {
  return _internal_has_reason();
}
inline void Job::clear_reason() {
  if (GetArenaNoVirtual() == nullptr && reason_ != nullptr) {
    delete reason_;
  }
  reason_ = nullptr;
}
inline const ::JobStatusReason& Job::_internal_reason() const {
  const ::JobStatusReason* p = reason_;
  return p != nullptr ? *p : *reinterpret_cast<const ::JobStatusReason*>(
      &::_JobStatusReason_default_instance_);
}
inline const ::JobStatusReason& Job::reason() const {
  // @@protoc_insertion_point(field_get:Job.reason)
  return _internal_reason();
}
inline ::JobStatusReason* Job::release_reason() {
  // @@protoc_insertion_point(field_release:Job.reason)
  
  ::JobStatusReason* temp = reason_;
  reason_ = nullptr;
  return temp;
}
inline ::JobStatusReason* Job::_internal_mutable_reason() {
  
  if (reason_ == nullptr) {
    auto* p = CreateMaybeMessage<::JobStatusReason>(GetArenaNoVirtual());
    reason_ = p;
  }
  return reason_;
}
inline ::JobStatusReason* Job::mutable_reason() {
  // @@protoc_insertion_point(field_mutable:Job.reason)
  return _internal_mutable_reason();
}
inline void Job::set_allocated_reason(::JobStatusReason* reason) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reason_;
  }
  if (reason) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reason = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reason, submessage_arena);
    }
    
  } else {
    
  }
  reason_ = reason;
  // @@protoc_insertion_point(field_set_allocated:Job.reason)
}

// .JobStatistics job_statistics = 4;
inline bool Job::_internal_has_job_statistics() const {
  return this != internal_default_instance() && job_statistics_ != nullptr;
}
inline bool Job::has_job_statistics() const {
  return _internal_has_job_statistics();
}
inline void Job::clear_job_statistics() {
  if (GetArenaNoVirtual() == nullptr && job_statistics_ != nullptr) {
    delete job_statistics_;
  }
  job_statistics_ = nullptr;
}
inline const ::JobStatistics& Job::_internal_job_statistics() const {
  const ::JobStatistics* p = job_statistics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::JobStatistics*>(
      &::_JobStatistics_default_instance_);
}
inline const ::JobStatistics& Job::job_statistics() const {
  // @@protoc_insertion_point(field_get:Job.job_statistics)
  return _internal_job_statistics();
}
inline ::JobStatistics* Job::release_job_statistics() {
  // @@protoc_insertion_point(field_release:Job.job_statistics)
  
  ::JobStatistics* temp = job_statistics_;
  job_statistics_ = nullptr;
  return temp;
}
inline ::JobStatistics* Job::_internal_mutable_job_statistics() {
  
  if (job_statistics_ == nullptr) {
    auto* p = CreateMaybeMessage<::JobStatistics>(GetArenaNoVirtual());
    job_statistics_ = p;
  }
  return job_statistics_;
}
inline ::JobStatistics* Job::mutable_job_statistics() {
  // @@protoc_insertion_point(field_mutable:Job.job_statistics)
  return _internal_mutable_job_statistics();
}
inline void Job::set_allocated_job_statistics(::JobStatistics* job_statistics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete job_statistics_;
  }
  if (job_statistics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      job_statistics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, job_statistics, submessage_arena);
    }
    
  } else {
    
  }
  job_statistics_ = job_statistics;
  // @@protoc_insertion_point(field_set_allocated:Job.job_statistics)
}

// repeated .JobWarnings job_warnings = 5;
inline int Job::_internal_job_warnings_size() const {
  return job_warnings_.size();
}
inline int Job::job_warnings_size() const {
  return _internal_job_warnings_size();
}
inline void Job::clear_job_warnings() {
  job_warnings_.Clear();
}
inline ::JobWarnings* Job::mutable_job_warnings(int index) {
  // @@protoc_insertion_point(field_mutable:Job.job_warnings)
  return job_warnings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JobWarnings >*
Job::mutable_job_warnings() {
  // @@protoc_insertion_point(field_mutable_list:Job.job_warnings)
  return &job_warnings_;
}
inline const ::JobWarnings& Job::_internal_job_warnings(int index) const {
  return job_warnings_.Get(index);
}
inline const ::JobWarnings& Job::job_warnings(int index) const {
  // @@protoc_insertion_point(field_get:Job.job_warnings)
  return _internal_job_warnings(index);
}
inline ::JobWarnings* Job::_internal_add_job_warnings() {
  return job_warnings_.Add();
}
inline ::JobWarnings* Job::add_job_warnings() {
  // @@protoc_insertion_point(field_add:Job.job_warnings)
  return _internal_add_job_warnings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::JobWarnings >&
Job::job_warnings() const {
  // @@protoc_insertion_point(field_list:Job.job_warnings)
  return job_warnings_;
}

// uint64 utc_timestamp_ms = 6;
inline void Job::clear_utc_timestamp_ms() {
  utc_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Job::_internal_utc_timestamp_ms() const {
  return utc_timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Job::utc_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:Job.utc_timestamp_ms)
  return _internal_utc_timestamp_ms();
}
inline void Job::_internal_set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  utc_timestamp_ms_ = value;
}
inline void Job::set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:Job.utc_timestamp_ms)
}

// -------------------------------------------------------------------

// JobStatusReason

// .JobStatusReason.Reason reason = 1;
inline void JobStatusReason::clear_reason() {
  reason_ = 0;
}
inline ::JobStatusReason_Reason JobStatusReason::_internal_reason() const {
  return static_cast< ::JobStatusReason_Reason >(reason_);
}
inline ::JobStatusReason_Reason JobStatusReason::reason() const {
  // @@protoc_insertion_point(field_get:JobStatusReason.reason)
  return _internal_reason();
}
inline void JobStatusReason::_internal_set_reason(::JobStatusReason_Reason value) {
  
  reason_ = value;
}
inline void JobStatusReason::set_reason(::JobStatusReason_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:JobStatusReason.reason)
}

// string detail = 2;
inline void JobStatusReason::clear_detail() {
  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JobStatusReason::detail() const {
  // @@protoc_insertion_point(field_get:JobStatusReason.detail)
  return _internal_detail();
}
inline void JobStatusReason::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:JobStatusReason.detail)
}
inline std::string* JobStatusReason::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:JobStatusReason.detail)
  return _internal_mutable_detail();
}
inline const std::string& JobStatusReason::_internal_detail() const {
  return detail_.GetNoArena();
}
inline void JobStatusReason::_internal_set_detail(const std::string& value) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JobStatusReason::set_detail(std::string&& value) {
  
  detail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JobStatusReason.detail)
}
inline void JobStatusReason::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobStatusReason.detail)
}
inline void JobStatusReason::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobStatusReason.detail)
}
inline std::string* JobStatusReason::_internal_mutable_detail() {
  
  return detail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JobStatusReason::release_detail() {
  // @@protoc_insertion_point(field_release:JobStatusReason.detail)
  
  return detail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JobStatusReason::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:JobStatusReason.detail)
}

// -------------------------------------------------------------------

// JobWarnings

// .JobWarnings.Warnings warning = 1;
inline void JobWarnings::clear_warning() {
  warning_ = 0;
}
inline ::JobWarnings_Warnings JobWarnings::_internal_warning() const {
  return static_cast< ::JobWarnings_Warnings >(warning_);
}
inline ::JobWarnings_Warnings JobWarnings::warning() const {
  // @@protoc_insertion_point(field_get:JobWarnings.warning)
  return _internal_warning();
}
inline void JobWarnings::_internal_set_warning(::JobWarnings_Warnings value) {
  
  warning_ = value;
}
inline void JobWarnings::set_warning(::JobWarnings_Warnings value) {
  _internal_set_warning(value);
  // @@protoc_insertion_point(field_set:JobWarnings.warning)
}

// string detail = 2;
inline void JobWarnings::clear_detail() {
  detail_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& JobWarnings::detail() const {
  // @@protoc_insertion_point(field_get:JobWarnings.detail)
  return _internal_detail();
}
inline void JobWarnings::set_detail(const std::string& value) {
  _internal_set_detail(value);
  // @@protoc_insertion_point(field_set:JobWarnings.detail)
}
inline std::string* JobWarnings::mutable_detail() {
  // @@protoc_insertion_point(field_mutable:JobWarnings.detail)
  return _internal_mutable_detail();
}
inline const std::string& JobWarnings::_internal_detail() const {
  return detail_.GetNoArena();
}
inline void JobWarnings::_internal_set_detail(const std::string& value) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void JobWarnings::set_detail(std::string&& value) {
  
  detail_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:JobWarnings.detail)
}
inline void JobWarnings::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:JobWarnings.detail)
}
inline void JobWarnings::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:JobWarnings.detail)
}
inline std::string* JobWarnings::_internal_mutable_detail() {
  
  return detail_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* JobWarnings::release_detail() {
  // @@protoc_insertion_point(field_release:JobWarnings.detail)
  
  return detail_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void JobWarnings::set_allocated_detail(std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:JobWarnings.detail)
}

// uint64 utc_timestamp_ms = 3;
inline void JobWarnings::clear_utc_timestamp_ms() {
  utc_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JobWarnings::_internal_utc_timestamp_ms() const {
  return utc_timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JobWarnings::utc_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:JobWarnings.utc_timestamp_ms)
  return _internal_utc_timestamp_ms();
}
inline void JobWarnings::_internal_set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  utc_timestamp_ms_ = value;
}
inline void JobWarnings::set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:JobWarnings.utc_timestamp_ms)
}

// -------------------------------------------------------------------

// JobStatistics

// int32 driven_km = 1;
inline void JobStatistics::clear_driven_km() {
  driven_km_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatistics::_internal_driven_km() const {
  return driven_km_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatistics::driven_km() const {
  // @@protoc_insertion_point(field_get:JobStatistics.driven_km)
  return _internal_driven_km();
}
inline void JobStatistics::_internal_set_driven_km(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  driven_km_ = value;
}
inline void JobStatistics::set_driven_km(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driven_km(value);
  // @@protoc_insertion_point(field_set:JobStatistics.driven_km)
}

// int32 driven_time = 2;
inline void JobStatistics::clear_driven_time() {
  driven_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatistics::_internal_driven_time() const {
  return driven_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatistics::driven_time() const {
  // @@protoc_insertion_point(field_get:JobStatistics.driven_time)
  return _internal_driven_time();
}
inline void JobStatistics::_internal_set_driven_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  driven_time_ = value;
}
inline void JobStatistics::set_driven_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_driven_time(value);
  // @@protoc_insertion_point(field_set:JobStatistics.driven_time)
}

// int32 num_Of_uploaded_files = 3;
inline void JobStatistics::clear_num_of_uploaded_files() {
  num_of_uploaded_files_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatistics::_internal_num_of_uploaded_files() const {
  return num_of_uploaded_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 JobStatistics::num_of_uploaded_files() const {
  // @@protoc_insertion_point(field_get:JobStatistics.num_Of_uploaded_files)
  return _internal_num_of_uploaded_files();
}
inline void JobStatistics::_internal_set_num_of_uploaded_files(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_of_uploaded_files_ = value;
}
inline void JobStatistics::set_num_of_uploaded_files(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_of_uploaded_files(value);
  // @@protoc_insertion_point(field_set:JobStatistics.num_Of_uploaded_files)
}

// uint64 utc_timestamp_ms = 4;
inline void JobStatistics::clear_utc_timestamp_ms() {
  utc_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JobStatistics::_internal_utc_timestamp_ms() const {
  return utc_timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JobStatistics::utc_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:JobStatistics.utc_timestamp_ms)
  return _internal_utc_timestamp_ms();
}
inline void JobStatistics::_internal_set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  utc_timestamp_ms_ = value;
}
inline void JobStatistics::set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:JobStatistics.utc_timestamp_ms)
}

// -------------------------------------------------------------------

// JobStatus

// .JobStatus.Job_Status job_status = 1;
inline void JobStatus::clear_job_status() {
  job_status_ = 0;
}
inline ::JobStatus_Job_Status JobStatus::_internal_job_status() const {
  return static_cast< ::JobStatus_Job_Status >(job_status_);
}
inline ::JobStatus_Job_Status JobStatus::job_status() const {
  // @@protoc_insertion_point(field_get:JobStatus.job_status)
  return _internal_job_status();
}
inline void JobStatus::_internal_set_job_status(::JobStatus_Job_Status value) {
  
  job_status_ = value;
}
inline void JobStatus::set_job_status(::JobStatus_Job_Status value) {
  _internal_set_job_status(value);
  // @@protoc_insertion_point(field_set:JobStatus.job_status)
}

// uint64 utc_timestamp_ms = 2;
inline void JobStatus::clear_utc_timestamp_ms() {
  utc_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JobStatus::_internal_utc_timestamp_ms() const {
  return utc_timestamp_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 JobStatus::utc_timestamp_ms() const {
  // @@protoc_insertion_point(field_get:JobStatus.utc_timestamp_ms)
  return _internal_utc_timestamp_ms();
}
inline void JobStatus::_internal_set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  utc_timestamp_ms_ = value;
}
inline void JobStatus::set_utc_timestamp_ms(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc_timestamp_ms(value);
  // @@protoc_insertion_point(field_set:JobStatus.utc_timestamp_ms)
}

// -------------------------------------------------------------------

// GeoCoordinateArea

// double latitude_deg = 1;
inline void GeoCoordinateArea::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double GeoCoordinateArea::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double GeoCoordinateArea::latitude_deg() const {
  // @@protoc_insertion_point(field_get:GeoCoordinateArea.latitude_deg)
  return _internal_latitude_deg();
}
inline void GeoCoordinateArea::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void GeoCoordinateArea::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:GeoCoordinateArea.latitude_deg)
}

// double longitude_deg = 2;
inline void GeoCoordinateArea::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double GeoCoordinateArea::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double GeoCoordinateArea::longitude_deg() const {
  // @@protoc_insertion_point(field_get:GeoCoordinateArea.longitude_deg)
  return _internal_longitude_deg();
}
inline void GeoCoordinateArea::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void GeoCoordinateArea::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:GeoCoordinateArea.longitude_deg)
}

// -------------------------------------------------------------------

// GeoRectangleArea

// .GeoCoordinateArea top_left = 1;
inline bool GeoRectangleArea::_internal_has_top_left() const {
  return this != internal_default_instance() && top_left_ != nullptr;
}
inline bool GeoRectangleArea::has_top_left() const {
  return _internal_has_top_left();
}
inline void GeoRectangleArea::clear_top_left() {
  if (GetArenaNoVirtual() == nullptr && top_left_ != nullptr) {
    delete top_left_;
  }
  top_left_ = nullptr;
}
inline const ::GeoCoordinateArea& GeoRectangleArea::_internal_top_left() const {
  const ::GeoCoordinateArea* p = top_left_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GeoCoordinateArea*>(
      &::_GeoCoordinateArea_default_instance_);
}
inline const ::GeoCoordinateArea& GeoRectangleArea::top_left() const {
  // @@protoc_insertion_point(field_get:GeoRectangleArea.top_left)
  return _internal_top_left();
}
inline ::GeoCoordinateArea* GeoRectangleArea::release_top_left() {
  // @@protoc_insertion_point(field_release:GeoRectangleArea.top_left)
  
  ::GeoCoordinateArea* temp = top_left_;
  top_left_ = nullptr;
  return temp;
}
inline ::GeoCoordinateArea* GeoRectangleArea::_internal_mutable_top_left() {
  
  if (top_left_ == nullptr) {
    auto* p = CreateMaybeMessage<::GeoCoordinateArea>(GetArenaNoVirtual());
    top_left_ = p;
  }
  return top_left_;
}
inline ::GeoCoordinateArea* GeoRectangleArea::mutable_top_left() {
  // @@protoc_insertion_point(field_mutable:GeoRectangleArea.top_left)
  return _internal_mutable_top_left();
}
inline void GeoRectangleArea::set_allocated_top_left(::GeoCoordinateArea* top_left) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete top_left_;
  }
  if (top_left) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      top_left = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, top_left, submessage_arena);
    }
    
  } else {
    
  }
  top_left_ = top_left;
  // @@protoc_insertion_point(field_set_allocated:GeoRectangleArea.top_left)
}

// .GeoCoordinateArea bottom_right = 2;
inline bool GeoRectangleArea::_internal_has_bottom_right() const {
  return this != internal_default_instance() && bottom_right_ != nullptr;
}
inline bool GeoRectangleArea::has_bottom_right() const {
  return _internal_has_bottom_right();
}
inline void GeoRectangleArea::clear_bottom_right() {
  if (GetArenaNoVirtual() == nullptr && bottom_right_ != nullptr) {
    delete bottom_right_;
  }
  bottom_right_ = nullptr;
}
inline const ::GeoCoordinateArea& GeoRectangleArea::_internal_bottom_right() const {
  const ::GeoCoordinateArea* p = bottom_right_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GeoCoordinateArea*>(
      &::_GeoCoordinateArea_default_instance_);
}
inline const ::GeoCoordinateArea& GeoRectangleArea::bottom_right() const {
  // @@protoc_insertion_point(field_get:GeoRectangleArea.bottom_right)
  return _internal_bottom_right();
}
inline ::GeoCoordinateArea* GeoRectangleArea::release_bottom_right() {
  // @@protoc_insertion_point(field_release:GeoRectangleArea.bottom_right)
  
  ::GeoCoordinateArea* temp = bottom_right_;
  bottom_right_ = nullptr;
  return temp;
}
inline ::GeoCoordinateArea* GeoRectangleArea::_internal_mutable_bottom_right() {
  
  if (bottom_right_ == nullptr) {
    auto* p = CreateMaybeMessage<::GeoCoordinateArea>(GetArenaNoVirtual());
    bottom_right_ = p;
  }
  return bottom_right_;
}
inline ::GeoCoordinateArea* GeoRectangleArea::mutable_bottom_right() {
  // @@protoc_insertion_point(field_mutable:GeoRectangleArea.bottom_right)
  return _internal_mutable_bottom_right();
}
inline void GeoRectangleArea::set_allocated_bottom_right(::GeoCoordinateArea* bottom_right) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bottom_right_;
  }
  if (bottom_right) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bottom_right = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottom_right, submessage_arena);
    }
    
  } else {
    
  }
  bottom_right_ = bottom_right;
  // @@protoc_insertion_point(field_set_allocated:GeoRectangleArea.bottom_right)
}

// -------------------------------------------------------------------

// GeoCircleArea

// .GeoCoordinateArea center = 1;
inline bool GeoCircleArea::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool GeoCircleArea::has_center() const {
  return _internal_has_center();
}
inline void GeoCircleArea::clear_center() {
  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::GeoCoordinateArea& GeoCircleArea::_internal_center() const {
  const ::GeoCoordinateArea* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::GeoCoordinateArea*>(
      &::_GeoCoordinateArea_default_instance_);
}
inline const ::GeoCoordinateArea& GeoCircleArea::center() const {
  // @@protoc_insertion_point(field_get:GeoCircleArea.center)
  return _internal_center();
}
inline ::GeoCoordinateArea* GeoCircleArea::release_center() {
  // @@protoc_insertion_point(field_release:GeoCircleArea.center)
  
  ::GeoCoordinateArea* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::GeoCoordinateArea* GeoCircleArea::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::GeoCoordinateArea>(GetArenaNoVirtual());
    center_ = p;
  }
  return center_;
}
inline ::GeoCoordinateArea* GeoCircleArea::mutable_center() {
  // @@protoc_insertion_point(field_mutable:GeoCircleArea.center)
  return _internal_mutable_center();
}
inline void GeoCircleArea::set_allocated_center(::GeoCoordinateArea* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:GeoCircleArea.center)
}

// double radius_m = 2;
inline void GeoCircleArea::clear_radius_m() {
  radius_m_ = 0;
}
inline double GeoCircleArea::_internal_radius_m() const {
  return radius_m_;
}
inline double GeoCircleArea::radius_m() const {
  // @@protoc_insertion_point(field_get:GeoCircleArea.radius_m)
  return _internal_radius_m();
}
inline void GeoCircleArea::_internal_set_radius_m(double value) {
  
  radius_m_ = value;
}
inline void GeoCircleArea::set_radius_m(double value) {
  _internal_set_radius_m(value);
  // @@protoc_insertion_point(field_set:GeoCircleArea.radius_m)
}

// -------------------------------------------------------------------

// CompositeLocationArea

// repeated .GeoCircleArea geo_circles = 1;
inline int CompositeLocationArea::_internal_geo_circles_size() const {
  return geo_circles_.size();
}
inline int CompositeLocationArea::geo_circles_size() const {
  return _internal_geo_circles_size();
}
inline void CompositeLocationArea::clear_geo_circles() {
  geo_circles_.Clear();
}
inline ::GeoCircleArea* CompositeLocationArea::mutable_geo_circles(int index) {
  // @@protoc_insertion_point(field_mutable:CompositeLocationArea.geo_circles)
  return geo_circles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoCircleArea >*
CompositeLocationArea::mutable_geo_circles() {
  // @@protoc_insertion_point(field_mutable_list:CompositeLocationArea.geo_circles)
  return &geo_circles_;
}
inline const ::GeoCircleArea& CompositeLocationArea::_internal_geo_circles(int index) const {
  return geo_circles_.Get(index);
}
inline const ::GeoCircleArea& CompositeLocationArea::geo_circles(int index) const {
  // @@protoc_insertion_point(field_get:CompositeLocationArea.geo_circles)
  return _internal_geo_circles(index);
}
inline ::GeoCircleArea* CompositeLocationArea::_internal_add_geo_circles() {
  return geo_circles_.Add();
}
inline ::GeoCircleArea* CompositeLocationArea::add_geo_circles() {
  // @@protoc_insertion_point(field_add:CompositeLocationArea.geo_circles)
  return _internal_add_geo_circles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoCircleArea >&
CompositeLocationArea::geo_circles() const {
  // @@protoc_insertion_point(field_list:CompositeLocationArea.geo_circles)
  return geo_circles_;
}

// repeated .GeoRectangleArea geo_rectangles = 2;
inline int CompositeLocationArea::_internal_geo_rectangles_size() const {
  return geo_rectangles_.size();
}
inline int CompositeLocationArea::geo_rectangles_size() const {
  return _internal_geo_rectangles_size();
}
inline void CompositeLocationArea::clear_geo_rectangles() {
  geo_rectangles_.Clear();
}
inline ::GeoRectangleArea* CompositeLocationArea::mutable_geo_rectangles(int index) {
  // @@protoc_insertion_point(field_mutable:CompositeLocationArea.geo_rectangles)
  return geo_rectangles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoRectangleArea >*
CompositeLocationArea::mutable_geo_rectangles() {
  // @@protoc_insertion_point(field_mutable_list:CompositeLocationArea.geo_rectangles)
  return &geo_rectangles_;
}
inline const ::GeoRectangleArea& CompositeLocationArea::_internal_geo_rectangles(int index) const {
  return geo_rectangles_.Get(index);
}
inline const ::GeoRectangleArea& CompositeLocationArea::geo_rectangles(int index) const {
  // @@protoc_insertion_point(field_get:CompositeLocationArea.geo_rectangles)
  return _internal_geo_rectangles(index);
}
inline ::GeoRectangleArea* CompositeLocationArea::_internal_add_geo_rectangles() {
  return geo_rectangles_.Add();
}
inline ::GeoRectangleArea* CompositeLocationArea::add_geo_rectangles() {
  // @@protoc_insertion_point(field_add:CompositeLocationArea.geo_rectangles)
  return _internal_add_geo_rectangles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GeoRectangleArea >&
CompositeLocationArea::geo_rectangles() const {
  // @@protoc_insertion_point(field_list:CompositeLocationArea.geo_rectangles)
  return geo_rectangles_;
}

// -------------------------------------------------------------------

// GetStaticConfigMessage

// string udc_version = 1;
inline void GetStaticConfigMessage::clear_udc_version() {
  udc_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetStaticConfigMessage::udc_version() const {
  // @@protoc_insertion_point(field_get:GetStaticConfigMessage.udc_version)
  return _internal_udc_version();
}
inline void GetStaticConfigMessage::set_udc_version(const std::string& value) {
  _internal_set_udc_version(value);
  // @@protoc_insertion_point(field_set:GetStaticConfigMessage.udc_version)
}
inline std::string* GetStaticConfigMessage::mutable_udc_version() {
  // @@protoc_insertion_point(field_mutable:GetStaticConfigMessage.udc_version)
  return _internal_mutable_udc_version();
}
inline const std::string& GetStaticConfigMessage::_internal_udc_version() const {
  return udc_version_.GetNoArena();
}
inline void GetStaticConfigMessage::_internal_set_udc_version(const std::string& value) {
  
  udc_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetStaticConfigMessage::set_udc_version(std::string&& value) {
  
  udc_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetStaticConfigMessage.udc_version)
}
inline void GetStaticConfigMessage::set_udc_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  udc_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetStaticConfigMessage.udc_version)
}
inline void GetStaticConfigMessage::set_udc_version(const char* value, size_t size) {
  
  udc_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetStaticConfigMessage.udc_version)
}
inline std::string* GetStaticConfigMessage::_internal_mutable_udc_version() {
  
  return udc_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStaticConfigMessage::release_udc_version() {
  // @@protoc_insertion_point(field_release:GetStaticConfigMessage.udc_version)
  
  return udc_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStaticConfigMessage::set_allocated_udc_version(std::string* udc_version) {
  if (udc_version != nullptr) {
    
  } else {
    
  }
  udc_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), udc_version);
  // @@protoc_insertion_point(field_set_allocated:GetStaticConfigMessage.udc_version)
}

// string supported_job_format_version = 2;
inline void GetStaticConfigMessage::clear_supported_job_format_version() {
  supported_job_format_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetStaticConfigMessage::supported_job_format_version() const {
  // @@protoc_insertion_point(field_get:GetStaticConfigMessage.supported_job_format_version)
  return _internal_supported_job_format_version();
}
inline void GetStaticConfigMessage::set_supported_job_format_version(const std::string& value) {
  _internal_set_supported_job_format_version(value);
  // @@protoc_insertion_point(field_set:GetStaticConfigMessage.supported_job_format_version)
}
inline std::string* GetStaticConfigMessage::mutable_supported_job_format_version() {
  // @@protoc_insertion_point(field_mutable:GetStaticConfigMessage.supported_job_format_version)
  return _internal_mutable_supported_job_format_version();
}
inline const std::string& GetStaticConfigMessage::_internal_supported_job_format_version() const {
  return supported_job_format_version_.GetNoArena();
}
inline void GetStaticConfigMessage::_internal_set_supported_job_format_version(const std::string& value) {
  
  supported_job_format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetStaticConfigMessage::set_supported_job_format_version(std::string&& value) {
  
  supported_job_format_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetStaticConfigMessage.supported_job_format_version)
}
inline void GetStaticConfigMessage::set_supported_job_format_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  supported_job_format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetStaticConfigMessage.supported_job_format_version)
}
inline void GetStaticConfigMessage::set_supported_job_format_version(const char* value, size_t size) {
  
  supported_job_format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetStaticConfigMessage.supported_job_format_version)
}
inline std::string* GetStaticConfigMessage::_internal_mutable_supported_job_format_version() {
  
  return supported_job_format_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStaticConfigMessage::release_supported_job_format_version() {
  // @@protoc_insertion_point(field_release:GetStaticConfigMessage.supported_job_format_version)
  
  return supported_job_format_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStaticConfigMessage::set_allocated_supported_job_format_version(std::string* supported_job_format_version) {
  if (supported_job_format_version != nullptr) {
    
  } else {
    
  }
  supported_job_format_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supported_job_format_version);
  // @@protoc_insertion_point(field_set_allocated:GetStaticConfigMessage.supported_job_format_version)
}

// string supported_upload_format_version = 3;
inline void GetStaticConfigMessage::clear_supported_upload_format_version() {
  supported_upload_format_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetStaticConfigMessage::supported_upload_format_version() const {
  // @@protoc_insertion_point(field_get:GetStaticConfigMessage.supported_upload_format_version)
  return _internal_supported_upload_format_version();
}
inline void GetStaticConfigMessage::set_supported_upload_format_version(const std::string& value) {
  _internal_set_supported_upload_format_version(value);
  // @@protoc_insertion_point(field_set:GetStaticConfigMessage.supported_upload_format_version)
}
inline std::string* GetStaticConfigMessage::mutable_supported_upload_format_version() {
  // @@protoc_insertion_point(field_mutable:GetStaticConfigMessage.supported_upload_format_version)
  return _internal_mutable_supported_upload_format_version();
}
inline const std::string& GetStaticConfigMessage::_internal_supported_upload_format_version() const {
  return supported_upload_format_version_.GetNoArena();
}
inline void GetStaticConfigMessage::_internal_set_supported_upload_format_version(const std::string& value) {
  
  supported_upload_format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetStaticConfigMessage::set_supported_upload_format_version(std::string&& value) {
  
  supported_upload_format_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetStaticConfigMessage.supported_upload_format_version)
}
inline void GetStaticConfigMessage::set_supported_upload_format_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  supported_upload_format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetStaticConfigMessage.supported_upload_format_version)
}
inline void GetStaticConfigMessage::set_supported_upload_format_version(const char* value, size_t size) {
  
  supported_upload_format_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetStaticConfigMessage.supported_upload_format_version)
}
inline std::string* GetStaticConfigMessage::_internal_mutable_supported_upload_format_version() {
  
  return supported_upload_format_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetStaticConfigMessage::release_supported_upload_format_version() {
  // @@protoc_insertion_point(field_release:GetStaticConfigMessage.supported_upload_format_version)
  
  return supported_upload_format_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetStaticConfigMessage::set_allocated_supported_upload_format_version(std::string* supported_upload_format_version) {
  if (supported_upload_format_version != nullptr) {
    
  } else {
    
  }
  supported_upload_format_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supported_upload_format_version);
  // @@protoc_insertion_point(field_set_allocated:GetStaticConfigMessage.supported_upload_format_version)
}

// repeated .SupportedSourceVersion supported_source_version = 4;
inline int GetStaticConfigMessage::_internal_supported_source_version_size() const {
  return supported_source_version_.size();
}
inline int GetStaticConfigMessage::supported_source_version_size() const {
  return _internal_supported_source_version_size();
}
inline void GetStaticConfigMessage::clear_supported_source_version() {
  supported_source_version_.Clear();
}
inline ::SupportedSourceVersion* GetStaticConfigMessage::mutable_supported_source_version(int index) {
  // @@protoc_insertion_point(field_mutable:GetStaticConfigMessage.supported_source_version)
  return supported_source_version_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SupportedSourceVersion >*
GetStaticConfigMessage::mutable_supported_source_version() {
  // @@protoc_insertion_point(field_mutable_list:GetStaticConfigMessage.supported_source_version)
  return &supported_source_version_;
}
inline const ::SupportedSourceVersion& GetStaticConfigMessage::_internal_supported_source_version(int index) const {
  return supported_source_version_.Get(index);
}
inline const ::SupportedSourceVersion& GetStaticConfigMessage::supported_source_version(int index) const {
  // @@protoc_insertion_point(field_get:GetStaticConfigMessage.supported_source_version)
  return _internal_supported_source_version(index);
}
inline ::SupportedSourceVersion* GetStaticConfigMessage::_internal_add_supported_source_version() {
  return supported_source_version_.Add();
}
inline ::SupportedSourceVersion* GetStaticConfigMessage::add_supported_source_version() {
  // @@protoc_insertion_point(field_add:GetStaticConfigMessage.supported_source_version)
  return _internal_add_supported_source_version();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::SupportedSourceVersion >&
GetStaticConfigMessage::supported_source_version() const {
  // @@protoc_insertion_point(field_list:GetStaticConfigMessage.supported_source_version)
  return supported_source_version_;
}

// -------------------------------------------------------------------

// GetDataCollectionJobsMessage

// int32 max_supported_jobs = 1;
inline void GetDataCollectionJobsMessage::clear_max_supported_jobs() {
  max_supported_jobs_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDataCollectionJobsMessage::_internal_max_supported_jobs() const {
  return max_supported_jobs_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDataCollectionJobsMessage::max_supported_jobs() const {
  // @@protoc_insertion_point(field_get:GetDataCollectionJobsMessage.max_supported_jobs)
  return _internal_max_supported_jobs();
}
inline void GetDataCollectionJobsMessage::_internal_set_max_supported_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  max_supported_jobs_ = value;
}
inline void GetDataCollectionJobsMessage::set_max_supported_jobs(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_max_supported_jobs(value);
  // @@protoc_insertion_point(field_set:GetDataCollectionJobsMessage.max_supported_jobs)
}

// -------------------------------------------------------------------

// DataCollectionJobsListMessage

// repeated .data_collection_configuration_request.DataCollectionJob new_jobs = 1;
inline int DataCollectionJobsListMessage::_internal_new_jobs_size() const {
  return new_jobs_.size();
}
inline int DataCollectionJobsListMessage::new_jobs_size() const {
  return _internal_new_jobs_size();
}
inline ::data_collection_configuration_request::DataCollectionJob* DataCollectionJobsListMessage::mutable_new_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:DataCollectionJobsListMessage.new_jobs)
  return new_jobs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_collection_configuration_request::DataCollectionJob >*
DataCollectionJobsListMessage::mutable_new_jobs() {
  // @@protoc_insertion_point(field_mutable_list:DataCollectionJobsListMessage.new_jobs)
  return &new_jobs_;
}
inline const ::data_collection_configuration_request::DataCollectionJob& DataCollectionJobsListMessage::_internal_new_jobs(int index) const {
  return new_jobs_.Get(index);
}
inline const ::data_collection_configuration_request::DataCollectionJob& DataCollectionJobsListMessage::new_jobs(int index) const {
  // @@protoc_insertion_point(field_get:DataCollectionJobsListMessage.new_jobs)
  return _internal_new_jobs(index);
}
inline ::data_collection_configuration_request::DataCollectionJob* DataCollectionJobsListMessage::_internal_add_new_jobs() {
  return new_jobs_.Add();
}
inline ::data_collection_configuration_request::DataCollectionJob* DataCollectionJobsListMessage::add_new_jobs() {
  // @@protoc_insertion_point(field_add:DataCollectionJobsListMessage.new_jobs)
  return _internal_add_new_jobs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::data_collection_configuration_request::DataCollectionJob >&
DataCollectionJobsListMessage::new_jobs() const {
  // @@protoc_insertion_point(field_list:DataCollectionJobsListMessage.new_jobs)
  return new_jobs_;
}

// repeated string job_ids_to_terminate = 2;
inline int DataCollectionJobsListMessage::_internal_job_ids_to_terminate_size() const {
  return job_ids_to_terminate_.size();
}
inline int DataCollectionJobsListMessage::job_ids_to_terminate_size() const {
  return _internal_job_ids_to_terminate_size();
}
inline void DataCollectionJobsListMessage::clear_job_ids_to_terminate() {
  job_ids_to_terminate_.Clear();
}
inline std::string* DataCollectionJobsListMessage::add_job_ids_to_terminate() {
  // @@protoc_insertion_point(field_add_mutable:DataCollectionJobsListMessage.job_ids_to_terminate)
  return _internal_add_job_ids_to_terminate();
}
inline const std::string& DataCollectionJobsListMessage::_internal_job_ids_to_terminate(int index) const {
  return job_ids_to_terminate_.Get(index);
}
inline const std::string& DataCollectionJobsListMessage::job_ids_to_terminate(int index) const {
  // @@protoc_insertion_point(field_get:DataCollectionJobsListMessage.job_ids_to_terminate)
  return _internal_job_ids_to_terminate(index);
}
inline std::string* DataCollectionJobsListMessage::mutable_job_ids_to_terminate(int index) {
  // @@protoc_insertion_point(field_mutable:DataCollectionJobsListMessage.job_ids_to_terminate)
  return job_ids_to_terminate_.Mutable(index);
}
inline void DataCollectionJobsListMessage::set_job_ids_to_terminate(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:DataCollectionJobsListMessage.job_ids_to_terminate)
  job_ids_to_terminate_.Mutable(index)->assign(value);
}
inline void DataCollectionJobsListMessage::set_job_ids_to_terminate(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:DataCollectionJobsListMessage.job_ids_to_terminate)
  job_ids_to_terminate_.Mutable(index)->assign(std::move(value));
}
inline void DataCollectionJobsListMessage::set_job_ids_to_terminate(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  job_ids_to_terminate_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:DataCollectionJobsListMessage.job_ids_to_terminate)
}
inline void DataCollectionJobsListMessage::set_job_ids_to_terminate(int index, const char* value, size_t size) {
  job_ids_to_terminate_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:DataCollectionJobsListMessage.job_ids_to_terminate)
}
inline std::string* DataCollectionJobsListMessage::_internal_add_job_ids_to_terminate() {
  return job_ids_to_terminate_.Add();
}
inline void DataCollectionJobsListMessage::add_job_ids_to_terminate(const std::string& value) {
  job_ids_to_terminate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:DataCollectionJobsListMessage.job_ids_to_terminate)
}
inline void DataCollectionJobsListMessage::add_job_ids_to_terminate(std::string&& value) {
  job_ids_to_terminate_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:DataCollectionJobsListMessage.job_ids_to_terminate)
}
inline void DataCollectionJobsListMessage::add_job_ids_to_terminate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  job_ids_to_terminate_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:DataCollectionJobsListMessage.job_ids_to_terminate)
}
inline void DataCollectionJobsListMessage::add_job_ids_to_terminate(const char* value, size_t size) {
  job_ids_to_terminate_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:DataCollectionJobsListMessage.job_ids_to_terminate)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DataCollectionJobsListMessage::job_ids_to_terminate() const {
  // @@protoc_insertion_point(field_list:DataCollectionJobsListMessage.job_ids_to_terminate)
  return job_ids_to_terminate_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DataCollectionJobsListMessage::mutable_job_ids_to_terminate() {
  // @@protoc_insertion_point(field_mutable_list:DataCollectionJobsListMessage.job_ids_to_terminate)
  return &job_ids_to_terminate_;
}

// -------------------------------------------------------------------

// StaticConfigMessage

// -------------------------------------------------------------------

// SupportedSourceVersion

// .Source_Type source_type = 1;
inline void SupportedSourceVersion::clear_source_type() {
  source_type_ = 0;
}
inline ::Source_Type SupportedSourceVersion::_internal_source_type() const {
  return static_cast< ::Source_Type >(source_type_);
}
inline ::Source_Type SupportedSourceVersion::source_type() const {
  // @@protoc_insertion_point(field_get:SupportedSourceVersion.source_type)
  return _internal_source_type();
}
inline void SupportedSourceVersion::_internal_set_source_type(::Source_Type value) {
  
  source_type_ = value;
}
inline void SupportedSourceVersion::set_source_type(::Source_Type value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:SupportedSourceVersion.source_type)
}

// string ecu = 2;
inline void SupportedSourceVersion::clear_ecu() {
  ecu_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SupportedSourceVersion::ecu() const {
  // @@protoc_insertion_point(field_get:SupportedSourceVersion.ecu)
  return _internal_ecu();
}
inline void SupportedSourceVersion::set_ecu(const std::string& value) {
  _internal_set_ecu(value);
  // @@protoc_insertion_point(field_set:SupportedSourceVersion.ecu)
}
inline std::string* SupportedSourceVersion::mutable_ecu() {
  // @@protoc_insertion_point(field_mutable:SupportedSourceVersion.ecu)
  return _internal_mutable_ecu();
}
inline const std::string& SupportedSourceVersion::_internal_ecu() const {
  return ecu_.GetNoArena();
}
inline void SupportedSourceVersion::_internal_set_ecu(const std::string& value) {
  
  ecu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SupportedSourceVersion::set_ecu(std::string&& value) {
  
  ecu_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SupportedSourceVersion.ecu)
}
inline void SupportedSourceVersion::set_ecu(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ecu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SupportedSourceVersion.ecu)
}
inline void SupportedSourceVersion::set_ecu(const char* value, size_t size) {
  
  ecu_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SupportedSourceVersion.ecu)
}
inline std::string* SupportedSourceVersion::_internal_mutable_ecu() {
  
  return ecu_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SupportedSourceVersion::release_ecu() {
  // @@protoc_insertion_point(field_release:SupportedSourceVersion.ecu)
  
  return ecu_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SupportedSourceVersion::set_allocated_ecu(std::string* ecu) {
  if (ecu != nullptr) {
    
  } else {
    
  }
  ecu_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ecu);
  // @@protoc_insertion_point(field_set_allocated:SupportedSourceVersion.ecu)
}

// string version = 3;
inline void SupportedSourceVersion::clear_version() {
  version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SupportedSourceVersion::version() const {
  // @@protoc_insertion_point(field_get:SupportedSourceVersion.version)
  return _internal_version();
}
inline void SupportedSourceVersion::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:SupportedSourceVersion.version)
}
inline std::string* SupportedSourceVersion::mutable_version() {
  // @@protoc_insertion_point(field_mutable:SupportedSourceVersion.version)
  return _internal_mutable_version();
}
inline const std::string& SupportedSourceVersion::_internal_version() const {
  return version_.GetNoArena();
}
inline void SupportedSourceVersion::_internal_set_version(const std::string& value) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SupportedSourceVersion::set_version(std::string&& value) {
  
  version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SupportedSourceVersion.version)
}
inline void SupportedSourceVersion::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SupportedSourceVersion.version)
}
inline void SupportedSourceVersion::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SupportedSourceVersion.version)
}
inline std::string* SupportedSourceVersion::_internal_mutable_version() {
  
  return version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SupportedSourceVersion::release_version() {
  // @@protoc_insertion_point(field_release:SupportedSourceVersion.version)
  
  return version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SupportedSourceVersion::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:SupportedSourceVersion.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::MessageHeader_Message_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageHeader_Message_Type>() {
  return ::MessageHeader_Message_Type_descriptor();
}
template <> struct is_proto_enum< ::MessageHeader_Compression_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageHeader_Compression_Type>() {
  return ::MessageHeader_Compression_Type_descriptor();
}
template <> struct is_proto_enum< ::MessageHeader_Ecu_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MessageHeader_Ecu_Type>() {
  return ::MessageHeader_Ecu_Type_descriptor();
}
template <> struct is_proto_enum< ::AckMessage_Status_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::AckMessage_Status_Code>() {
  return ::AckMessage_Status_Code_descriptor();
}
template <> struct is_proto_enum< ::JobStatusReason_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JobStatusReason_Reason>() {
  return ::JobStatusReason_Reason_descriptor();
}
template <> struct is_proto_enum< ::JobWarnings_Warnings> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JobWarnings_Warnings>() {
  return ::JobWarnings_Warnings_descriptor();
}
template <> struct is_proto_enum< ::JobStatus_Job_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::JobStatus_Job_Status>() {
  return ::JobStatus_Job_Status_descriptor();
}
template <> struct is_proto_enum< ::Content_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Content_Type>() {
  return ::Content_Type_descriptor();
}
template <> struct is_proto_enum< ::Source_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Source_Type>() {
  return ::Source_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_backend_5fmessage_5fformat_2eproto
