// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request.proto

#include "request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobConfig_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkSignal_request_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_request_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskInfo_request_2eproto;
namespace Request {
class NetworkSignalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NetworkSignal> _instance;
} _NetworkSignal_default_instance_;
class CollectdDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Collectd> _instance;
} _Collectd_default_instance_;
class TaskInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TaskInfo> _instance;
} _TaskInfo_default_instance_;
class JobConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobConfig> _instance;
} _JobConfig_default_instance_;
class DataCollectionJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCollectionJob> _instance;
} _DataCollectionJob_default_instance_;
}  // namespace Request
static void InitDefaultsscc_info_Collectd_request_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Request::_Collectd_default_instance_;
    new (ptr) ::Request::Collectd();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Request::Collectd::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Collectd_request_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Collectd_request_2eproto}, {}};

static void InitDefaultsscc_info_DataCollectionJob_request_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Request::_DataCollectionJob_default_instance_;
    new (ptr) ::Request::DataCollectionJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Request::DataCollectionJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataCollectionJob_request_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataCollectionJob_request_2eproto}, {
      &scc_info_JobConfig_request_2eproto.base,}};

static void InitDefaultsscc_info_JobConfig_request_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Request::_JobConfig_default_instance_;
    new (ptr) ::Request::JobConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Request::JobConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JobConfig_request_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JobConfig_request_2eproto}, {
      &scc_info_TaskInfo_request_2eproto.base,}};

static void InitDefaultsscc_info_NetworkSignal_request_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Request::_NetworkSignal_default_instance_;
    new (ptr) ::Request::NetworkSignal();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Request::NetworkSignal::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NetworkSignal_request_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NetworkSignal_request_2eproto}, {}};

static void InitDefaultsscc_info_TaskInfo_request_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Request::_TaskInfo_default_instance_;
    new (ptr) ::Request::TaskInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Request::TaskInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TaskInfo_request_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TaskInfo_request_2eproto}, {
      &scc_info_NetworkSignal_request_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_request_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_request_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_request_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_request_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Request::NetworkSignal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Request::NetworkSignal, serviceid_),
  PROTOBUF_FIELD_OFFSET(::Request::NetworkSignal, eventid_),
  PROTOBUF_FIELD_OFFSET(::Request::NetworkSignal, signalname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Request::Collectd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Request::Collectd, serviceid_),
  PROTOBUF_FIELD_OFFSET(::Request::Collectd, eventid_),
  PROTOBUF_FIELD_OFFSET(::Request::Collectd, signalname_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Request::TaskInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Request::TaskInfo, taskid_),
  PROTOBUF_FIELD_OFFSET(::Request::TaskInfo, network_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Request::JobConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Request::JobConfig, job_uuid_),
  PROTOBUF_FIELD_OFFSET(::Request::JobConfig, priority_),
  PROTOBUF_FIELD_OFFSET(::Request::JobConfig, tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Request::DataCollectionJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Request::DataCollectionJob, jobconfig_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Request::NetworkSignal)},
  { 8, -1, sizeof(::Request::Collectd)},
  { 16, -1, sizeof(::Request::TaskInfo)},
  { 23, -1, sizeof(::Request::JobConfig)},
  { 31, -1, sizeof(::Request::DataCollectionJob)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Request::_NetworkSignal_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Request::_Collectd_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Request::_TaskInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Request::_JobConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Request::_DataCollectionJob_default_instance_),
};

const char descriptor_table_protodef_request_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rrequest.proto\022\007Request\"G\n\rNetworkSigna"
  "l\022\021\n\tserviceid\030\001 \001(\005\022\017\n\007eventid\030\002 \001(\005\022\022\n"
  "\nsignalname\030\003 \001(\t\"B\n\010Collectd\022\021\n\tservice"
  "id\030\001 \001(\005\022\017\n\007eventid\030\002 \001(\005\022\022\n\nsignalname\030"
  "\003 \001(\t\"C\n\010TaskInfo\022\016\n\006taskid\030\001 \001(\005\022\'\n\007net"
  "work\030\002 \003(\0132\026.Request.NetworkSignal\"Q\n\tJo"
  "bConfig\022\020\n\010job_uuid\030\001 \001(\t\022\020\n\010priority\030\002 "
  "\001(\005\022 \n\005tasks\030\003 \001(\0132\021.Request.TaskInfo\":\n"
  "\021DataCollectionJob\022%\n\tjobconfig\030\001 \003(\0132\022."
  "Request.JobConfigb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_request_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_request_2eproto_sccs[5] = {
  &scc_info_Collectd_request_2eproto.base,
  &scc_info_DataCollectionJob_request_2eproto.base,
  &scc_info_JobConfig_request_2eproto.base,
  &scc_info_NetworkSignal_request_2eproto.base,
  &scc_info_TaskInfo_request_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_request_2eproto_once;
static bool descriptor_table_request_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_2eproto = {
  &descriptor_table_request_2eproto_initialized, descriptor_table_protodef_request_2eproto, "request.proto", 385,
  &descriptor_table_request_2eproto_once, descriptor_table_request_2eproto_sccs, descriptor_table_request_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_request_2eproto::offsets,
  file_level_metadata_request_2eproto, 5, file_level_enum_descriptors_request_2eproto, file_level_service_descriptors_request_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_request_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_request_2eproto), true);
namespace Request {

// ===================================================================

void NetworkSignal::InitAsDefaultInstance() {
}
class NetworkSignal::_Internal {
 public:
};

NetworkSignal::NetworkSignal()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.NetworkSignal)
}
NetworkSignal::NetworkSignal(const NetworkSignal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signalname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signalname().empty()) {
    signalname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signalname_);
  }
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eventid_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(eventid_));
  // @@protoc_insertion_point(copy_constructor:Request.NetworkSignal)
}

void NetworkSignal::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NetworkSignal_request_2eproto.base);
  signalname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventid_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(eventid_));
}

NetworkSignal::~NetworkSignal() {
  // @@protoc_insertion_point(destructor:Request.NetworkSignal)
  SharedDtor();
}

void NetworkSignal::SharedDtor() {
  signalname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NetworkSignal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NetworkSignal& NetworkSignal::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NetworkSignal_request_2eproto.base);
  return *internal_default_instance();
}


void NetworkSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.NetworkSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventid_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(eventid_));
  _internal_metadata_.Clear();
}

const char* NetworkSignal::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serviceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signalname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signalname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Request.NetworkSignal.signalname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NetworkSignal::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.NetworkSignal)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serviceid = 1;
  if (this->serviceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serviceid(), target);
  }

  // int32 eventid = 2;
  if (this->eventid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_eventid(), target);
  }

  // string signalname = 3;
  if (this->signalname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signalname().data(), static_cast<int>(this->_internal_signalname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Request.NetworkSignal.signalname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_signalname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.NetworkSignal)
  return target;
}

size_t NetworkSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Request.NetworkSignal)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signalname = 3;
  if (this->signalname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signalname());
  }

  // int32 serviceid = 1;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceid());
  }

  // int32 eventid = 2;
  if (this->eventid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkSignal::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.NetworkSignal)
  GOOGLE_DCHECK_NE(&from, this);
  const NetworkSignal* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NetworkSignal>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.NetworkSignal)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.NetworkSignal)
    MergeFrom(*source);
  }
}

void NetworkSignal::MergeFrom(const NetworkSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.NetworkSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signalname().size() > 0) {

    signalname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signalname_);
  }
  if (from.serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
  if (from.eventid() != 0) {
    _internal_set_eventid(from._internal_eventid());
  }
}

void NetworkSignal::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.NetworkSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetworkSignal::CopyFrom(const NetworkSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.NetworkSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkSignal::IsInitialized() const {
  return true;
}

void NetworkSignal::InternalSwap(NetworkSignal* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signalname_.Swap(&other->signalname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serviceid_, other->serviceid_);
  swap(eventid_, other->eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NetworkSignal::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Collectd::InitAsDefaultInstance() {
}
class Collectd::_Internal {
 public:
};

Collectd::Collectd()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.Collectd)
}
Collectd::Collectd(const Collectd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signalname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signalname().empty()) {
    signalname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signalname_);
  }
  ::memcpy(&serviceid_, &from.serviceid_,
    static_cast<size_t>(reinterpret_cast<char*>(&eventid_) -
    reinterpret_cast<char*>(&serviceid_)) + sizeof(eventid_));
  // @@protoc_insertion_point(copy_constructor:Request.Collectd)
}

void Collectd::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Collectd_request_2eproto.base);
  signalname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventid_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(eventid_));
}

Collectd::~Collectd() {
  // @@protoc_insertion_point(destructor:Request.Collectd)
  SharedDtor();
}

void Collectd::SharedDtor() {
  signalname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Collectd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Collectd& Collectd::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Collectd_request_2eproto.base);
  return *internal_default_instance();
}


void Collectd::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.Collectd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  signalname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serviceid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eventid_) -
      reinterpret_cast<char*>(&serviceid_)) + sizeof(eventid_));
  _internal_metadata_.Clear();
}

const char* Collectd::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 serviceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 eventid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          eventid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string signalname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signalname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Request.Collectd.signalname"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Collectd::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.Collectd)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 serviceid = 1;
  if (this->serviceid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_serviceid(), target);
  }

  // int32 eventid = 2;
  if (this->eventid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_eventid(), target);
  }

  // string signalname = 3;
  if (this->signalname().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_signalname().data(), static_cast<int>(this->_internal_signalname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Request.Collectd.signalname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_signalname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.Collectd)
  return target;
}

size_t Collectd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Request.Collectd)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string signalname = 3;
  if (this->signalname().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_signalname());
  }

  // int32 serviceid = 1;
  if (this->serviceid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_serviceid());
  }

  // int32 eventid = 2;
  if (this->eventid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_eventid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Collectd::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.Collectd)
  GOOGLE_DCHECK_NE(&from, this);
  const Collectd* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Collectd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.Collectd)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.Collectd)
    MergeFrom(*source);
  }
}

void Collectd::MergeFrom(const Collectd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.Collectd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.signalname().size() > 0) {

    signalname_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signalname_);
  }
  if (from.serviceid() != 0) {
    _internal_set_serviceid(from._internal_serviceid());
  }
  if (from.eventid() != 0) {
    _internal_set_eventid(from._internal_eventid());
  }
}

void Collectd::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.Collectd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Collectd::CopyFrom(const Collectd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.Collectd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Collectd::IsInitialized() const {
  return true;
}

void Collectd::InternalSwap(Collectd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  signalname_.Swap(&other->signalname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serviceid_, other->serviceid_);
  swap(eventid_, other->eventid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Collectd::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TaskInfo::InitAsDefaultInstance() {
}
class TaskInfo::_Internal {
 public:
};

TaskInfo::TaskInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.TaskInfo)
}
TaskInfo::TaskInfo(const TaskInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      network_(from.network_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_ = from.taskid_;
  // @@protoc_insertion_point(copy_constructor:Request.TaskInfo)
}

void TaskInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TaskInfo_request_2eproto.base);
  taskid_ = 0;
}

TaskInfo::~TaskInfo() {
  // @@protoc_insertion_point(destructor:Request.TaskInfo)
  SharedDtor();
}

void TaskInfo::SharedDtor() {
}

void TaskInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TaskInfo& TaskInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TaskInfo_request_2eproto.base);
  return *internal_default_instance();
}


void TaskInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.TaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  network_.Clear();
  taskid_ = 0;
  _internal_metadata_.Clear();
}

const char* TaskInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 taskid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          taskid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Request.NetworkSignal network = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_network(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TaskInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.TaskInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 taskid = 1;
  if (this->taskid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_taskid(), target);
  }

  // repeated .Request.NetworkSignal network = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_network_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_network(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.TaskInfo)
  return target;
}

size_t TaskInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Request.TaskInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Request.NetworkSignal network = 2;
  total_size += 1UL * this->_internal_network_size();
  for (const auto& msg : this->network_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 taskid = 1;
  if (this->taskid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_taskid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TaskInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.TaskInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.TaskInfo)
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.TaskInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  network_.MergeFrom(from.network_);
  if (from.taskid() != 0) {
    _internal_set_taskid(from._internal_taskid());
  }
}

void TaskInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.TaskInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  return true;
}

void TaskInfo::InternalSwap(TaskInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  network_.InternalSwap(&other->network_);
  swap(taskid_, other->taskid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobConfig::InitAsDefaultInstance() {
  ::Request::_JobConfig_default_instance_._instance.get_mutable()->tasks_ = const_cast< ::Request::TaskInfo*>(
      ::Request::TaskInfo::internal_default_instance());
}
class JobConfig::_Internal {
 public:
  static const ::Request::TaskInfo& tasks(const JobConfig* msg);
};

const ::Request::TaskInfo&
JobConfig::_Internal::tasks(const JobConfig* msg) {
  return *msg->tasks_;
}
JobConfig::JobConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.JobConfig)
}
JobConfig::JobConfig(const JobConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  job_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_uuid().empty()) {
    job_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_uuid_);
  }
  if (from._internal_has_tasks()) {
    tasks_ = new ::Request::TaskInfo(*from.tasks_);
  } else {
    tasks_ = nullptr;
  }
  priority_ = from.priority_;
  // @@protoc_insertion_point(copy_constructor:Request.JobConfig)
}

void JobConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobConfig_request_2eproto.base);
  job_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tasks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&priority_) -
      reinterpret_cast<char*>(&tasks_)) + sizeof(priority_));
}

JobConfig::~JobConfig() {
  // @@protoc_insertion_point(destructor:Request.JobConfig)
  SharedDtor();
}

void JobConfig::SharedDtor() {
  job_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tasks_;
}

void JobConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobConfig& JobConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobConfig_request_2eproto.base);
  return *internal_default_instance();
}


void JobConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.JobConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  job_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && tasks_ != nullptr) {
    delete tasks_;
  }
  tasks_ = nullptr;
  priority_ = 0;
  _internal_metadata_.Clear();
}

const char* JobConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Request.JobConfig.job_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 priority = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Request.TaskInfo tasks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_tasks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.JobConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_uuid = 1;
  if (this->job_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_uuid().data(), static_cast<int>(this->_internal_job_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Request.JobConfig.job_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_uuid(), target);
  }

  // int32 priority = 2;
  if (this->priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_priority(), target);
  }

  // .Request.TaskInfo tasks = 3;
  if (this->has_tasks()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::tasks(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.JobConfig)
  return target;
}

size_t JobConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Request.JobConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_uuid = 1;
  if (this->job_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_uuid());
  }

  // .Request.TaskInfo tasks = 3;
  if (this->has_tasks()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tasks_);
  }

  // int32 priority = 2;
  if (this->priority() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_priority());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.JobConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const JobConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.JobConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.JobConfig)
    MergeFrom(*source);
  }
}

void JobConfig::MergeFrom(const JobConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.JobConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.job_uuid().size() > 0) {

    job_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_uuid_);
  }
  if (from.has_tasks()) {
    _internal_mutable_tasks()->::Request::TaskInfo::MergeFrom(from._internal_tasks());
  }
  if (from.priority() != 0) {
    _internal_set_priority(from._internal_priority());
  }
}

void JobConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.JobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobConfig::CopyFrom(const JobConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.JobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobConfig::IsInitialized() const {
  return true;
}

void JobConfig::InternalSwap(JobConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  job_uuid_.Swap(&other->job_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tasks_, other->tasks_);
  swap(priority_, other->priority_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataCollectionJob::InitAsDefaultInstance() {
}
class DataCollectionJob::_Internal {
 public:
};

DataCollectionJob::DataCollectionJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Request.DataCollectionJob)
}
DataCollectionJob::DataCollectionJob(const DataCollectionJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      jobconfig_(from.jobconfig_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Request.DataCollectionJob)
}

void DataCollectionJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataCollectionJob_request_2eproto.base);
}

DataCollectionJob::~DataCollectionJob() {
  // @@protoc_insertion_point(destructor:Request.DataCollectionJob)
  SharedDtor();
}

void DataCollectionJob::SharedDtor() {
}

void DataCollectionJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataCollectionJob& DataCollectionJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataCollectionJob_request_2eproto.base);
  return *internal_default_instance();
}


void DataCollectionJob::Clear() {
// @@protoc_insertion_point(message_clear_start:Request.DataCollectionJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  jobconfig_.Clear();
  _internal_metadata_.Clear();
}

const char* DataCollectionJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Request.JobConfig jobconfig = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jobconfig(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCollectionJob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Request.DataCollectionJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Request.JobConfig jobconfig = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_jobconfig_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_jobconfig(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Request.DataCollectionJob)
  return target;
}

size_t DataCollectionJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Request.DataCollectionJob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Request.JobConfig jobconfig = 1;
  total_size += 1UL * this->_internal_jobconfig_size();
  for (const auto& msg : this->jobconfig_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCollectionJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Request.DataCollectionJob)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCollectionJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataCollectionJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Request.DataCollectionJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Request.DataCollectionJob)
    MergeFrom(*source);
  }
}

void DataCollectionJob::MergeFrom(const DataCollectionJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Request.DataCollectionJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  jobconfig_.MergeFrom(from.jobconfig_);
}

void DataCollectionJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Request.DataCollectionJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCollectionJob::CopyFrom(const DataCollectionJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Request.DataCollectionJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCollectionJob::IsInitialized() const {
  return true;
}

void DataCollectionJob::InternalSwap(DataCollectionJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  jobconfig_.InternalSwap(&other->jobconfig_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCollectionJob::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Request
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Request::NetworkSignal* Arena::CreateMaybeMessage< ::Request::NetworkSignal >(Arena* arena) {
  return Arena::CreateInternal< ::Request::NetworkSignal >(arena);
}
template<> PROTOBUF_NOINLINE ::Request::Collectd* Arena::CreateMaybeMessage< ::Request::Collectd >(Arena* arena) {
  return Arena::CreateInternal< ::Request::Collectd >(arena);
}
template<> PROTOBUF_NOINLINE ::Request::TaskInfo* Arena::CreateMaybeMessage< ::Request::TaskInfo >(Arena* arena) {
  return Arena::CreateInternal< ::Request::TaskInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::Request::JobConfig* Arena::CreateMaybeMessage< ::Request::JobConfig >(Arena* arena) {
  return Arena::CreateInternal< ::Request::JobConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::Request::DataCollectionJob* Arena::CreateMaybeMessage< ::Request::DataCollectionJob >(Arena* arena) {
  return Arena::CreateInternal< ::Request::DataCollectionJob >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
