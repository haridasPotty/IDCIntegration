// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_5ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_5ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_5ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_5ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5ftypes_2eproto;
namespace request_format {
namespace data_types {
class AggregatedData;
class AggregatedDataDefaultTypeInternal;
extern AggregatedDataDefaultTypeInternal _AggregatedData_default_instance_;
class AggregatedMetaData;
class AggregatedMetaDataDefaultTypeInternal;
extern AggregatedMetaDataDefaultTypeInternal _AggregatedMetaData_default_instance_;
class BasicArray;
class BasicArrayDefaultTypeInternal;
extern BasicArrayDefaultTypeInternal _BasicArray_default_instance_;
class BasicValue;
class BasicValueDefaultTypeInternal;
extern BasicValueDefaultTypeInternal _BasicValue_default_instance_;
class KeyValueArray;
class KeyValueArrayDefaultTypeInternal;
extern KeyValueArrayDefaultTypeInternal _KeyValueArray_default_instance_;
class KeyValuePair;
class KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class MetaData;
class MetaDataDefaultTypeInternal;
extern MetaDataDefaultTypeInternal _MetaData_default_instance_;
class ThriftmeMetaData;
class ThriftmeMetaDataDefaultTypeInternal;
extern ThriftmeMetaDataDefaultTypeInternal _ThriftmeMetaData_default_instance_;
}  // namespace data_types
}  // namespace request_format
PROTOBUF_NAMESPACE_OPEN
template<> ::request_format::data_types::AggregatedData* Arena::CreateMaybeMessage<::request_format::data_types::AggregatedData>(Arena*);
template<> ::request_format::data_types::AggregatedMetaData* Arena::CreateMaybeMessage<::request_format::data_types::AggregatedMetaData>(Arena*);
template<> ::request_format::data_types::BasicArray* Arena::CreateMaybeMessage<::request_format::data_types::BasicArray>(Arena*);
template<> ::request_format::data_types::BasicValue* Arena::CreateMaybeMessage<::request_format::data_types::BasicValue>(Arena*);
template<> ::request_format::data_types::KeyValueArray* Arena::CreateMaybeMessage<::request_format::data_types::KeyValueArray>(Arena*);
template<> ::request_format::data_types::KeyValuePair* Arena::CreateMaybeMessage<::request_format::data_types::KeyValuePair>(Arena*);
template<> ::request_format::data_types::MetaData* Arena::CreateMaybeMessage<::request_format::data_types::MetaData>(Arena*);
template<> ::request_format::data_types::ThriftmeMetaData* Arena::CreateMaybeMessage<::request_format::data_types::ThriftmeMetaData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace request_format {
namespace data_types {

// ===================================================================

class KeyValuePair :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_format.data_types.KeyValuePair) */ {
 public:
  KeyValuePair();
  virtual ~KeyValuePair();

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValuePair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const final {
    return CreateMaybeMessage<KeyValuePair>(nullptr);
  }

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_format.data_types.KeyValuePair";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5ftypes_2eproto);
    return ::descriptor_table_data_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:request_format.data_types.KeyValuePair)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class BasicValue :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_format.data_types.BasicValue) */ {
 public:
  BasicValue();
  virtual ~BasicValue();

  BasicValue(const BasicValue& from);
  BasicValue(BasicValue&& from) noexcept
    : BasicValue() {
    *this = ::std::move(from);
  }

  inline BasicValue& operator=(const BasicValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicValue& operator=(BasicValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicValue& default_instance();

  enum DataFieldValueCase {
    kDoubleValue = 1,
    kFloatValue = 2,
    kInt32Value = 3,
    kInt64Value = 4,
    kUint32Value = 5,
    kUint64Value = 6,
    kSint32Value = 7,
    kSint64Value = 8,
    kFixed32Value = 9,
    kFixed64Value = 10,
    kSfixed32Value = 11,
    kSfixed64Value = 12,
    kBoolValue = 13,
    kStringValue = 14,
    kBytesValue = 15,
    DATA_FIELD_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicValue* internal_default_instance() {
    return reinterpret_cast<const BasicValue*>(
               &_BasicValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BasicValue& a, BasicValue& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicValue* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicValue* New() const final {
    return CreateMaybeMessage<BasicValue>(nullptr);
  }

  BasicValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicValue& from);
  void MergeFrom(const BasicValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_format.data_types.BasicValue";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5ftypes_2eproto);
    return ::descriptor_table_data_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDoubleValueFieldNumber = 1,
    kFloatValueFieldNumber = 2,
    kInt32ValueFieldNumber = 3,
    kInt64ValueFieldNumber = 4,
    kUint32ValueFieldNumber = 5,
    kUint64ValueFieldNumber = 6,
    kSint32ValueFieldNumber = 7,
    kSint64ValueFieldNumber = 8,
    kFixed32ValueFieldNumber = 9,
    kFixed64ValueFieldNumber = 10,
    kSfixed32ValueFieldNumber = 11,
    kSfixed64ValueFieldNumber = 12,
    kBoolValueFieldNumber = 13,
    kStringValueFieldNumber = 14,
    kBytesValueFieldNumber = 15,
  };
  // double double_value = 1;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // float float_value = 2;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // int32 int32_value = 3;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 int32_value() const;
  void set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_int32_value() const;
  void _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 int64_value = 4;
  private:
  bool _internal_has_int64_value() const;
  public:
  void clear_int64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 int64_value() const;
  void set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_int64_value() const;
  void _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 uint32_value = 5;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value() const;
  void set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint32_value() const;
  void _internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint64 uint64_value = 6;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value() const;
  void set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_uint64_value() const;
  void _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sint32 sint32_value = 7;
  private:
  bool _internal_has_sint32_value() const;
  public:
  void clear_sint32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 sint32_value() const;
  void set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sint32_value() const;
  void _internal_set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sint64 sint64_value = 8;
  private:
  bool _internal_has_sint64_value() const;
  public:
  void clear_sint64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sint64_value() const;
  void set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sint64_value() const;
  void _internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // fixed32 fixed32_value = 9;
  private:
  bool _internal_has_fixed32_value() const;
  public:
  void clear_fixed32_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value() const;
  void set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_fixed32_value() const;
  void _internal_set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // fixed64 fixed64_value = 10;
  private:
  bool _internal_has_fixed64_value() const;
  public:
  void clear_fixed64_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value() const;
  void set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_fixed64_value() const;
  void _internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // sfixed32 sfixed32_value = 11;
  private:
  bool _internal_has_sfixed32_value() const;
  public:
  void clear_sfixed32_value();
  ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value() const;
  void set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sfixed32_value() const;
  void _internal_set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // sfixed64 sfixed64_value = 12;
  private:
  bool _internal_has_sfixed64_value() const;
  public:
  void clear_sfixed64_value();
  ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value() const;
  void set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_sfixed64_value() const;
  void _internal_set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool bool_value = 13;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // string string_value = 14;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  void set_string_value(const std::string& value);
  void set_string_value(std::string&& value);
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  std::string* mutable_string_value();
  std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes bytes_value = 15;
  private:
  bool _internal_has_bytes_value() const;
  public:
  void clear_bytes_value();
  const std::string& bytes_value() const;
  void set_bytes_value(const std::string& value);
  void set_bytes_value(std::string&& value);
  void set_bytes_value(const char* value);
  void set_bytes_value(const void* value, size_t size);
  std::string* mutable_bytes_value();
  std::string* release_bytes_value();
  void set_allocated_bytes_value(std::string* bytes_value);
  private:
  const std::string& _internal_bytes_value() const;
  void _internal_set_bytes_value(const std::string& value);
  std::string* _internal_mutable_bytes_value();
  public:

  void clear_data_field_value();
  DataFieldValueCase data_field_value_case() const;
  // @@protoc_insertion_point(class_scope:request_format.data_types.BasicValue)
 private:
  class _Internal;
  void set_has_double_value();
  void set_has_float_value();
  void set_has_int32_value();
  void set_has_int64_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_sint32_value();
  void set_has_sint64_value();
  void set_has_fixed32_value();
  void set_has_fixed64_value();
  void set_has_sfixed32_value();
  void set_has_sfixed64_value();
  void set_has_bool_value();
  void set_has_string_value();
  void set_has_bytes_value();

  inline bool has_data_field_value() const;
  inline void clear_has_data_field_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union DataFieldValueUnion {
    DataFieldValueUnion() {}
    double double_value_;
    float float_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 int32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 int64_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 uint32_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 uint64_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 sint32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 sint64_value_;
    ::PROTOBUF_NAMESPACE_ID::uint32 fixed32_value_;
    ::PROTOBUF_NAMESPACE_ID::uint64 fixed64_value_;
    ::PROTOBUF_NAMESPACE_ID::int32 sfixed32_value_;
    ::PROTOBUF_NAMESPACE_ID::int64 sfixed64_value_;
    bool bool_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_value_;
  } data_field_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_data_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class BasicArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_format.data_types.BasicArray) */ {
 public:
  BasicArray();
  virtual ~BasicArray();

  BasicArray(const BasicArray& from);
  BasicArray(BasicArray&& from) noexcept
    : BasicArray() {
    *this = ::std::move(from);
  }

  inline BasicArray& operator=(const BasicArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicArray& operator=(BasicArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicArray* internal_default_instance() {
    return reinterpret_cast<const BasicArray*>(
               &_BasicArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BasicArray& a, BasicArray& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicArray* New() const final {
    return CreateMaybeMessage<BasicArray>(nullptr);
  }

  BasicArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicArray& from);
  void MergeFrom(const BasicArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_format.data_types.BasicArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5ftypes_2eproto);
    return ::descriptor_table_data_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated .request_format.data_types.BasicValue arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  ::request_format::data_types::BasicValue* mutable_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::BasicValue >*
      mutable_arr();
  private:
  const ::request_format::data_types::BasicValue& _internal_arr(int index) const;
  ::request_format::data_types::BasicValue* _internal_add_arr();
  public:
  const ::request_format::data_types::BasicValue& arr(int index) const;
  ::request_format::data_types::BasicValue* add_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::BasicValue >&
      arr() const;

  // @@protoc_insertion_point(class_scope:request_format.data_types.BasicArray)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::BasicValue > arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class KeyValueArray :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_format.data_types.KeyValueArray) */ {
 public:
  KeyValueArray();
  virtual ~KeyValueArray();

  KeyValueArray(const KeyValueArray& from);
  KeyValueArray(KeyValueArray&& from) noexcept
    : KeyValueArray() {
    *this = ::std::move(from);
  }

  inline KeyValueArray& operator=(const KeyValueArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValueArray& operator=(KeyValueArray&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValueArray& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyValueArray* internal_default_instance() {
    return reinterpret_cast<const KeyValueArray*>(
               &_KeyValueArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(KeyValueArray& a, KeyValueArray& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValueArray* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValueArray* New() const final {
    return CreateMaybeMessage<KeyValueArray>(nullptr);
  }

  KeyValueArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValueArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValueArray& from);
  void MergeFrom(const KeyValueArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValueArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_format.data_types.KeyValueArray";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5ftypes_2eproto);
    return ::descriptor_table_data_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrFieldNumber = 1,
  };
  // repeated .request_format.data_types.KeyValuePair arr = 1;
  int arr_size() const;
  private:
  int _internal_arr_size() const;
  public:
  void clear_arr();
  ::request_format::data_types::KeyValuePair* mutable_arr(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::KeyValuePair >*
      mutable_arr();
  private:
  const ::request_format::data_types::KeyValuePair& _internal_arr(int index) const;
  ::request_format::data_types::KeyValuePair* _internal_add_arr();
  public:
  const ::request_format::data_types::KeyValuePair& arr(int index) const;
  ::request_format::data_types::KeyValuePair* add_arr();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::KeyValuePair >&
      arr() const;

  // @@protoc_insertion_point(class_scope:request_format.data_types.KeyValueArray)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::KeyValuePair > arr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AggregatedMetaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_format.data_types.AggregatedMetaData) */ {
 public:
  AggregatedMetaData();
  virtual ~AggregatedMetaData();

  AggregatedMetaData(const AggregatedMetaData& from);
  AggregatedMetaData(AggregatedMetaData&& from) noexcept
    : AggregatedMetaData() {
    *this = ::std::move(from);
  }

  inline AggregatedMetaData& operator=(const AggregatedMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatedMetaData& operator=(AggregatedMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregatedMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregatedMetaData* internal_default_instance() {
    return reinterpret_cast<const AggregatedMetaData*>(
               &_AggregatedMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AggregatedMetaData& a, AggregatedMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatedMetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregatedMetaData* New() const final {
    return CreateMaybeMessage<AggregatedMetaData>(nullptr);
  }

  AggregatedMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregatedMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregatedMetaData& from);
  void MergeFrom(const AggregatedMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregatedMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_format.data_types.AggregatedMetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5ftypes_2eproto);
    return ::descriptor_table_data_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentFieldNumber = 4,
    kStartTimestampFieldNumber = 1,
    kEndTimestampFieldNumber = 2,
    kNumDatapointsFieldNumber = 3,
  };
  // string comment = 4;
  void clear_comment();
  const std::string& comment() const;
  void set_comment(const std::string& value);
  void set_comment(std::string&& value);
  void set_comment(const char* value);
  void set_comment(const char* value, size_t size);
  std::string* mutable_comment();
  std::string* release_comment();
  void set_allocated_comment(std::string* comment);
  private:
  const std::string& _internal_comment() const;
  void _internal_set_comment(const std::string& value);
  std::string* _internal_mutable_comment();
  public:

  // int32 start_timestamp = 1;
  void clear_start_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 start_timestamp() const;
  void set_start_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_start_timestamp() const;
  void _internal_set_start_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 end_timestamp = 2;
  void clear_end_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int32 end_timestamp() const;
  void set_end_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_end_timestamp() const;
  void _internal_set_end_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint64 num_datapoints = 3;
  void clear_num_datapoints();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_datapoints() const;
  void set_num_datapoints(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_num_datapoints() const;
  void _internal_set_num_datapoints(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:request_format.data_types.AggregatedMetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comment_;
  ::PROTOBUF_NAMESPACE_ID::int32 start_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int32 end_timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_datapoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class AggregatedData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_format.data_types.AggregatedData) */ {
 public:
  AggregatedData();
  virtual ~AggregatedData();

  AggregatedData(const AggregatedData& from);
  AggregatedData(AggregatedData&& from) noexcept
    : AggregatedData() {
    *this = ::std::move(from);
  }

  inline AggregatedData& operator=(const AggregatedData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggregatedData& operator=(AggregatedData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AggregatedData& default_instance();

  enum DataValueCase {
    kValueScalar = 1,
    kValueArr = 2,
    kValuePair = 3,
    kValuePairArr = 4,
    DATA_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AggregatedData* internal_default_instance() {
    return reinterpret_cast<const AggregatedData*>(
               &_AggregatedData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AggregatedData& a, AggregatedData& b) {
    a.Swap(&b);
  }
  inline void Swap(AggregatedData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AggregatedData* New() const final {
    return CreateMaybeMessage<AggregatedData>(nullptr);
  }

  AggregatedData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AggregatedData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AggregatedData& from);
  void MergeFrom(const AggregatedData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggregatedData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_format.data_types.AggregatedData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5ftypes_2eproto);
    return ::descriptor_table_data_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueScalarFieldNumber = 1,
    kValueArrFieldNumber = 2,
    kValuePairFieldNumber = 3,
    kValuePairArrFieldNumber = 4,
  };
  // .request_format.data_types.BasicValue value_scalar = 1;
  bool has_value_scalar() const;
  private:
  bool _internal_has_value_scalar() const;
  public:
  void clear_value_scalar();
  const ::request_format::data_types::BasicValue& value_scalar() const;
  ::request_format::data_types::BasicValue* release_value_scalar();
  ::request_format::data_types::BasicValue* mutable_value_scalar();
  void set_allocated_value_scalar(::request_format::data_types::BasicValue* value_scalar);
  private:
  const ::request_format::data_types::BasicValue& _internal_value_scalar() const;
  ::request_format::data_types::BasicValue* _internal_mutable_value_scalar();
  public:

  // .request_format.data_types.BasicArray value_arr = 2;
  bool has_value_arr() const;
  private:
  bool _internal_has_value_arr() const;
  public:
  void clear_value_arr();
  const ::request_format::data_types::BasicArray& value_arr() const;
  ::request_format::data_types::BasicArray* release_value_arr();
  ::request_format::data_types::BasicArray* mutable_value_arr();
  void set_allocated_value_arr(::request_format::data_types::BasicArray* value_arr);
  private:
  const ::request_format::data_types::BasicArray& _internal_value_arr() const;
  ::request_format::data_types::BasicArray* _internal_mutable_value_arr();
  public:

  // .request_format.data_types.KeyValuePair value_pair = 3;
  bool has_value_pair() const;
  private:
  bool _internal_has_value_pair() const;
  public:
  void clear_value_pair();
  const ::request_format::data_types::KeyValuePair& value_pair() const;
  ::request_format::data_types::KeyValuePair* release_value_pair();
  ::request_format::data_types::KeyValuePair* mutable_value_pair();
  void set_allocated_value_pair(::request_format::data_types::KeyValuePair* value_pair);
  private:
  const ::request_format::data_types::KeyValuePair& _internal_value_pair() const;
  ::request_format::data_types::KeyValuePair* _internal_mutable_value_pair();
  public:

  // .request_format.data_types.KeyValueArray value_pair_arr = 4;
  bool has_value_pair_arr() const;
  private:
  bool _internal_has_value_pair_arr() const;
  public:
  void clear_value_pair_arr();
  const ::request_format::data_types::KeyValueArray& value_pair_arr() const;
  ::request_format::data_types::KeyValueArray* release_value_pair_arr();
  ::request_format::data_types::KeyValueArray* mutable_value_pair_arr();
  void set_allocated_value_pair_arr(::request_format::data_types::KeyValueArray* value_pair_arr);
  private:
  const ::request_format::data_types::KeyValueArray& _internal_value_pair_arr() const;
  ::request_format::data_types::KeyValueArray* _internal_mutable_value_pair_arr();
  public:

  void clear_data_value();
  DataValueCase data_value_case() const;
  // @@protoc_insertion_point(class_scope:request_format.data_types.AggregatedData)
 private:
  class _Internal;
  void set_has_value_scalar();
  void set_has_value_arr();
  void set_has_value_pair();
  void set_has_value_pair_arr();

  inline bool has_data_value() const;
  inline void clear_has_data_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union DataValueUnion {
    DataValueUnion() {}
    ::request_format::data_types::BasicValue* value_scalar_;
    ::request_format::data_types::BasicArray* value_arr_;
    ::request_format::data_types::KeyValuePair* value_pair_;
    ::request_format::data_types::KeyValueArray* value_pair_arr_;
  } data_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_data_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class ThriftmeMetaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_format.data_types.ThriftmeMetaData) */ {
 public:
  ThriftmeMetaData();
  virtual ~ThriftmeMetaData();

  ThriftmeMetaData(const ThriftmeMetaData& from);
  ThriftmeMetaData(ThriftmeMetaData&& from) noexcept
    : ThriftmeMetaData() {
    *this = ::std::move(from);
  }

  inline ThriftmeMetaData& operator=(const ThriftmeMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThriftmeMetaData& operator=(ThriftmeMetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ThriftmeMetaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThriftmeMetaData* internal_default_instance() {
    return reinterpret_cast<const ThriftmeMetaData*>(
               &_ThriftmeMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ThriftmeMetaData& a, ThriftmeMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(ThriftmeMetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ThriftmeMetaData* New() const final {
    return CreateMaybeMessage<ThriftmeMetaData>(nullptr);
  }

  ThriftmeMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ThriftmeMetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ThriftmeMetaData& from);
  void MergeFrom(const ThriftmeMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThriftmeMetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_format.data_types.ThriftmeMetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5ftypes_2eproto);
    return ::descriptor_table_data_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
    kServiceIdFieldNumber = 2,
    kSequenceIdFieldNumber = 3,
  };
  // repeated string uri = 1;
  int uri_size() const;
  private:
  int _internal_uri_size() const;
  public:
  void clear_uri();
  const std::string& uri(int index) const;
  std::string* mutable_uri(int index);
  void set_uri(int index, const std::string& value);
  void set_uri(int index, std::string&& value);
  void set_uri(int index, const char* value);
  void set_uri(int index, const char* value, size_t size);
  std::string* add_uri();
  void add_uri(const std::string& value);
  void add_uri(std::string&& value);
  void add_uri(const char* value);
  void add_uri(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& uri() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_uri();
  private:
  const std::string& _internal_uri(int index) const;
  std::string* _internal_add_uri();
  public:

  // uint32 service_id = 2;
  void clear_service_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id() const;
  void set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_service_id() const;
  void _internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 sequence_id = 3;
  void clear_sequence_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_id() const;
  void set_sequence_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence_id() const;
  void _internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:request_format.data_types.ThriftmeMetaData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> uri_;
  ::PROTOBUF_NAMESPACE_ID::uint32 service_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_5ftypes_2eproto;
};
// -------------------------------------------------------------------

class MetaData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:request_format.data_types.MetaData) */ {
 public:
  MetaData();
  virtual ~MetaData();

  MetaData(const MetaData& from);
  MetaData(MetaData&& from) noexcept
    : MetaData() {
    *this = ::std::move(from);
  }

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MetaData& operator=(MetaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MetaData& default_instance();

  enum MetadataValueCase {
    kThriftmeMetadata = 1,
    kAggregatedMetadata = 2,
    METADATA_VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MetaData* internal_default_instance() {
    return reinterpret_cast<const MetaData*>(
               &_MetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MetaData& a, MetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(MetaData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MetaData* New() const final {
    return CreateMaybeMessage<MetaData>(nullptr);
  }

  MetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MetaData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MetaData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "request_format.data_types.MetaData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_data_5ftypes_2eproto);
    return ::descriptor_table_data_5ftypes_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThriftmeMetadataFieldNumber = 1,
    kAggregatedMetadataFieldNumber = 2,
  };
  // .request_format.data_types.ThriftmeMetaData thriftme_metadata = 1;
  bool has_thriftme_metadata() const;
  private:
  bool _internal_has_thriftme_metadata() const;
  public:
  void clear_thriftme_metadata();
  const ::request_format::data_types::ThriftmeMetaData& thriftme_metadata() const;
  ::request_format::data_types::ThriftmeMetaData* release_thriftme_metadata();
  ::request_format::data_types::ThriftmeMetaData* mutable_thriftme_metadata();
  void set_allocated_thriftme_metadata(::request_format::data_types::ThriftmeMetaData* thriftme_metadata);
  private:
  const ::request_format::data_types::ThriftmeMetaData& _internal_thriftme_metadata() const;
  ::request_format::data_types::ThriftmeMetaData* _internal_mutable_thriftme_metadata();
  public:

  // .request_format.data_types.AggregatedMetaData aggregated_metadata = 2;
  bool has_aggregated_metadata() const;
  private:
  bool _internal_has_aggregated_metadata() const;
  public:
  void clear_aggregated_metadata();
  const ::request_format::data_types::AggregatedMetaData& aggregated_metadata() const;
  ::request_format::data_types::AggregatedMetaData* release_aggregated_metadata();
  ::request_format::data_types::AggregatedMetaData* mutable_aggregated_metadata();
  void set_allocated_aggregated_metadata(::request_format::data_types::AggregatedMetaData* aggregated_metadata);
  private:
  const ::request_format::data_types::AggregatedMetaData& _internal_aggregated_metadata() const;
  ::request_format::data_types::AggregatedMetaData* _internal_mutable_aggregated_metadata();
  public:

  void clear_metadata_value();
  MetadataValueCase metadata_value_case() const;
  // @@protoc_insertion_point(class_scope:request_format.data_types.MetaData)
 private:
  class _Internal;
  void set_has_thriftme_metadata();
  void set_has_aggregated_metadata();

  inline bool has_metadata_value() const;
  inline void clear_has_metadata_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union MetadataValueUnion {
    MetadataValueUnion() {}
    ::request_format::data_types::ThriftmeMetaData* thriftme_metadata_;
    ::request_format::data_types::AggregatedMetaData* aggregated_metadata_;
  } metadata_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_data_5ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyValuePair

// string key = 1;
inline void KeyValuePair::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.KeyValuePair.key)
  return _internal_key();
}
inline void KeyValuePair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.KeyValuePair.key)
}
inline std::string* KeyValuePair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.KeyValuePair.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValuePair::_internal_key() const {
  return key_.GetNoArena();
}
inline void KeyValuePair::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyValuePair::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_format.data_types.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_format.data_types.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_format.data_types.KeyValuePair.key)
}
inline std::string* KeyValuePair::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:request_format.data_types.KeyValuePair.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:request_format.data_types.KeyValuePair.key)
}

// string value = 2;
inline void KeyValuePair::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.KeyValuePair.value)
  return _internal_value();
}
inline void KeyValuePair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.KeyValuePair.value)
}
inline std::string* KeyValuePair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.KeyValuePair.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValuePair::_internal_value() const {
  return value_.GetNoArena();
}
inline void KeyValuePair::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void KeyValuePair::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_format.data_types.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_format.data_types.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_format.data_types.KeyValuePair.value)
}
inline std::string* KeyValuePair::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:request_format.data_types.KeyValuePair.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:request_format.data_types.KeyValuePair.value)
}

// -------------------------------------------------------------------

// BasicValue

// double double_value = 1;
inline bool BasicValue::_internal_has_double_value() const {
  return data_field_value_case() == kDoubleValue;
}
inline void BasicValue::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void BasicValue::clear_double_value() {
  if (_internal_has_double_value()) {
    data_field_value_.double_value_ = 0;
    clear_has_data_field_value();
  }
}
inline double BasicValue::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return data_field_value_.double_value_;
  }
  return 0;
}
inline void BasicValue::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_data_field_value();
    set_has_double_value();
  }
  data_field_value_.double_value_ = value;
}
inline double BasicValue::double_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.double_value)
  return _internal_double_value();
}
inline void BasicValue::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.double_value)
}

// float float_value = 2;
inline bool BasicValue::_internal_has_float_value() const {
  return data_field_value_case() == kFloatValue;
}
inline void BasicValue::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void BasicValue::clear_float_value() {
  if (_internal_has_float_value()) {
    data_field_value_.float_value_ = 0;
    clear_has_data_field_value();
  }
}
inline float BasicValue::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return data_field_value_.float_value_;
  }
  return 0;
}
inline void BasicValue::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_data_field_value();
    set_has_float_value();
  }
  data_field_value_.float_value_ = value;
}
inline float BasicValue::float_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.float_value)
  return _internal_float_value();
}
inline void BasicValue::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.float_value)
}

// int32 int32_value = 3;
inline bool BasicValue::_internal_has_int32_value() const {
  return data_field_value_case() == kInt32Value;
}
inline void BasicValue::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void BasicValue::clear_int32_value() {
  if (_internal_has_int32_value()) {
    data_field_value_.int32_value_ = 0;
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicValue::_internal_int32_value() const {
  if (_internal_has_int32_value()) {
    return data_field_value_.int32_value_;
  }
  return 0;
}
inline void BasicValue::_internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_int32_value()) {
    clear_data_field_value();
    set_has_int32_value();
  }
  data_field_value_.int32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicValue::int32_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.int32_value)
  return _internal_int32_value();
}
inline void BasicValue::set_int32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.int32_value)
}

// int64 int64_value = 4;
inline bool BasicValue::_internal_has_int64_value() const {
  return data_field_value_case() == kInt64Value;
}
inline void BasicValue::set_has_int64_value() {
  _oneof_case_[0] = kInt64Value;
}
inline void BasicValue::clear_int64_value() {
  if (_internal_has_int64_value()) {
    data_field_value_.int64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicValue::_internal_int64_value() const {
  if (_internal_has_int64_value()) {
    return data_field_value_.int64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void BasicValue::_internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_int64_value()) {
    clear_data_field_value();
    set_has_int64_value();
  }
  data_field_value_.int64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicValue::int64_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.int64_value)
  return _internal_int64_value();
}
inline void BasicValue::set_int64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_int64_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.int64_value)
}

// uint32 uint32_value = 5;
inline bool BasicValue::_internal_has_uint32_value() const {
  return data_field_value_case() == kUint32Value;
}
inline void BasicValue::set_has_uint32_value() {
  _oneof_case_[0] = kUint32Value;
}
inline void BasicValue::clear_uint32_value() {
  if (_internal_has_uint32_value()) {
    data_field_value_.uint32_value_ = 0u;
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BasicValue::_internal_uint32_value() const {
  if (_internal_has_uint32_value()) {
    return data_field_value_.uint32_value_;
  }
  return 0u;
}
inline void BasicValue::_internal_set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_uint32_value()) {
    clear_data_field_value();
    set_has_uint32_value();
  }
  data_field_value_.uint32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BasicValue::uint32_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.uint32_value)
  return _internal_uint32_value();
}
inline void BasicValue::set_uint32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.uint32_value)
}

// uint64 uint64_value = 6;
inline bool BasicValue::_internal_has_uint64_value() const {
  return data_field_value_case() == kUint64Value;
}
inline void BasicValue::set_has_uint64_value() {
  _oneof_case_[0] = kUint64Value;
}
inline void BasicValue::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    data_field_value_.uint64_value_ = PROTOBUF_ULONGLONG(0);
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicValue::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return data_field_value_.uint64_value_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void BasicValue::_internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_uint64_value()) {
    clear_data_field_value();
    set_has_uint64_value();
  }
  data_field_value_.uint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicValue::uint64_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.uint64_value)
  return _internal_uint64_value();
}
inline void BasicValue::set_uint64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.uint64_value)
}

// sint32 sint32_value = 7;
inline bool BasicValue::_internal_has_sint32_value() const {
  return data_field_value_case() == kSint32Value;
}
inline void BasicValue::set_has_sint32_value() {
  _oneof_case_[0] = kSint32Value;
}
inline void BasicValue::clear_sint32_value() {
  if (_internal_has_sint32_value()) {
    data_field_value_.sint32_value_ = 0;
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicValue::_internal_sint32_value() const {
  if (_internal_has_sint32_value()) {
    return data_field_value_.sint32_value_;
  }
  return 0;
}
inline void BasicValue::_internal_set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sint32_value()) {
    clear_data_field_value();
    set_has_sint32_value();
  }
  data_field_value_.sint32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicValue::sint32_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.sint32_value)
  return _internal_sint32_value();
}
inline void BasicValue::set_sint32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sint32_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.sint32_value)
}

// sint64 sint64_value = 8;
inline bool BasicValue::_internal_has_sint64_value() const {
  return data_field_value_case() == kSint64Value;
}
inline void BasicValue::set_has_sint64_value() {
  _oneof_case_[0] = kSint64Value;
}
inline void BasicValue::clear_sint64_value() {
  if (_internal_has_sint64_value()) {
    data_field_value_.sint64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicValue::_internal_sint64_value() const {
  if (_internal_has_sint64_value()) {
    return data_field_value_.sint64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void BasicValue::_internal_set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sint64_value()) {
    clear_data_field_value();
    set_has_sint64_value();
  }
  data_field_value_.sint64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicValue::sint64_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.sint64_value)
  return _internal_sint64_value();
}
inline void BasicValue::set_sint64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sint64_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.sint64_value)
}

// fixed32 fixed32_value = 9;
inline bool BasicValue::_internal_has_fixed32_value() const {
  return data_field_value_case() == kFixed32Value;
}
inline void BasicValue::set_has_fixed32_value() {
  _oneof_case_[0] = kFixed32Value;
}
inline void BasicValue::clear_fixed32_value() {
  if (_internal_has_fixed32_value()) {
    data_field_value_.fixed32_value_ = 0u;
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BasicValue::_internal_fixed32_value() const {
  if (_internal_has_fixed32_value()) {
    return data_field_value_.fixed32_value_;
  }
  return 0u;
}
inline void BasicValue::_internal_set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_fixed32_value()) {
    clear_data_field_value();
    set_has_fixed32_value();
  }
  data_field_value_.fixed32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BasicValue::fixed32_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.fixed32_value)
  return _internal_fixed32_value();
}
inline void BasicValue::set_fixed32_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_fixed32_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.fixed32_value)
}

// fixed64 fixed64_value = 10;
inline bool BasicValue::_internal_has_fixed64_value() const {
  return data_field_value_case() == kFixed64Value;
}
inline void BasicValue::set_has_fixed64_value() {
  _oneof_case_[0] = kFixed64Value;
}
inline void BasicValue::clear_fixed64_value() {
  if (_internal_has_fixed64_value()) {
    data_field_value_.fixed64_value_ = PROTOBUF_ULONGLONG(0);
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicValue::_internal_fixed64_value() const {
  if (_internal_has_fixed64_value()) {
    return data_field_value_.fixed64_value_;
  }
  return PROTOBUF_ULONGLONG(0);
}
inline void BasicValue::_internal_set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  if (!_internal_has_fixed64_value()) {
    clear_data_field_value();
    set_has_fixed64_value();
  }
  data_field_value_.fixed64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BasicValue::fixed64_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.fixed64_value)
  return _internal_fixed64_value();
}
inline void BasicValue::set_fixed64_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_fixed64_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.fixed64_value)
}

// sfixed32 sfixed32_value = 11;
inline bool BasicValue::_internal_has_sfixed32_value() const {
  return data_field_value_case() == kSfixed32Value;
}
inline void BasicValue::set_has_sfixed32_value() {
  _oneof_case_[0] = kSfixed32Value;
}
inline void BasicValue::clear_sfixed32_value() {
  if (_internal_has_sfixed32_value()) {
    data_field_value_.sfixed32_value_ = 0;
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicValue::_internal_sfixed32_value() const {
  if (_internal_has_sfixed32_value()) {
    return data_field_value_.sfixed32_value_;
  }
  return 0;
}
inline void BasicValue::_internal_set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_sfixed32_value()) {
    clear_data_field_value();
    set_has_sfixed32_value();
  }
  data_field_value_.sfixed32_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicValue::sfixed32_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.sfixed32_value)
  return _internal_sfixed32_value();
}
inline void BasicValue::set_sfixed32_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sfixed32_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.sfixed32_value)
}

// sfixed64 sfixed64_value = 12;
inline bool BasicValue::_internal_has_sfixed64_value() const {
  return data_field_value_case() == kSfixed64Value;
}
inline void BasicValue::set_has_sfixed64_value() {
  _oneof_case_[0] = kSfixed64Value;
}
inline void BasicValue::clear_sfixed64_value() {
  if (_internal_has_sfixed64_value()) {
    data_field_value_.sfixed64_value_ = PROTOBUF_LONGLONG(0);
    clear_has_data_field_value();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicValue::_internal_sfixed64_value() const {
  if (_internal_has_sfixed64_value()) {
    return data_field_value_.sfixed64_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void BasicValue::_internal_set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_sfixed64_value()) {
    clear_data_field_value();
    set_has_sfixed64_value();
  }
  data_field_value_.sfixed64_value_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BasicValue::sfixed64_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.sfixed64_value)
  return _internal_sfixed64_value();
}
inline void BasicValue::set_sfixed64_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_sfixed64_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.sfixed64_value)
}

// bool bool_value = 13;
inline bool BasicValue::_internal_has_bool_value() const {
  return data_field_value_case() == kBoolValue;
}
inline void BasicValue::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void BasicValue::clear_bool_value() {
  if (_internal_has_bool_value()) {
    data_field_value_.bool_value_ = false;
    clear_has_data_field_value();
  }
}
inline bool BasicValue::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return data_field_value_.bool_value_;
  }
  return false;
}
inline void BasicValue::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_data_field_value();
    set_has_bool_value();
  }
  data_field_value_.bool_value_ = value;
}
inline bool BasicValue::bool_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.bool_value)
  return _internal_bool_value();
}
inline void BasicValue::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.bool_value)
}

// string string_value = 14;
inline bool BasicValue::_internal_has_string_value() const {
  return data_field_value_case() == kStringValue;
}
inline void BasicValue::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void BasicValue::clear_string_value() {
  if (_internal_has_string_value()) {
    data_field_value_.string_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data_field_value();
  }
}
inline const std::string& BasicValue::string_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.string_value)
  return _internal_string_value();
}
inline void BasicValue::set_string_value(const std::string& value) {
  _internal_set_string_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.string_value)
}
inline std::string* BasicValue::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.BasicValue.string_value)
  return _internal_mutable_string_value();
}
inline const std::string& BasicValue::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return data_field_value_.string_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BasicValue::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_data_field_value();
    set_has_string_value();
    data_field_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_field_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicValue::set_string_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.string_value)
  if (!_internal_has_string_value()) {
    clear_data_field_value();
    set_has_string_value();
    data_field_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_field_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_format.data_types.BasicValue.string_value)
}
inline void BasicValue::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string_value()) {
    clear_data_field_value();
    set_has_string_value();
    data_field_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_field_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_format.data_types.BasicValue.string_value)
}
inline void BasicValue::set_string_value(const char* value, size_t size) {
  if (!_internal_has_string_value()) {
    clear_data_field_value();
    set_has_string_value();
    data_field_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_field_value_.string_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_format.data_types.BasicValue.string_value)
}
inline std::string* BasicValue::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_data_field_value();
    set_has_string_value();
    data_field_value_.string_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_field_value_.string_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicValue::release_string_value() {
  // @@protoc_insertion_point(field_release:request_format.data_types.BasicValue.string_value)
  if (_internal_has_string_value()) {
    clear_has_data_field_value();
    return data_field_value_.string_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void BasicValue::set_allocated_string_value(std::string* string_value) {
  if (has_data_field_value()) {
    clear_data_field_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    data_field_value_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:request_format.data_types.BasicValue.string_value)
}

// bytes bytes_value = 15;
inline bool BasicValue::_internal_has_bytes_value() const {
  return data_field_value_case() == kBytesValue;
}
inline void BasicValue::set_has_bytes_value() {
  _oneof_case_[0] = kBytesValue;
}
inline void BasicValue::clear_bytes_value() {
  if (_internal_has_bytes_value()) {
    data_field_value_.bytes_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_data_field_value();
  }
}
inline const std::string& BasicValue::bytes_value() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicValue.bytes_value)
  return _internal_bytes_value();
}
inline void BasicValue::set_bytes_value(const std::string& value) {
  _internal_set_bytes_value(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.bytes_value)
}
inline std::string* BasicValue::mutable_bytes_value() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.BasicValue.bytes_value)
  return _internal_mutable_bytes_value();
}
inline const std::string& BasicValue::_internal_bytes_value() const {
  if (_internal_has_bytes_value()) {
    return data_field_value_.bytes_value_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BasicValue::_internal_set_bytes_value(const std::string& value) {
  if (!_internal_has_bytes_value()) {
    clear_data_field_value();
    set_has_bytes_value();
    data_field_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_field_value_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicValue::set_bytes_value(std::string&& value) {
  // @@protoc_insertion_point(field_set:request_format.data_types.BasicValue.bytes_value)
  if (!_internal_has_bytes_value()) {
    clear_data_field_value();
    set_has_bytes_value();
    data_field_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_field_value_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_format.data_types.BasicValue.bytes_value)
}
inline void BasicValue::set_bytes_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_bytes_value()) {
    clear_data_field_value();
    set_has_bytes_value();
    data_field_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_field_value_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_format.data_types.BasicValue.bytes_value)
}
inline void BasicValue::set_bytes_value(const void* value, size_t size) {
  if (!_internal_has_bytes_value()) {
    clear_data_field_value();
    set_has_bytes_value();
    data_field_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_field_value_.bytes_value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_format.data_types.BasicValue.bytes_value)
}
inline std::string* BasicValue::_internal_mutable_bytes_value() {
  if (!_internal_has_bytes_value()) {
    clear_data_field_value();
    set_has_bytes_value();
    data_field_value_.bytes_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_field_value_.bytes_value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicValue::release_bytes_value() {
  // @@protoc_insertion_point(field_release:request_format.data_types.BasicValue.bytes_value)
  if (_internal_has_bytes_value()) {
    clear_has_data_field_value();
    return data_field_value_.bytes_value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void BasicValue::set_allocated_bytes_value(std::string* bytes_value) {
  if (has_data_field_value()) {
    clear_data_field_value();
  }
  if (bytes_value != nullptr) {
    set_has_bytes_value();
    data_field_value_.bytes_value_.UnsafeSetDefault(bytes_value);
  }
  // @@protoc_insertion_point(field_set_allocated:request_format.data_types.BasicValue.bytes_value)
}

inline bool BasicValue::has_data_field_value() const {
  return data_field_value_case() != DATA_FIELD_VALUE_NOT_SET;
}
inline void BasicValue::clear_has_data_field_value() {
  _oneof_case_[0] = DATA_FIELD_VALUE_NOT_SET;
}
inline BasicValue::DataFieldValueCase BasicValue::data_field_value_case() const {
  return BasicValue::DataFieldValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BasicArray

// repeated .request_format.data_types.BasicValue arr = 1;
inline int BasicArray::_internal_arr_size() const {
  return arr_.size();
}
inline int BasicArray::arr_size() const {
  return _internal_arr_size();
}
inline void BasicArray::clear_arr() {
  arr_.Clear();
}
inline ::request_format::data_types::BasicValue* BasicArray::mutable_arr(int index) {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.BasicArray.arr)
  return arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::BasicValue >*
BasicArray::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:request_format.data_types.BasicArray.arr)
  return &arr_;
}
inline const ::request_format::data_types::BasicValue& BasicArray::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline const ::request_format::data_types::BasicValue& BasicArray::arr(int index) const {
  // @@protoc_insertion_point(field_get:request_format.data_types.BasicArray.arr)
  return _internal_arr(index);
}
inline ::request_format::data_types::BasicValue* BasicArray::_internal_add_arr() {
  return arr_.Add();
}
inline ::request_format::data_types::BasicValue* BasicArray::add_arr() {
  // @@protoc_insertion_point(field_add:request_format.data_types.BasicArray.arr)
  return _internal_add_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::BasicValue >&
BasicArray::arr() const {
  // @@protoc_insertion_point(field_list:request_format.data_types.BasicArray.arr)
  return arr_;
}

// -------------------------------------------------------------------

// KeyValueArray

// repeated .request_format.data_types.KeyValuePair arr = 1;
inline int KeyValueArray::_internal_arr_size() const {
  return arr_.size();
}
inline int KeyValueArray::arr_size() const {
  return _internal_arr_size();
}
inline void KeyValueArray::clear_arr() {
  arr_.Clear();
}
inline ::request_format::data_types::KeyValuePair* KeyValueArray::mutable_arr(int index) {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.KeyValueArray.arr)
  return arr_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::KeyValuePair >*
KeyValueArray::mutable_arr() {
  // @@protoc_insertion_point(field_mutable_list:request_format.data_types.KeyValueArray.arr)
  return &arr_;
}
inline const ::request_format::data_types::KeyValuePair& KeyValueArray::_internal_arr(int index) const {
  return arr_.Get(index);
}
inline const ::request_format::data_types::KeyValuePair& KeyValueArray::arr(int index) const {
  // @@protoc_insertion_point(field_get:request_format.data_types.KeyValueArray.arr)
  return _internal_arr(index);
}
inline ::request_format::data_types::KeyValuePair* KeyValueArray::_internal_add_arr() {
  return arr_.Add();
}
inline ::request_format::data_types::KeyValuePair* KeyValueArray::add_arr() {
  // @@protoc_insertion_point(field_add:request_format.data_types.KeyValueArray.arr)
  return _internal_add_arr();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::request_format::data_types::KeyValuePair >&
KeyValueArray::arr() const {
  // @@protoc_insertion_point(field_list:request_format.data_types.KeyValueArray.arr)
  return arr_;
}

// -------------------------------------------------------------------

// AggregatedMetaData

// int32 start_timestamp = 1;
inline void AggregatedMetaData::clear_start_timestamp() {
  start_timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedMetaData::_internal_start_timestamp() const {
  return start_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedMetaData::start_timestamp() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.AggregatedMetaData.start_timestamp)
  return _internal_start_timestamp();
}
inline void AggregatedMetaData::_internal_set_start_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  start_timestamp_ = value;
}
inline void AggregatedMetaData::set_start_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_start_timestamp(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.AggregatedMetaData.start_timestamp)
}

// int32 end_timestamp = 2;
inline void AggregatedMetaData::clear_end_timestamp() {
  end_timestamp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedMetaData::_internal_end_timestamp() const {
  return end_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AggregatedMetaData::end_timestamp() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.AggregatedMetaData.end_timestamp)
  return _internal_end_timestamp();
}
inline void AggregatedMetaData::_internal_set_end_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  end_timestamp_ = value;
}
inline void AggregatedMetaData::set_end_timestamp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_end_timestamp(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.AggregatedMetaData.end_timestamp)
}

// uint64 num_datapoints = 3;
inline void AggregatedMetaData::clear_num_datapoints() {
  num_datapoints_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AggregatedMetaData::_internal_num_datapoints() const {
  return num_datapoints_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AggregatedMetaData::num_datapoints() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.AggregatedMetaData.num_datapoints)
  return _internal_num_datapoints();
}
inline void AggregatedMetaData::_internal_set_num_datapoints(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_datapoints_ = value;
}
inline void AggregatedMetaData::set_num_datapoints(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_num_datapoints(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.AggregatedMetaData.num_datapoints)
}

// string comment = 4;
inline void AggregatedMetaData::clear_comment() {
  comment_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AggregatedMetaData::comment() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.AggregatedMetaData.comment)
  return _internal_comment();
}
inline void AggregatedMetaData::set_comment(const std::string& value) {
  _internal_set_comment(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.AggregatedMetaData.comment)
}
inline std::string* AggregatedMetaData::mutable_comment() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.AggregatedMetaData.comment)
  return _internal_mutable_comment();
}
inline const std::string& AggregatedMetaData::_internal_comment() const {
  return comment_.GetNoArena();
}
inline void AggregatedMetaData::_internal_set_comment(const std::string& value) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AggregatedMetaData::set_comment(std::string&& value) {
  
  comment_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:request_format.data_types.AggregatedMetaData.comment)
}
inline void AggregatedMetaData::set_comment(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:request_format.data_types.AggregatedMetaData.comment)
}
inline void AggregatedMetaData::set_comment(const char* value, size_t size) {
  
  comment_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:request_format.data_types.AggregatedMetaData.comment)
}
inline std::string* AggregatedMetaData::_internal_mutable_comment() {
  
  return comment_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AggregatedMetaData::release_comment() {
  // @@protoc_insertion_point(field_release:request_format.data_types.AggregatedMetaData.comment)
  
  return comment_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AggregatedMetaData::set_allocated_comment(std::string* comment) {
  if (comment != nullptr) {
    
  } else {
    
  }
  comment_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comment);
  // @@protoc_insertion_point(field_set_allocated:request_format.data_types.AggregatedMetaData.comment)
}

// -------------------------------------------------------------------

// AggregatedData

// .request_format.data_types.BasicValue value_scalar = 1;
inline bool AggregatedData::_internal_has_value_scalar() const {
  return data_value_case() == kValueScalar;
}
inline bool AggregatedData::has_value_scalar() const {
  return _internal_has_value_scalar();
}
inline void AggregatedData::set_has_value_scalar() {
  _oneof_case_[0] = kValueScalar;
}
inline void AggregatedData::clear_value_scalar() {
  if (_internal_has_value_scalar()) {
    delete data_value_.value_scalar_;
    clear_has_data_value();
  }
}
inline ::request_format::data_types::BasicValue* AggregatedData::release_value_scalar() {
  // @@protoc_insertion_point(field_release:request_format.data_types.AggregatedData.value_scalar)
  if (_internal_has_value_scalar()) {
    clear_has_data_value();
      ::request_format::data_types::BasicValue* temp = data_value_.value_scalar_;
    data_value_.value_scalar_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request_format::data_types::BasicValue& AggregatedData::_internal_value_scalar() const {
  return _internal_has_value_scalar()
      ? *data_value_.value_scalar_
      : *reinterpret_cast< ::request_format::data_types::BasicValue*>(&::request_format::data_types::_BasicValue_default_instance_);
}
inline const ::request_format::data_types::BasicValue& AggregatedData::value_scalar() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.AggregatedData.value_scalar)
  return _internal_value_scalar();
}
inline ::request_format::data_types::BasicValue* AggregatedData::_internal_mutable_value_scalar() {
  if (!_internal_has_value_scalar()) {
    clear_data_value();
    set_has_value_scalar();
    data_value_.value_scalar_ = CreateMaybeMessage< ::request_format::data_types::BasicValue >(
        GetArenaNoVirtual());
  }
  return data_value_.value_scalar_;
}
inline ::request_format::data_types::BasicValue* AggregatedData::mutable_value_scalar() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.AggregatedData.value_scalar)
  return _internal_mutable_value_scalar();
}

// .request_format.data_types.BasicArray value_arr = 2;
inline bool AggregatedData::_internal_has_value_arr() const {
  return data_value_case() == kValueArr;
}
inline bool AggregatedData::has_value_arr() const {
  return _internal_has_value_arr();
}
inline void AggregatedData::set_has_value_arr() {
  _oneof_case_[0] = kValueArr;
}
inline void AggregatedData::clear_value_arr() {
  if (_internal_has_value_arr()) {
    delete data_value_.value_arr_;
    clear_has_data_value();
  }
}
inline ::request_format::data_types::BasicArray* AggregatedData::release_value_arr() {
  // @@protoc_insertion_point(field_release:request_format.data_types.AggregatedData.value_arr)
  if (_internal_has_value_arr()) {
    clear_has_data_value();
      ::request_format::data_types::BasicArray* temp = data_value_.value_arr_;
    data_value_.value_arr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request_format::data_types::BasicArray& AggregatedData::_internal_value_arr() const {
  return _internal_has_value_arr()
      ? *data_value_.value_arr_
      : *reinterpret_cast< ::request_format::data_types::BasicArray*>(&::request_format::data_types::_BasicArray_default_instance_);
}
inline const ::request_format::data_types::BasicArray& AggregatedData::value_arr() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.AggregatedData.value_arr)
  return _internal_value_arr();
}
inline ::request_format::data_types::BasicArray* AggregatedData::_internal_mutable_value_arr() {
  if (!_internal_has_value_arr()) {
    clear_data_value();
    set_has_value_arr();
    data_value_.value_arr_ = CreateMaybeMessage< ::request_format::data_types::BasicArray >(
        GetArenaNoVirtual());
  }
  return data_value_.value_arr_;
}
inline ::request_format::data_types::BasicArray* AggregatedData::mutable_value_arr() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.AggregatedData.value_arr)
  return _internal_mutable_value_arr();
}

// .request_format.data_types.KeyValuePair value_pair = 3;
inline bool AggregatedData::_internal_has_value_pair() const {
  return data_value_case() == kValuePair;
}
inline bool AggregatedData::has_value_pair() const {
  return _internal_has_value_pair();
}
inline void AggregatedData::set_has_value_pair() {
  _oneof_case_[0] = kValuePair;
}
inline void AggregatedData::clear_value_pair() {
  if (_internal_has_value_pair()) {
    delete data_value_.value_pair_;
    clear_has_data_value();
  }
}
inline ::request_format::data_types::KeyValuePair* AggregatedData::release_value_pair() {
  // @@protoc_insertion_point(field_release:request_format.data_types.AggregatedData.value_pair)
  if (_internal_has_value_pair()) {
    clear_has_data_value();
      ::request_format::data_types::KeyValuePair* temp = data_value_.value_pair_;
    data_value_.value_pair_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request_format::data_types::KeyValuePair& AggregatedData::_internal_value_pair() const {
  return _internal_has_value_pair()
      ? *data_value_.value_pair_
      : *reinterpret_cast< ::request_format::data_types::KeyValuePair*>(&::request_format::data_types::_KeyValuePair_default_instance_);
}
inline const ::request_format::data_types::KeyValuePair& AggregatedData::value_pair() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.AggregatedData.value_pair)
  return _internal_value_pair();
}
inline ::request_format::data_types::KeyValuePair* AggregatedData::_internal_mutable_value_pair() {
  if (!_internal_has_value_pair()) {
    clear_data_value();
    set_has_value_pair();
    data_value_.value_pair_ = CreateMaybeMessage< ::request_format::data_types::KeyValuePair >(
        GetArenaNoVirtual());
  }
  return data_value_.value_pair_;
}
inline ::request_format::data_types::KeyValuePair* AggregatedData::mutable_value_pair() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.AggregatedData.value_pair)
  return _internal_mutable_value_pair();
}

// .request_format.data_types.KeyValueArray value_pair_arr = 4;
inline bool AggregatedData::_internal_has_value_pair_arr() const {
  return data_value_case() == kValuePairArr;
}
inline bool AggregatedData::has_value_pair_arr() const {
  return _internal_has_value_pair_arr();
}
inline void AggregatedData::set_has_value_pair_arr() {
  _oneof_case_[0] = kValuePairArr;
}
inline void AggregatedData::clear_value_pair_arr() {
  if (_internal_has_value_pair_arr()) {
    delete data_value_.value_pair_arr_;
    clear_has_data_value();
  }
}
inline ::request_format::data_types::KeyValueArray* AggregatedData::release_value_pair_arr() {
  // @@protoc_insertion_point(field_release:request_format.data_types.AggregatedData.value_pair_arr)
  if (_internal_has_value_pair_arr()) {
    clear_has_data_value();
      ::request_format::data_types::KeyValueArray* temp = data_value_.value_pair_arr_;
    data_value_.value_pair_arr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request_format::data_types::KeyValueArray& AggregatedData::_internal_value_pair_arr() const {
  return _internal_has_value_pair_arr()
      ? *data_value_.value_pair_arr_
      : *reinterpret_cast< ::request_format::data_types::KeyValueArray*>(&::request_format::data_types::_KeyValueArray_default_instance_);
}
inline const ::request_format::data_types::KeyValueArray& AggregatedData::value_pair_arr() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.AggregatedData.value_pair_arr)
  return _internal_value_pair_arr();
}
inline ::request_format::data_types::KeyValueArray* AggregatedData::_internal_mutable_value_pair_arr() {
  if (!_internal_has_value_pair_arr()) {
    clear_data_value();
    set_has_value_pair_arr();
    data_value_.value_pair_arr_ = CreateMaybeMessage< ::request_format::data_types::KeyValueArray >(
        GetArenaNoVirtual());
  }
  return data_value_.value_pair_arr_;
}
inline ::request_format::data_types::KeyValueArray* AggregatedData::mutable_value_pair_arr() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.AggregatedData.value_pair_arr)
  return _internal_mutable_value_pair_arr();
}

inline bool AggregatedData::has_data_value() const {
  return data_value_case() != DATA_VALUE_NOT_SET;
}
inline void AggregatedData::clear_has_data_value() {
  _oneof_case_[0] = DATA_VALUE_NOT_SET;
}
inline AggregatedData::DataValueCase AggregatedData::data_value_case() const {
  return AggregatedData::DataValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ThriftmeMetaData

// repeated string uri = 1;
inline int ThriftmeMetaData::_internal_uri_size() const {
  return uri_.size();
}
inline int ThriftmeMetaData::uri_size() const {
  return _internal_uri_size();
}
inline void ThriftmeMetaData::clear_uri() {
  uri_.Clear();
}
inline std::string* ThriftmeMetaData::add_uri() {
  // @@protoc_insertion_point(field_add_mutable:request_format.data_types.ThriftmeMetaData.uri)
  return _internal_add_uri();
}
inline const std::string& ThriftmeMetaData::_internal_uri(int index) const {
  return uri_.Get(index);
}
inline const std::string& ThriftmeMetaData::uri(int index) const {
  // @@protoc_insertion_point(field_get:request_format.data_types.ThriftmeMetaData.uri)
  return _internal_uri(index);
}
inline std::string* ThriftmeMetaData::mutable_uri(int index) {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.ThriftmeMetaData.uri)
  return uri_.Mutable(index);
}
inline void ThriftmeMetaData::set_uri(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:request_format.data_types.ThriftmeMetaData.uri)
  uri_.Mutable(index)->assign(value);
}
inline void ThriftmeMetaData::set_uri(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:request_format.data_types.ThriftmeMetaData.uri)
  uri_.Mutable(index)->assign(std::move(value));
}
inline void ThriftmeMetaData::set_uri(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uri_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:request_format.data_types.ThriftmeMetaData.uri)
}
inline void ThriftmeMetaData::set_uri(int index, const char* value, size_t size) {
  uri_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:request_format.data_types.ThriftmeMetaData.uri)
}
inline std::string* ThriftmeMetaData::_internal_add_uri() {
  return uri_.Add();
}
inline void ThriftmeMetaData::add_uri(const std::string& value) {
  uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:request_format.data_types.ThriftmeMetaData.uri)
}
inline void ThriftmeMetaData::add_uri(std::string&& value) {
  uri_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:request_format.data_types.ThriftmeMetaData.uri)
}
inline void ThriftmeMetaData::add_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  uri_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:request_format.data_types.ThriftmeMetaData.uri)
}
inline void ThriftmeMetaData::add_uri(const char* value, size_t size) {
  uri_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:request_format.data_types.ThriftmeMetaData.uri)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ThriftmeMetaData::uri() const {
  // @@protoc_insertion_point(field_list:request_format.data_types.ThriftmeMetaData.uri)
  return uri_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ThriftmeMetaData::mutable_uri() {
  // @@protoc_insertion_point(field_mutable_list:request_format.data_types.ThriftmeMetaData.uri)
  return &uri_;
}

// uint32 service_id = 2;
inline void ThriftmeMetaData::clear_service_id() {
  service_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThriftmeMetaData::_internal_service_id() const {
  return service_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ThriftmeMetaData::service_id() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.ThriftmeMetaData.service_id)
  return _internal_service_id();
}
inline void ThriftmeMetaData::_internal_set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  service_id_ = value;
}
inline void ThriftmeMetaData::set_service_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_service_id(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.ThriftmeMetaData.service_id)
}

// int32 sequence_id = 3;
inline void ThriftmeMetaData::clear_sequence_id() {
  sequence_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeMetaData::_internal_sequence_id() const {
  return sequence_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ThriftmeMetaData::sequence_id() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.ThriftmeMetaData.sequence_id)
  return _internal_sequence_id();
}
inline void ThriftmeMetaData::_internal_set_sequence_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_id_ = value;
}
inline void ThriftmeMetaData::set_sequence_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence_id(value);
  // @@protoc_insertion_point(field_set:request_format.data_types.ThriftmeMetaData.sequence_id)
}

// -------------------------------------------------------------------

// MetaData

// .request_format.data_types.ThriftmeMetaData thriftme_metadata = 1;
inline bool MetaData::_internal_has_thriftme_metadata() const {
  return metadata_value_case() == kThriftmeMetadata;
}
inline bool MetaData::has_thriftme_metadata() const {
  return _internal_has_thriftme_metadata();
}
inline void MetaData::set_has_thriftme_metadata() {
  _oneof_case_[0] = kThriftmeMetadata;
}
inline void MetaData::clear_thriftme_metadata() {
  if (_internal_has_thriftme_metadata()) {
    delete metadata_value_.thriftme_metadata_;
    clear_has_metadata_value();
  }
}
inline ::request_format::data_types::ThriftmeMetaData* MetaData::release_thriftme_metadata() {
  // @@protoc_insertion_point(field_release:request_format.data_types.MetaData.thriftme_metadata)
  if (_internal_has_thriftme_metadata()) {
    clear_has_metadata_value();
      ::request_format::data_types::ThriftmeMetaData* temp = metadata_value_.thriftme_metadata_;
    metadata_value_.thriftme_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request_format::data_types::ThriftmeMetaData& MetaData::_internal_thriftme_metadata() const {
  return _internal_has_thriftme_metadata()
      ? *metadata_value_.thriftme_metadata_
      : *reinterpret_cast< ::request_format::data_types::ThriftmeMetaData*>(&::request_format::data_types::_ThriftmeMetaData_default_instance_);
}
inline const ::request_format::data_types::ThriftmeMetaData& MetaData::thriftme_metadata() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.MetaData.thriftme_metadata)
  return _internal_thriftme_metadata();
}
inline ::request_format::data_types::ThriftmeMetaData* MetaData::_internal_mutable_thriftme_metadata() {
  if (!_internal_has_thriftme_metadata()) {
    clear_metadata_value();
    set_has_thriftme_metadata();
    metadata_value_.thriftme_metadata_ = CreateMaybeMessage< ::request_format::data_types::ThriftmeMetaData >(
        GetArenaNoVirtual());
  }
  return metadata_value_.thriftme_metadata_;
}
inline ::request_format::data_types::ThriftmeMetaData* MetaData::mutable_thriftme_metadata() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.MetaData.thriftme_metadata)
  return _internal_mutable_thriftme_metadata();
}

// .request_format.data_types.AggregatedMetaData aggregated_metadata = 2;
inline bool MetaData::_internal_has_aggregated_metadata() const {
  return metadata_value_case() == kAggregatedMetadata;
}
inline bool MetaData::has_aggregated_metadata() const {
  return _internal_has_aggregated_metadata();
}
inline void MetaData::set_has_aggregated_metadata() {
  _oneof_case_[0] = kAggregatedMetadata;
}
inline void MetaData::clear_aggregated_metadata() {
  if (_internal_has_aggregated_metadata()) {
    delete metadata_value_.aggregated_metadata_;
    clear_has_metadata_value();
  }
}
inline ::request_format::data_types::AggregatedMetaData* MetaData::release_aggregated_metadata() {
  // @@protoc_insertion_point(field_release:request_format.data_types.MetaData.aggregated_metadata)
  if (_internal_has_aggregated_metadata()) {
    clear_has_metadata_value();
      ::request_format::data_types::AggregatedMetaData* temp = metadata_value_.aggregated_metadata_;
    metadata_value_.aggregated_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::request_format::data_types::AggregatedMetaData& MetaData::_internal_aggregated_metadata() const {
  return _internal_has_aggregated_metadata()
      ? *metadata_value_.aggregated_metadata_
      : *reinterpret_cast< ::request_format::data_types::AggregatedMetaData*>(&::request_format::data_types::_AggregatedMetaData_default_instance_);
}
inline const ::request_format::data_types::AggregatedMetaData& MetaData::aggregated_metadata() const {
  // @@protoc_insertion_point(field_get:request_format.data_types.MetaData.aggregated_metadata)
  return _internal_aggregated_metadata();
}
inline ::request_format::data_types::AggregatedMetaData* MetaData::_internal_mutable_aggregated_metadata() {
  if (!_internal_has_aggregated_metadata()) {
    clear_metadata_value();
    set_has_aggregated_metadata();
    metadata_value_.aggregated_metadata_ = CreateMaybeMessage< ::request_format::data_types::AggregatedMetaData >(
        GetArenaNoVirtual());
  }
  return metadata_value_.aggregated_metadata_;
}
inline ::request_format::data_types::AggregatedMetaData* MetaData::mutable_aggregated_metadata() {
  // @@protoc_insertion_point(field_mutable:request_format.data_types.MetaData.aggregated_metadata)
  return _internal_mutable_aggregated_metadata();
}

inline bool MetaData::has_metadata_value() const {
  return metadata_value_case() != METADATA_VALUE_NOT_SET;
}
inline void MetaData::clear_has_metadata_value() {
  _oneof_case_[0] = METADATA_VALUE_NOT_SET;
}
inline MetaData::MetadataValueCase MetaData::metadata_value_case() const {
  return MetaData::MetadataValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace data_types
}  // namespace request_format

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_5ftypes_2eproto
