// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data_collection_configuration_request.proto

#include "data_collection_configuration_request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbsoluteTimeOffset_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectAfterTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CollectionAction_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectionExtents_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CollectionTask_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CompositeTimeRange_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_DataCollectionJob_JobConfig_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPackageTimeToLive_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataRecordingGap_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DatapointsConfiguration_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistanceDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPointUncertainty_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoAction_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoCircle_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoCorridor_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoRectangle_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoRegionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_JobTerminationConditions_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_JobValidityRestrictions_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListOfSNA_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapRestriction_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapRestriction_FunctionalRoadClassRange_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapRestriction_RoadAttribute_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawValueFilter_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RvidEffectivePeriod_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_SignalChangeTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalCollectionCount_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignalTransitionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartUpDelay_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemStates_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimestampInterval_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Trigger_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TriggerAnnotationID_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uint32Range_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValueInterval_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValueRange_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5fcollection_5fconfiguration_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_data_5fcollection_5fconfiguration_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logical_5fexpression_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogicalExpression_logical_5fexpression_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_data_5ftypes_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_data_5ftypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CanSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectdSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DefaultSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EELSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EthernetSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InternalSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LinSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_NetworkSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessingToolboxSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ThriftmeSource_signal_5fsource_5fdefinition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_signal_5fsource_5fdefinition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ThriftmeSourceActive_signal_5fsource_5fdefinition_2eproto;
namespace data_collection_configuration_request {
class VersionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Version> _instance;
} _Version_default_instance_;
class CollectionExtentsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionExtents> _instance;
} _CollectionExtents_default_instance_;
class TimestampIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimestampInterval> _instance;
} _TimestampInterval_default_instance_;
class Uint32RangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Uint32Range> _instance;
} _Uint32Range_default_instance_;
class GeoLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoLocation> _instance;
} _GeoLocation_default_instance_;
class GeoRectangleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoRectangle> _instance;
} _GeoRectangle_default_instance_;
class GeoCircleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoCircle> _instance;
} _GeoCircle_default_instance_;
class GeoPolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoPolygon> _instance;
} _GeoPolygon_default_instance_;
class GeoCorridorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoCorridor> _instance;
} _GeoCorridor_default_instance_;
class CompositeTimeRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompositeTimeRange> _instance;
} _CompositeTimeRange_default_instance_;
class CompositeLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompositeLocation> _instance;
} _CompositeLocation_default_instance_;
class MapRestriction_RoadAttributeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapRestriction_RoadAttribute> _instance;
} _MapRestriction_RoadAttribute_default_instance_;
class MapRestriction_FunctionalRoadClassRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapRestriction_FunctionalRoadClassRange> _instance;
} _MapRestriction_FunctionalRoadClassRange_default_instance_;
class MapRestrictionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MapRestriction> _instance;
} _MapRestriction_default_instance_;
class SystemStatesDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SystemStates> _instance;
} _SystemStates_default_instance_;
class JobValidityRestrictionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobValidityRestrictions> _instance;
} _JobValidityRestrictions_default_instance_;
class JobTerminationConditionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JobTerminationConditions> _instance;
} _JobTerminationConditions_default_instance_;
class TimeDeltaTriggerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimeDeltaTriggerEvent> _instance;
} _TimeDeltaTriggerEvent_default_instance_;
class DistanceDeltaTriggerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DistanceDeltaTriggerEvent> _instance;
} _DistanceDeltaTriggerEvent_default_instance_;
class SignalChangeTriggerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalChangeTriggerEvent> _instance;
  const ::signal_source_definition::DefaultSource* default_signal_;
  const ::signal_source_definition::CanSource* can_signal_;
  const ::signal_source_definition::LinSource* lin_signal_;
  const ::signal_source_definition::EthernetSource* ethernet_signal_;
  const ::signal_source_definition::NetworkSource* network_signal_;
  const ::signal_source_definition::InternalSource* internal_signal_;
  const ::signal_source_definition::ProcessingToolboxSource* processing_toolbox_signal_;
  const ::signal_source_definition::ThriftmeSource* thriftme_signal_;
} _SignalChangeTriggerEvent_default_instance_;
class SignalTransitionTriggerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalTransitionTriggerEvent> _instance;
} _SignalTransitionTriggerEvent_default_instance_;
class SignalCollectionCountDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SignalCollectionCount> _instance;
} _SignalCollectionCount_default_instance_;
class GeoRegionTriggerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoRegionTriggerEvent> _instance;
} _GeoRegionTriggerEvent_default_instance_;
class CollectAfterTriggerEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectAfterTriggerEvent> _instance;
} _CollectAfterTriggerEvent_default_instance_;
class GeoActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GeoAction> _instance;
} _GeoAction_default_instance_;
class KeyValuePairDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<KeyValuePair> _instance;
} _KeyValuePair_default_instance_;
class TriggerAnnotationIDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TriggerAnnotationID> _instance;
} _TriggerAnnotationID_default_instance_;
class TriggerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Trigger> _instance;
  const ::data_collection_configuration_request::TimeDeltaTriggerEvent* time_delta_trigger_event_;
  const ::data_collection_configuration_request::DistanceDeltaTriggerEvent* distance_delta_trigger_event_;
  const ::data_collection_configuration_request::SignalChangeTriggerEvent* signal_change_trigger_event_;
  const ::data_collection_configuration_request::SignalTransitionTriggerEvent* signal_transition_trigger_event_;
  const ::data_collection_configuration_request::GeoRegionTriggerEvent* geo_region_trigger_event_;
  const ::data_collection_configuration_request::SignalCollectionCount* count_;
  bool signal_collection_native_frequency_;
  const ::data_collection_configuration_request::CollectAfterTriggerEvent* collect_after_trigger_event_;
} _Trigger_default_instance_;
class CollectionActionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionAction> _instance;
} _CollectionAction_default_instance_;
class StartUpDelayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartUpDelay> _instance;
} _StartUpDelay_default_instance_;
class EndPointUncertaintyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EndPointUncertainty> _instance;
} _EndPointUncertainty_default_instance_;
class DataRecordingGapDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataRecordingGap> _instance;
} _DataRecordingGap_default_instance_;
class AbsoluteTimeOffsetDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AbsoluteTimeOffset> _instance;
} _AbsoluteTimeOffset_default_instance_;
class CollectionTaskDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CollectionTask> _instance;
} _CollectionTask_default_instance_;
class ListOfSNADefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListOfSNA> _instance;
} _ListOfSNA_default_instance_;
class RawValueFilterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RawValueFilter> _instance;
} _RawValueFilter_default_instance_;
class ValueRangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValueRange> _instance;
  double less_than_equal_to_;
  double greater_than_equal_to_;
  const ::data_collection_configuration_request::ValueInterval* value_interval_;
} _ValueRange_default_instance_;
class ValueIntervalDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ValueInterval> _instance;
} _ValueInterval_default_instance_;
class DatapointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Datapoint> _instance;
  const ::signal_source_definition::DefaultSource* default_signal_;
  const ::signal_source_definition::CanSource* can_signal_;
  const ::signal_source_definition::LinSource* lin_signal_;
  const ::signal_source_definition::EthernetSource* ethernet_signal_;
  const ::signal_source_definition::NetworkSource* network_signal_;
  const ::signal_source_definition::InternalSource* internal_signal_;
  const ::data_collection_configuration_request::Processing_Toolbox_Definition* processing_toolbox_signal_;
  const ::signal_source_definition::ThriftmeSource* thriftme_signal_;
  const ::signal_source_definition::CollectdSource* collectd_;
  const ::signal_source_definition::EELSource* eelsource_;
  const ::signal_source_definition::ThriftmeSourceActive* thriftme_active_;
} _Datapoint_default_instance_;
class Processing_Toolbox_DefinitionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Processing_Toolbox_Definition> _instance;
} _Processing_Toolbox_Definition_default_instance_;
class ToolInputParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ToolInputParameter> _instance;
} _ToolInputParameter_default_instance_;
class DatapointsConfigurationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DatapointsConfiguration> _instance;
} _DatapointsConfiguration_default_instance_;
class RvidEffectivePeriodDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RvidEffectivePeriod> _instance;
} _RvidEffectivePeriod_default_instance_;
class DataPackageTimeToLiveDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataPackageTimeToLive> _instance;
} _DataPackageTimeToLive_default_instance_;
class DataCollectionJob_JobConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCollectionJob_JobConfig> _instance;
} _DataCollectionJob_JobConfig_default_instance_;
class DataCollectionJobDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataCollectionJob> _instance;
} _DataCollectionJob_default_instance_;
}  // namespace data_collection_configuration_request
static void InitDefaultsscc_info_AbsoluteTimeOffset_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_AbsoluteTimeOffset_default_instance_;
    new (ptr) ::data_collection_configuration_request::AbsoluteTimeOffset();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::AbsoluteTimeOffset::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AbsoluteTimeOffset_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AbsoluteTimeOffset_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_CollectAfterTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_CollectAfterTriggerEvent_default_instance_;
    new (ptr) ::data_collection_configuration_request::CollectAfterTriggerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::CollectAfterTriggerEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CollectAfterTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CollectAfterTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_CollectionAction_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_CollectionAction_default_instance_;
    new (ptr) ::data_collection_configuration_request::CollectionAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::CollectionAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CollectionAction_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CollectionAction_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_CollectionTask_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_CollectionExtents_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_CollectionExtents_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_CollectionExtents_default_instance_;
    new (ptr) ::data_collection_configuration_request::CollectionExtents();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::CollectionExtents::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CollectionExtents_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CollectionExtents_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_Trigger_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_CollectionTask_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_CollectionTask_default_instance_;
    new (ptr) ::data_collection_configuration_request::CollectionTask();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::CollectionTask::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CollectionTask_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CollectionTask_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_DatapointsConfiguration_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_CompositeLocation_default_instance_;
    new (ptr) ::data_collection_configuration_request::CompositeLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::CompositeLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_GeoCircle_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_GeoRectangle_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_GeoPolygon_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_GeoCorridor_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_CompositeTimeRange_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_CompositeTimeRange_default_instance_;
    new (ptr) ::data_collection_configuration_request::CompositeTimeRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::CompositeTimeRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CompositeTimeRange_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CompositeTimeRange_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_TimestampInterval_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_Uint32Range_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_DataCollectionJob_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_DataCollectionJob_default_instance_;
    new (ptr) ::data_collection_configuration_request::DataCollectionJob();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::DataCollectionJob::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_DataCollectionJob_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_DataCollectionJob_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_DataCollectionJob_JobConfig_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_JobValidityRestrictions_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_CollectionAction_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_JobTerminationConditions_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_DataCollectionJob_JobConfig_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_DataCollectionJob_JobConfig_default_instance_;
    new (ptr) ::data_collection_configuration_request::DataCollectionJob_JobConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::DataCollectionJob_JobConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_DataCollectionJob_JobConfig_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_DataCollectionJob_JobConfig_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_RvidEffectivePeriod_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_StartUpDelay_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_EndPointUncertainty_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_DataRecordingGap_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_AbsoluteTimeOffset_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_Version_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_KeyValuePair_data_5ftypes_2eproto.base,
      &scc_info_DataPackageTimeToLive_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_DataPackageTimeToLive_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_DataPackageTimeToLive_default_instance_;
    new (ptr) ::data_collection_configuration_request::DataPackageTimeToLive();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::DataPackageTimeToLive::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataPackageTimeToLive_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataPackageTimeToLive_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_DataRecordingGap_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_DataRecordingGap_default_instance_;
    new (ptr) ::data_collection_configuration_request::DataRecordingGap();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::DataRecordingGap::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataRecordingGap_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataRecordingGap_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_Datapoint_default_instance_;
    new (ptr) ::data_collection_configuration_request::Datapoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::data_collection_configuration_request::_Processing_Toolbox_Definition_default_instance_;
    new (ptr) ::data_collection_configuration_request::Processing_Toolbox_Definition();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::data_collection_configuration_request::_ToolInputParameter_default_instance_;
    new (ptr) ::data_collection_configuration_request::ToolInputParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::Datapoint::InitAsDefaultInstance();
  ::data_collection_configuration_request::Processing_Toolbox_Definition::InitAsDefaultInstance();
  ::data_collection_configuration_request::ToolInputParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<14> scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 14, 0, InitDefaultsscc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_DefaultSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_CanSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_LinSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_EthernetSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_NetworkSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_InternalSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_ThriftmeSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_CollectdSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_EELSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_ThriftmeSourceActive_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_ListOfSNA_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_RawValueFilter_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_ProcessingToolboxSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_DatapointsConfiguration_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_DatapointsConfiguration_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_DatapointsConfiguration_default_instance_;
    new (ptr) ::data_collection_configuration_request::DatapointsConfiguration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::DatapointsConfiguration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DatapointsConfiguration_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DatapointsConfiguration_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_Trigger_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_DistanceDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_DistanceDeltaTriggerEvent_default_instance_;
    new (ptr) ::data_collection_configuration_request::DistanceDeltaTriggerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::DistanceDeltaTriggerEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DistanceDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DistanceDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_EndPointUncertainty_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_EndPointUncertainty_default_instance_;
    new (ptr) ::data_collection_configuration_request::EndPointUncertainty();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::EndPointUncertainty::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EndPointUncertainty_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EndPointUncertainty_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_GeoAction_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_GeoAction_default_instance_;
    new (ptr) ::data_collection_configuration_request::GeoAction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::GeoAction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoAction_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoAction_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_GeoCircle_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_GeoCircle_default_instance_;
    new (ptr) ::data_collection_configuration_request::GeoCircle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::GeoCircle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoCircle_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoCircle_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_GeoCorridor_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_GeoCorridor_default_instance_;
    new (ptr) ::data_collection_configuration_request::GeoCorridor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::GeoCorridor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoCorridor_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoCorridor_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_GeoLocation_default_instance_;
    new (ptr) ::data_collection_configuration_request::GeoLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::GeoLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_GeoPolygon_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_GeoPolygon_default_instance_;
    new (ptr) ::data_collection_configuration_request::GeoPolygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::GeoPolygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoPolygon_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoPolygon_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_GeoRectangle_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_GeoRectangle_default_instance_;
    new (ptr) ::data_collection_configuration_request::GeoRectangle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::GeoRectangle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GeoRectangle_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GeoRectangle_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_GeoRegionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_GeoRegionTriggerEvent_default_instance_;
    new (ptr) ::data_collection_configuration_request::GeoRegionTriggerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::GeoRegionTriggerEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GeoRegionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GeoRegionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_GeoAction_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_JobTerminationConditions_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_JobTerminationConditions_default_instance_;
    new (ptr) ::data_collection_configuration_request::JobTerminationConditions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::JobTerminationConditions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_JobTerminationConditions_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_JobTerminationConditions_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_CompositeTimeRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_LogicalExpression_logical_5fexpression_2eproto.base,
      &scc_info_CollectionExtents_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_JobValidityRestrictions_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_JobValidityRestrictions_default_instance_;
    new (ptr) ::data_collection_configuration_request::JobValidityRestrictions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::JobValidityRestrictions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_JobValidityRestrictions_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_JobValidityRestrictions_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_CompositeTimeRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_MapRestriction_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_SystemStates_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_KeyValuePair_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_KeyValuePair_default_instance_;
    new (ptr) ::data_collection_configuration_request::KeyValuePair();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::KeyValuePair::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyValuePair_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_KeyValuePair_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_ListOfSNA_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_ListOfSNA_default_instance_;
    new (ptr) ::data_collection_configuration_request::ListOfSNA();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::ListOfSNA::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListOfSNA_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListOfSNA_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_ValueRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_MapRestriction_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_MapRestriction_default_instance_;
    new (ptr) ::data_collection_configuration_request::MapRestriction();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::MapRestriction::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MapRestriction_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MapRestriction_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_MapRestriction_RoadAttribute_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_MapRestriction_FunctionalRoadClassRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_MapRestriction_FunctionalRoadClassRange_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_MapRestriction_FunctionalRoadClassRange_default_instance_;
    new (ptr) ::data_collection_configuration_request::MapRestriction_FunctionalRoadClassRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::MapRestriction_FunctionalRoadClassRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapRestriction_FunctionalRoadClassRange_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapRestriction_FunctionalRoadClassRange_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_MapRestriction_RoadAttribute_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_MapRestriction_RoadAttribute_default_instance_;
    new (ptr) ::data_collection_configuration_request::MapRestriction_RoadAttribute();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::MapRestriction_RoadAttribute::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MapRestriction_RoadAttribute_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MapRestriction_RoadAttribute_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_RawValueFilter_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_RawValueFilter_default_instance_;
    new (ptr) ::data_collection_configuration_request::RawValueFilter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::RawValueFilter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RawValueFilter_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RawValueFilter_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_ValueRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_RvidEffectivePeriod_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_RvidEffectivePeriod_default_instance_;
    new (ptr) ::data_collection_configuration_request::RvidEffectivePeriod();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::RvidEffectivePeriod::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RvidEffectivePeriod_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RvidEffectivePeriod_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_SignalChangeTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_;
    new (ptr) ::data_collection_configuration_request::SignalChangeTriggerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::SignalChangeTriggerEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_SignalChangeTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_SignalChangeTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_DefaultSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_CanSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_LinSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_EthernetSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_NetworkSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_InternalSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_ProcessingToolboxSource_signal_5fsource_5fdefinition_2eproto.base,
      &scc_info_ThriftmeSource_signal_5fsource_5fdefinition_2eproto.base,}};

static void InitDefaultsscc_info_SignalCollectionCount_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_SignalCollectionCount_default_instance_;
    new (ptr) ::data_collection_configuration_request::SignalCollectionCount();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::SignalCollectionCount::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SignalCollectionCount_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SignalCollectionCount_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_SignalTransitionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_SignalTransitionTriggerEvent_default_instance_;
    new (ptr) ::data_collection_configuration_request::SignalTransitionTriggerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::SignalTransitionTriggerEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SignalTransitionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SignalTransitionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_LogicalExpression_logical_5fexpression_2eproto.base,}};

static void InitDefaultsscc_info_StartUpDelay_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_StartUpDelay_default_instance_;
    new (ptr) ::data_collection_configuration_request::StartUpDelay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::StartUpDelay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartUpDelay_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartUpDelay_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_SystemStates_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_SystemStates_default_instance_;
    new (ptr) ::data_collection_configuration_request::SystemStates();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::SystemStates::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SystemStates_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SystemStates_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_TimeDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_TimeDeltaTriggerEvent_default_instance_;
    new (ptr) ::data_collection_configuration_request::TimeDeltaTriggerEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::TimeDeltaTriggerEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimeDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimeDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_TimestampInterval_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_TimestampInterval_default_instance_;
    new (ptr) ::data_collection_configuration_request::TimestampInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::TimestampInterval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TimestampInterval_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TimestampInterval_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_Trigger_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_Trigger_default_instance_;
    new (ptr) ::data_collection_configuration_request::Trigger();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::Trigger::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<8> scc_info_Trigger_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 8, 0, InitDefaultsscc_info_Trigger_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_TriggerAnnotationID_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_TimeDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_DistanceDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_SignalChangeTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_SignalTransitionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_GeoRegionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_SignalCollectionCount_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
      &scc_info_CollectAfterTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_TriggerAnnotationID_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_TriggerAnnotationID_default_instance_;
    new (ptr) ::data_collection_configuration_request::TriggerAnnotationID();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::TriggerAnnotationID::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TriggerAnnotationID_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TriggerAnnotationID_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_Uint32Range_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_Uint32Range_default_instance_;
    new (ptr) ::data_collection_configuration_request::Uint32Range();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::Uint32Range::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Uint32Range_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Uint32Range_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_ValueInterval_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_ValueInterval_default_instance_;
    new (ptr) ::data_collection_configuration_request::ValueInterval();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::ValueInterval::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ValueInterval_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ValueInterval_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static void InitDefaultsscc_info_ValueRange_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_ValueRange_default_instance_;
    new (ptr) ::data_collection_configuration_request::ValueRange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::ValueRange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ValueRange_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ValueRange_data_5fcollection_5fconfiguration_5frequest_2eproto}, {
      &scc_info_ValueInterval_data_5fcollection_5fconfiguration_5frequest_2eproto.base,}};

static void InitDefaultsscc_info_Version_data_5fcollection_5fconfiguration_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::data_collection_configuration_request::_Version_default_instance_;
    new (ptr) ::data_collection_configuration_request::Version();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::data_collection_configuration_request::Version::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Version_data_5fcollection_5fconfiguration_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Version_data_5fcollection_5fconfiguration_5frequest_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_data_5fcollection_5fconfiguration_5frequest_2eproto[46];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_data_5fcollection_5fconfiguration_5frequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Version, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Version, major_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Version, minor_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Version, patch_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Version, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionExtents, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionExtents, count_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionExtents, size_byte_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionExtents, path_length_m_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionExtents, path_duration_s_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionExtents, by_trigger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::TimestampInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Uint32Range, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Uint32Range, min_value_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Uint32Range, max_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoLocation, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoLocation, longitude_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoRectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoRectangle, top_left_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoRectangle, bottom_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoCircle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoCircle, center_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoCircle, radius_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoPolygon, points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoCorridor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoCorridor, center_line_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoCorridor, width_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CompositeTimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CompositeTimeRange, date_range_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CompositeTimeRange, weekday_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CompositeTimeRange, time_of_the_day_range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CompositeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CompositeLocation, geo_circles_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CompositeLocation, geo_rectangles_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CompositeLocation, geo_polygons_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CompositeLocation, geo_corridors_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction_RoadAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction_RoadAttribute, road_type_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction_RoadAttribute, road_type_operator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction_FunctionalRoadClassRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction_FunctionalRoadClassRange, min_value_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction_FunctionalRoadClassRange, max_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction, road_attribute_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction, functional_road_class_range_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction, whitelist_country_codes_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction, blacklist_country_codes_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::MapRestriction, ignore_if_not_supported_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SystemStates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SystemStates, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobValidityRestrictions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobValidityRestrictions, time_restrictions_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobValidityRestrictions, spatial_restrictions_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobValidityRestrictions, map_restrictions_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobValidityRestrictions, invalid_collection_states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobTerminationConditions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobTerminationConditions, time_conditions_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobTerminationConditions, spatial_conditions_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobTerminationConditions, signal_value_condition_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::JobTerminationConditions, extents_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::TimeDeltaTriggerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::TimeDeltaTriggerEvent, type_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::TimeDeltaTriggerEvent, time_delta_milliseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DistanceDeltaTriggerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DistanceDeltaTriggerEvent, distance_delta_meters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SignalChangeTriggerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SignalChangeTriggerEvent, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SignalChangeTriggerEvent, on_signal_change_),
  offsetof(::data_collection_configuration_request::SignalChangeTriggerEventDefaultTypeInternal, default_signal_),
  offsetof(::data_collection_configuration_request::SignalChangeTriggerEventDefaultTypeInternal, can_signal_),
  offsetof(::data_collection_configuration_request::SignalChangeTriggerEventDefaultTypeInternal, lin_signal_),
  offsetof(::data_collection_configuration_request::SignalChangeTriggerEventDefaultTypeInternal, ethernet_signal_),
  offsetof(::data_collection_configuration_request::SignalChangeTriggerEventDefaultTypeInternal, network_signal_),
  offsetof(::data_collection_configuration_request::SignalChangeTriggerEventDefaultTypeInternal, internal_signal_),
  offsetof(::data_collection_configuration_request::SignalChangeTriggerEventDefaultTypeInternal, processing_toolbox_signal_),
  offsetof(::data_collection_configuration_request::SignalChangeTriggerEventDefaultTypeInternal, thriftme_signal_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SignalChangeTriggerEvent, signal_definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SignalTransitionTriggerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SignalTransitionTriggerEvent, logical_expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SignalCollectionCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::SignalCollectionCount, count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoRegionTriggerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoRegionTriggerEvent, geo_area_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoRegionTriggerEvent, geo_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectAfterTriggerEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectAfterTriggerEvent, collect_after_distance_meter_min_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectAfterTriggerEvent, collect_after_distance_meter_max_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectAfterTriggerEvent, collect_after_time_seconds_min_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectAfterTriggerEvent, collect_after_time_seconds_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoAction, on_entry_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoAction, on_exit_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoAction, collect_while_inside_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::GeoAction, collect_while_outside_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::KeyValuePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::KeyValuePair, key_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::KeyValuePair, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::TriggerAnnotationID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::TriggerAnnotationID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Trigger, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Trigger, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Trigger, trigger_annotation_ids_),
  offsetof(::data_collection_configuration_request::TriggerDefaultTypeInternal, time_delta_trigger_event_),
  offsetof(::data_collection_configuration_request::TriggerDefaultTypeInternal, distance_delta_trigger_event_),
  offsetof(::data_collection_configuration_request::TriggerDefaultTypeInternal, signal_change_trigger_event_),
  offsetof(::data_collection_configuration_request::TriggerDefaultTypeInternal, signal_transition_trigger_event_),
  offsetof(::data_collection_configuration_request::TriggerDefaultTypeInternal, geo_region_trigger_event_),
  offsetof(::data_collection_configuration_request::TriggerDefaultTypeInternal, count_),
  offsetof(::data_collection_configuration_request::TriggerDefaultTypeInternal, signal_collection_native_frequency_),
  offsetof(::data_collection_configuration_request::TriggerDefaultTypeInternal, collect_after_trigger_event_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Trigger, CollectionConfiguration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionAction, collection_tasks_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionAction, min_split_frequency_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionAction, data_packetization_trigger_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::StartUpDelay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::StartUpDelay, no_collection_startup_distance_meter_min_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::StartUpDelay, no_collection_startup_distance_meter_max_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::StartUpDelay, no_collection_startup_time_seconds_min_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::StartUpDelay, no_collection_startup_time_seconds_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::EndPointUncertainty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::EndPointUncertainty, no_collection_end_distance_meter_min_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::EndPointUncertainty, no_collection_end_distance_meter_max_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::EndPointUncertainty, no_collection_end_time_seconds_min_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::EndPointUncertainty, no_collection_end_time_seconds_max_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataRecordingGap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataRecordingGap, data_recording_gap_distance_minimum_meter_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataRecordingGap, data_recording_gap_distance_maximum_meter_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataRecordingGap, data_recording_gap_time_minimum_seconds_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataRecordingGap, data_recording_gap_time_maximum_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::AbsoluteTimeOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::AbsoluteTimeOffset, absolute_time_offset_minimum_milliseconds_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::AbsoluteTimeOffset, absolute_time_offset_maximum_milliseconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionTask, task_id_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionTask, data_points_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::CollectionTask, data_points_configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ListOfSNA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ListOfSNA, value_range_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ListOfSNA, value_list_sna_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::RawValueFilter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::RawValueFilter, value_range_custom_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::RawValueFilter, value_list_custom_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ValueRange, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ValueRange, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::data_collection_configuration_request::ValueRangeDefaultTypeInternal, less_than_equal_to_),
  offsetof(::data_collection_configuration_request::ValueRangeDefaultTypeInternal, greater_than_equal_to_),
  offsetof(::data_collection_configuration_request::ValueRangeDefaultTypeInternal, value_interval_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ValueRange, range_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ValueInterval, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ValueInterval, value_lower_included_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ValueInterval, value_upper_included_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, default_signal_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, can_signal_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, lin_signal_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, ethernet_signal_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, network_signal_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, internal_signal_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, processing_toolbox_signal_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, thriftme_signal_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, collectd_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, eelsource_),
  offsetof(::data_collection_configuration_request::DatapointDefaultTypeInternal, thriftme_active_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, filter_sna_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, list_of_sna_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, filter_raw_value_custom_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, raw_value_filter_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, data_point_field_type_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, min_number_of_instances_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, relative_data_value_capture_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, slug_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Datapoint, signal_definition_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Processing_Toolbox_Definition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Processing_Toolbox_Definition, processing_toolbox_signal_def_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::Processing_Toolbox_Definition, tool_input_parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ToolInputParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ToolInputParameter, input_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ToolInputParameter, dpi_type_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ToolInputParameter, dpr_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::ToolInputParameter, data_points_configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DatapointsConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DatapointsConfiguration, event_trigger_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DatapointsConfiguration, collection_trigger_operator_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::RvidEffectivePeriod, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::RvidEffectivePeriod, rvid_effective_period_range_min_seconds_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::RvidEffectivePeriod, rvid_effective_period_range_max_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataPackageTimeToLive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataPackageTimeToLive, data_package_time_to_live_min_s_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataPackageTimeToLive, data_package_time_to_live_max_s_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, job_uuid_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, rvid_effective_period_range_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, nossg_allowed_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, enable_active_thrift_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, active_thrift_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, active_thrift_retry_ms_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, active_thrift_connect_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, active_thrift_response_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, upload_interval_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, stf_buffer_size_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, record_vin_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, persist_request_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, startup_delay_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, end_point_uncertainity_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, data_recording_gap_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, absolute_time_offset_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, job_format_version_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, relative_time_stamp_capture_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, record_tzoffset_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, record_file_counter_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, record_session_id_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, record_rvid_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, record_ecu_info_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, record_market_info_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, job_priority_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, device_properties_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, debug_information_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, data_package_time_to_live_s_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob_JobConfig, upload_channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob, job_config_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob, validity_restrictions_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob, action_),
  PROTOBUF_FIELD_OFFSET(::data_collection_configuration_request::DataCollectionJob, termination_conditions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::data_collection_configuration_request::Version)},
  { 9, -1, sizeof(::data_collection_configuration_request::CollectionExtents)},
  { 19, -1, sizeof(::data_collection_configuration_request::TimestampInterval)},
  { 24, -1, sizeof(::data_collection_configuration_request::Uint32Range)},
  { 31, -1, sizeof(::data_collection_configuration_request::GeoLocation)},
  { 38, -1, sizeof(::data_collection_configuration_request::GeoRectangle)},
  { 45, -1, sizeof(::data_collection_configuration_request::GeoCircle)},
  { 52, -1, sizeof(::data_collection_configuration_request::GeoPolygon)},
  { 58, -1, sizeof(::data_collection_configuration_request::GeoCorridor)},
  { 65, -1, sizeof(::data_collection_configuration_request::CompositeTimeRange)},
  { 73, -1, sizeof(::data_collection_configuration_request::CompositeLocation)},
  { 82, -1, sizeof(::data_collection_configuration_request::MapRestriction_RoadAttribute)},
  { 89, -1, sizeof(::data_collection_configuration_request::MapRestriction_FunctionalRoadClassRange)},
  { 96, -1, sizeof(::data_collection_configuration_request::MapRestriction)},
  { 106, -1, sizeof(::data_collection_configuration_request::SystemStates)},
  { 112, -1, sizeof(::data_collection_configuration_request::JobValidityRestrictions)},
  { 121, -1, sizeof(::data_collection_configuration_request::JobTerminationConditions)},
  { 130, -1, sizeof(::data_collection_configuration_request::TimeDeltaTriggerEvent)},
  { 137, -1, sizeof(::data_collection_configuration_request::DistanceDeltaTriggerEvent)},
  { 143, -1, sizeof(::data_collection_configuration_request::SignalChangeTriggerEvent)},
  { 158, -1, sizeof(::data_collection_configuration_request::SignalTransitionTriggerEvent)},
  { 164, -1, sizeof(::data_collection_configuration_request::SignalCollectionCount)},
  { 170, -1, sizeof(::data_collection_configuration_request::GeoRegionTriggerEvent)},
  { 177, -1, sizeof(::data_collection_configuration_request::CollectAfterTriggerEvent)},
  { 186, -1, sizeof(::data_collection_configuration_request::GeoAction)},
  { 195, -1, sizeof(::data_collection_configuration_request::KeyValuePair)},
  { 202, -1, sizeof(::data_collection_configuration_request::TriggerAnnotationID)},
  { 208, -1, sizeof(::data_collection_configuration_request::Trigger)},
  { 223, -1, sizeof(::data_collection_configuration_request::CollectionAction)},
  { 231, -1, sizeof(::data_collection_configuration_request::StartUpDelay)},
  { 240, -1, sizeof(::data_collection_configuration_request::EndPointUncertainty)},
  { 249, -1, sizeof(::data_collection_configuration_request::DataRecordingGap)},
  { 258, -1, sizeof(::data_collection_configuration_request::AbsoluteTimeOffset)},
  { 265, -1, sizeof(::data_collection_configuration_request::CollectionTask)},
  { 273, -1, sizeof(::data_collection_configuration_request::ListOfSNA)},
  { 280, -1, sizeof(::data_collection_configuration_request::RawValueFilter)},
  { 287, -1, sizeof(::data_collection_configuration_request::ValueRange)},
  { 296, -1, sizeof(::data_collection_configuration_request::ValueInterval)},
  { 303, -1, sizeof(::data_collection_configuration_request::Datapoint)},
  { 328, -1, sizeof(::data_collection_configuration_request::Processing_Toolbox_Definition)},
  { 335, -1, sizeof(::data_collection_configuration_request::ToolInputParameter)},
  { 344, -1, sizeof(::data_collection_configuration_request::DatapointsConfiguration)},
  { 351, -1, sizeof(::data_collection_configuration_request::RvidEffectivePeriod)},
  { 358, -1, sizeof(::data_collection_configuration_request::DataPackageTimeToLive)},
  { 365, -1, sizeof(::data_collection_configuration_request::DataCollectionJob_JobConfig)},
  { 399, -1, sizeof(::data_collection_configuration_request::DataCollectionJob)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_Version_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_CollectionExtents_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_TimestampInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_Uint32Range_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_GeoLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_GeoRectangle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_GeoCircle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_GeoPolygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_GeoCorridor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_CompositeTimeRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_CompositeLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_MapRestriction_RoadAttribute_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_MapRestriction_FunctionalRoadClassRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_MapRestriction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_SystemStates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_JobValidityRestrictions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_JobTerminationConditions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_TimeDeltaTriggerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_DistanceDeltaTriggerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_SignalTransitionTriggerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_SignalCollectionCount_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_GeoRegionTriggerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_CollectAfterTriggerEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_GeoAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_KeyValuePair_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_TriggerAnnotationID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_Trigger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_CollectionAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_StartUpDelay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_EndPointUncertainty_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_DataRecordingGap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_AbsoluteTimeOffset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_CollectionTask_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_ListOfSNA_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_RawValueFilter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_ValueRange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_ValueInterval_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_Datapoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_Processing_Toolbox_Definition_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_ToolInputParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_DatapointsConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_RvidEffectivePeriod_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_DataPackageTimeToLive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_DataCollectionJob_JobConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::data_collection_configuration_request::_DataCollectionJob_default_instance_),
};

const char descriptor_table_protodef_data_5fcollection_5fconfiguration_5frequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+data_collection_configuration_request."
  "proto\022%data_collection_configuration_req"
  "uest\032\036signal_source_definition.proto\032\030lo"
  "gical_expression.proto\032\020data_types.proto"
  "\"D\n\007Version\022\r\n\005major\030\001 \001(\r\022\r\n\005minor\030\002 \001("
  "\r\022\r\n\005patch\030\003 \001(\r\022\014\n\004name\030\004 \001(\t\"\251\001\n\021Colle"
  "ctionExtents\022\r\n\005count\030\001 \001(\004\022\021\n\tsize_byte"
  "\030\002 \001(\004\022\025\n\rpath_length_m\030\003 \001(\004\022\027\n\017path_du"
  "ration_s\030\004 \001(\004\022B\n\nby_trigger\030\005 \003(\0132..dat"
  "a_collection_configuration_request.Trigg"
  "er\"\023\n\021TimestampInterval\"3\n\013Uint32Range\022\021"
  "\n\tmin_value\030\001 \001(\r\022\021\n\tmax_value\030\002 \001(\r\":\n\013"
  "GeoLocation\022\024\n\014latitude_deg\030\001 \001(\001\022\025\n\rlon"
  "gitude_deg\030\002 \001(\001\"\236\001\n\014GeoRectangle\022D\n\010top"
  "_left\030\001 \001(\01322.data_collection_configurat"
  "ion_request.GeoLocation\022H\n\014bottom_right\030"
  "\002 \001(\01322.data_collection_configuration_re"
  "quest.GeoLocation\"a\n\tGeoCircle\022B\n\006center"
  "\030\001 \001(\01322.data_collection_configuration_r"
  "equest.GeoLocation\022\020\n\010radius_m\030\002 \001(\001\"P\n\n"
  "GeoPolygon\022B\n\006points\030\001 \003(\01322.data_collec"
  "tion_configuration_request.GeoLocation\"g"
  "\n\013GeoCorridor\022G\n\013center_line\030\001 \003(\01322.dat"
  "a_collection_configuration_request.GeoLo"
  "cation\022\017\n\007width_m\030\002 \001(\001\"\207\003\n\022CompositeTim"
  "eRange\022L\n\ndate_range\030\001 \003(\01328.data_collec"
  "tion_configuration_request.TimestampInte"
  "rval\022V\n\007weekday\030\002 \003(\0162E.data_collection_"
  "configuration_request.CompositeTimeRange"
  ".WeekdayEnum\022Q\n\025time_of_the_day_range\030\003 "
  "\003(\01322.data_collection_configuration_requ"
  "est.Uint32Range\"x\n\013WeekdayEnum\022\r\n\tUNDEFI"
  "NED\020\000\022\n\n\006MONDAY\020\001\022\013\n\007TUESDAY\020\002\022\r\n\tWEDNES"
  "DAY\020\003\022\014\n\010THURSDAY\020\004\022\n\n\006FRIDAY\020\005\022\014\n\010SATUR"
  "DAY\020\006\022\n\n\006SUNDAY\020\007\"\273\002\n\021CompositeLocation\022"
  "E\n\013geo_circles\030\001 \003(\01320.data_collection_c"
  "onfiguration_request.GeoCircle\022K\n\016geo_re"
  "ctangles\030\002 \003(\01323.data_collection_configu"
  "ration_request.GeoRectangle\022G\n\014geo_polyg"
  "ons\030\003 \003(\01321.data_collection_configuratio"
  "n_request.GeoPolygon\022I\n\rgeo_corridors\030\004 "
  "\003(\01322.data_collection_configuration_requ"
  "est.GeoCorridor\"\304\006\n\016MapRestriction\022[\n\016ro"
  "ad_attribute\030\001 \001(\0132C.data_collection_con"
  "figuration_request.MapRestriction.RoadAt"
  "tribute\022s\n\033functional_road_class_range\030\002"
  " \003(\0132N.data_collection_configuration_req"
  "uest.MapRestriction.FunctionalRoadClassR"
  "ange\022\037\n\027whitelist_country_codes\030\003 \003(\t\022\037\n"
  "\027blacklist_country_codes\030\004 \003(\t\022\037\n\027ignore"
  "_if_not_supported\030\005 \001(\010\032\303\001\n\rRoadAttribut"
  "e\022Z\n\troad_type\030\001 \003(\0162G.data_collection_c"
  "onfiguration_request.MapRestriction.Road"
  "AttributeEnum\022V\n\022road_type_operator\030\002 \001("
  "\0162:.data_collection_configuration_reques"
  "t.LogicalOperatorEnum\032@\n\030FunctionalRoadC"
  "lassRange\022\021\n\tmin_value\030\001 \001(\r\022\021\n\tmax_valu"
  "e\030\002 \001(\r\"\364\001\n\021RoadAttributeEnum\022\010\n\004NONE\020\000\022"
  "\014\n\010MOTORWAY\020\002\022\020\n\014COUNTRY_ROAD\020\003\022\r\n\tCITY_"
  "ROAD\020\004\022\007\n\003HOV\020\005\022\n\n\006TUNNEL\020\006\022\n\n\006BRIDGE\020\007\022"
  "\016\n\nWATER_AREA\020\010\022\016\n\nOTHER_AREA\020\t\022\016\n\nSTATE"
  "_ROAD\020\n\022\010\n\004TOLL\020\013\022\013\n\007PRIVATE\020\014\022\023\n\017DOUBLE"
  "_CARRIAGE\020\r\022\013\n\007OFF_MAP\020\016\022\016\n\nRURAL_AREA\020\017"
  "\022\014\n\010BUILDING\020\020\"S\n\014SystemStates\022C\n\005state\030"
  "\001 \001(\01624.data_collection_configuration_re"
  "quest.System_States\"\360\002\n\027JobValidityRestr"
  "ictions\022T\n\021time_restrictions\030\001 \003(\01329.dat"
  "a_collection_configuration_request.Compo"
  "siteTimeRange\022V\n\024spatial_restrictions\030\002 "
  "\001(\01328.data_collection_configuration_requ"
  "est.CompositeLocation\022O\n\020map_restriction"
  "s\030\003 \003(\01325.data_collection_configuration_"
  "request.MapRestriction\022V\n\031invalid_collec"
  "tion_states\030\004 \003(\01323.data_collection_conf"
  "iguration_request.SystemStates\"\326\002\n\030JobTe"
  "rminationConditions\022R\n\017time_conditions\030\001"
  " \003(\01329.data_collection_configuration_req"
  "uest.CompositeTimeRange\022T\n\022spatial_condi"
  "tions\030\002 \001(\01328.data_collection_configurat"
  "ion_request.CompositeLocation\022E\n\026signal_"
  "value_condition\030\003 \003(\0132%.logical_expressi"
  "on.LogicalExpression\022I\n\007extents\030\004 \001(\01328."
  "data_collection_configuration_request.Co"
  "llectionExtents\"\300\001\n\025TimeDeltaTriggerEven"
  "t\022Z\n\004type\030\001 \001(\0162L.data_collection_config"
  "uration_request.TimeDeltaTriggerEvent.Ti"
  "meTriggerType\022\037\n\027time_delta_milliseconds"
  "\030\002 \001(\r\"*\n\017TimeTriggerType\022\n\n\006ACTIVE\020\000\022\013\n"
  "\007PASSIVE\020\001\":\n\031DistanceDeltaTriggerEvent\022"
  "\035\n\025distance_delta_meters\030\001 \001(\r\"\354\004\n\030Signa"
  "lChangeTriggerEvent\022\030\n\020on_signal_change\030"
  "\001 \001(\010\022A\n\016default_signal\030\002 \001(\0132\'.signal_s"
  "ource_definition.DefaultSourceH\000\0229\n\ncan_"
  "signal\030\003 \001(\0132#.signal_source_definition."
  "CanSourceH\000\0229\n\nlin_signal\030\004 \001(\0132#.signal"
  "_source_definition.LinSourceH\000\022C\n\017ethern"
  "et_signal\030\005 \001(\0132(.signal_source_definiti"
  "on.EthernetSourceH\000\022A\n\016network_signal\030\006 "
  "\001(\0132\'.signal_source_definition.NetworkSo"
  "urceH\000\022C\n\017internal_signal\030\007 \001(\0132(.signal"
  "_source_definition.InternalSourceH\000\022V\n\031p"
  "rocessing_toolbox_signal\030\010 \001(\01321.signal_"
  "source_definition.ProcessingToolboxSourc"
  "eH\000\022C\n\017thriftme_signal\030\t \001(\0132(.signal_so"
  "urce_definition.ThriftmeSourceH\000B\023\n\021sign"
  "al_definition\"a\n\034SignalTransitionTrigger"
  "Event\022A\n\022logical_expression\030\001 \003(\0132%.logi"
  "cal_expression.LogicalExpression\"&\n\025Sign"
  "alCollectionCount\022\r\n\005count\030\001 \001(\r\"\251\001\n\025Geo"
  "RegionTriggerEvent\022J\n\010geo_area\030\001 \001(\01328.d"
  "ata_collection_configuration_request.Com"
  "positeLocation\022D\n\ngeo_action\030\002 \001(\01320.dat"
  "a_collection_configuration_request.GeoAc"
  "tion\"\276\001\n\030CollectAfterTriggerEvent\022(\n col"
  "lect_after_distance_meter_min\030\001 \001(\001\022(\n c"
  "ollect_after_distance_meter_max\030\002 \001(\001\022&\n"
  "\036collect_after_time_seconds_min\030\003 \001(\001\022&\n"
  "\036collect_after_time_seconds_max\030\004 \001(\001\"k\n"
  "\tGeoAction\022\020\n\010on_entry\030\001 \001(\010\022\017\n\007on_exit\030"
  "\002 \001(\010\022\034\n\024collect_while_inside\030\003 \001(\010\022\035\n\025c"
  "ollect_while_outside\030\004 \001(\010\"*\n\014KeyValuePa"
  "ir\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"!\n\023Trigge"
  "rAnnotationID\022\n\n\002id\030\001 \001(\r\"\353\006\n\007Trigger\022Z\n"
  "\026trigger_annotation_ids\030\001 \003(\0132:.data_col"
  "lection_configuration_request.TriggerAnn"
  "otationID\022`\n\030time_delta_trigger_event\030\002 "
  "\001(\0132<.data_collection_configuration_requ"
  "est.TimeDeltaTriggerEventH\000\022h\n\034distance_"
  "delta_trigger_event\030\003 \001(\0132@.data_collect"
  "ion_configuration_request.DistanceDeltaT"
  "riggerEventH\000\022f\n\033signal_change_trigger_e"
  "vent\030\004 \001(\0132\?.data_collection_configurati"
  "on_request.SignalChangeTriggerEventH\000\022n\n"
  "\037signal_transition_trigger_event\030\005 \001(\0132C"
  ".data_collection_configuration_request.S"
  "ignalTransitionTriggerEventH\000\022`\n\030geo_reg"
  "ion_trigger_event\030\006 \001(\0132<.data_collectio"
  "n_configuration_request.GeoRegionTrigger"
  "EventH\000\022M\n\005count\030\007 \001(\0132<.data_collection"
  "_configuration_request.SignalCollectionC"
  "ountH\000\022,\n\"signal_collection_native_frequ"
  "ency\030\010 \001(\010H\000\022f\n\033collect_after_trigger_ev"
  "ent\030\t \001(\0132\?.data_collection_configuratio"
  "n_request.CollectAfterTriggerEventH\000B\031\n\027"
  "CollectionConfiguration\"\230\002\n\020CollectionAc"
  "tion\022O\n\020collection_tasks\030\001 \003(\01325.data_co"
  "llection_configuration_request.Collectio"
  "nTask\022U\n\023min_split_frequency\030\002 \001(\01328.dat"
  "a_collection_configuration_request.Colle"
  "ctionExtents\022\\\n\032data_packetization_trigg"
  "er\030\003 \001(\01328.data_collection_configuration"
  "_request.CollectionExtents\"\322\001\n\014StartUpDe"
  "lay\0220\n(no_collection_startup_distance_me"
  "ter_min\030\001 \001(\001\0220\n(no_collection_startup_d"
  "istance_meter_max\030\002 \001(\001\022.\n&no_collection"
  "_startup_time_seconds_min\030\003 \001(\001\022.\n&no_co"
  "llection_startup_time_seconds_max\030\004 \001(\001\""
  "\311\001\n\023EndPointUncertainty\022,\n$no_collection"
  "_end_distance_meter_min\030\001 \001(\001\022,\n$no_coll"
  "ection_end_distance_meter_max\030\002 \001(\001\022*\n\"n"
  "o_collection_end_time_seconds_min\030\003 \001(\001\022"
  "*\n\"no_collection_end_time_seconds_max\030\004 "
  "\001(\001\"\332\001\n\020DataRecordingGap\0221\n)data_recordi"
  "ng_gap_distance_minimum_meter\030\001 \001(\001\0221\n)d"
  "ata_recording_gap_distance_maximum_meter"
  "\030\002 \001(\001\022/\n\'data_recording_gap_time_minimu"
  "m_seconds\030\003 \001(\001\022/\n\'data_recording_gap_ti"
  "me_maximum_seconds\030\004 \001(\001\"z\n\022AbsoluteTime"
  "Offset\0221\n)absolute_time_offset_minimum_m"
  "illiseconds\030\001 \001(\003\0221\n)absolute_time_offse"
  "t_maximum_milliseconds\030\002 \001(\003\"\313\001\n\016Collect"
  "ionTask\022\017\n\007task_id\030\001 \001(\r\022E\n\013data_points\030"
  "\002 \003(\01320.data_collection_configuration_re"
  "quest.Datapoint\022a\n\031data_points_configura"
  "tion\030\003 \001(\0132>.data_collection_configurati"
  "on_request.DatapointsConfiguration\"k\n\tLi"
  "stOfSNA\022F\n\013value_range\030\001 \003(\01321.data_coll"
  "ection_configuration_request.ValueRange\022"
  "\026\n\016value_list_SNA\030\002 \003(\001\"z\n\016RawValueFilte"
  "r\022M\n\022value_range_custom\030\001 \003(\01321.data_col"
  "lection_configuration_request.ValueRange"
  "\022\031\n\021value_list_custom\030\002 \003(\001\"\244\001\n\nValueRan"
  "ge\022\034\n\022less_than_equal_to\030\001 \001(\001H\000\022\037\n\025grea"
  "ter_than_equal_to\030\002 \001(\001H\000\022N\n\016value_inter"
  "val\030\003 \001(\01324.data_collection_configuratio"
  "n_request.ValueIntervalH\000B\007\n\005range\"K\n\rVa"
  "lueInterval\022\034\n\024value_lower_included\030\001 \001("
  "\001\022\034\n\024value_upper_included\030\002 \001(\001\"\274\014\n\tData"
  "point\022A\n\016default_signal\030\001 \001(\0132\'.signal_s"
  "ource_definition.DefaultSourceH\000\0229\n\ncan_"
  "signal\030\002 \001(\0132#.signal_source_definition."
  "CanSourceH\000\0229\n\nlin_signal\030\003 \001(\0132#.signal"
  "_source_definition.LinSourceH\000\022C\n\017ethern"
  "et_signal\030\004 \001(\0132(.signal_source_definiti"
  "on.EthernetSourceH\000\022A\n\016network_signal\030\005 "
  "\001(\0132\'.signal_source_definition.NetworkSo"
  "urceH\000\022C\n\017internal_signal\030\006 \001(\0132(.signal"
  "_source_definition.InternalSourceH\000\022i\n\031p"
  "rocessing_toolbox_signal\030\007 \001(\0132D.data_co"
  "llection_configuration_request.Processin"
  "g_Toolbox_DefinitionH\000\022C\n\017thriftme_signa"
  "l\030\010 \001(\0132(.signal_source_definition.Thrif"
  "tmeSourceH\000\022<\n\010collectd\030\n \001(\0132(.signal_s"
  "ource_definition.CollectdSourceH\000\0228\n\teel"
  "source\030\023 \001(\0132#.signal_source_definition."
  "EELSourceH\000\022I\n\017thriftme_active\030\027 \001(\0132..s"
  "ignal_source_definition.ThriftmeSourceAc"
  "tiveH\000\022\022\n\nfilter_sna\030\r \001(\010\022E\n\013list_of_SN"
  "A\030\024 \001(\01320.data_collection_configuration_"
  "request.ListOfSNA\022\037\n\027filter_raw_value_cu"
  "stom\030\025 \001(\010\022O\n\020raw_value_filter\030\026 \001(\01325.d"
  "ata_collection_configuration_request.Raw"
  "ValueFilter\022f\n\025data_point_field_type\030\016 \001"
  "(\0162G.data_collection_configuration_reque"
  "st.Datapoint.DataPointValueTypeEnum\022\037\n\027m"
  "in_number_of_instances\030\020 \001(\r\022r\n\033relative"
  "_data_value_capture\030\021 \001(\0162M.data_collect"
  "ion_configuration_request.Datapoint.Rela"
  "tiveDataValueCaptureEnum\022\014\n\004slug\030\022 \001(\t\"\314"
  "\001\n\026DataPointValueTypeEnum\022\n\n\006DOUBLE\020\000\022\t\n"
  "\005FLOAT\020\001\022\t\n\005INT32\020\002\022\t\n\005INT64\020\003\022\n\n\006UINT32"
  "\020\004\022\n\n\006UINT64\020\005\022\n\n\006SINT32\020\006\022\n\n\006SINT64\020\007\022\013"
  "\n\007FIXED32\020\010\022\013\n\007FIXED64\020\t\022\014\n\010SFIXED32\020\n\022\014"
  "\n\010SFIXED64\020\013\022\010\n\004BOOL\020\014\022\n\n\006STRING\020\r\022\t\n\005BY"
  "TES\020\016\"z\n\034RelativeDataValueCaptureEnum\022\020\n"
  "\014NOT_RELATIVE\020\000\022\025\n\021RELATIVE_WRT_FILE\020\001\022\025"
  "\n\021RELATIVE_WRT_RVID\020\002\022\032\n\026RELATIVE_WRT_SE"
  "SSIONID\020\003B\023\n\021signal_definition\"\322\001\n\035Proce"
  "ssing_Toolbox_Definition\022X\n\035processing_t"
  "oolbox_signal_def\030\001 \001(\01321.signal_source_"
  "definition.ProcessingToolboxSource\022W\n\024to"
  "ol_input_parameter\030\002 \003(\01329.data_collecti"
  "on_configuration_request.ToolInputParame"
  "ter\"\327\001\n\022ToolInputParameter\022\?\n\005input\030\001 \001("
  "\01320.data_collection_configuration_reques"
  "t.Datapoint\022\020\n\010dpi_type\030\002 \001(\005\022\013\n\003dpr\030\003 \001"
  "(\t\022a\n\031data_points_configuration\030\004 \001(\0132>."
  "data_collection_configuration_request.Da"
  "tapointsConfiguration\"\301\001\n\027DatapointsConf"
  "iguration\022E\n\revent_trigger\030\001 \003(\0132..data_"
  "collection_configuration_request.Trigger"
  "\022_\n\033collection_trigger_operator\030\002 \001(\0162:."
  "data_collection_configuration_request.Lo"
  "gicalOperatorEnum\"w\n\023RvidEffectivePeriod"
  "\022/\n\'rvid_effective_period_range_min_seco"
  "nds\030\001 \001(\r\022/\n\'rvid_effective_period_range"
  "_max_seconds\030\002 \001(\r\"i\n\025DataPackageTimeToL"
  "ive\022\'\n\037data_package_time_to_live_min_s\030\001"
  " \001(\r\022\'\n\037data_package_time_to_live_max_s\030"
  "\002 \001(\r\"\227\016\n\021DataCollectionJob\022V\n\njob_confi"
  "g\030\001 \001(\0132B.data_collection_configuration_"
  "request.DataCollectionJob.JobConfig\022]\n\025v"
  "alidity_restrictions\030\002 \001(\0132>.data_collec"
  "tion_configuration_request.JobValidityRe"
  "strictions\022G\n\006action\030\003 \001(\01327.data_collec"
  "tion_configuration_request.CollectionAct"
  "ion\022_\n\026termination_conditions\030\004 \001(\0132\?.da"
  "ta_collection_configuration_request.JobT"
  "erminationConditions\032\240\013\n\tJobConfig\022\020\n\010jo"
  "b_uuid\030\001 \001(\t\022_\n\033rvid_effective_period_ra"
  "nge\030\002 \001(\0132:.data_collection_configuratio"
  "n_request.RvidEffectivePeriod\022\025\n\rnossg_a"
  "llowed\030\003 \001(\r\022\034\n\024enable_active_thrift\030\004 \001"
  "(\010\022!\n\031active_thrift_interval_ms\030\005 \001(\r\022\036\n"
  "\026active_thrift_retry_ms\030\006 \001(\r\022(\n active_"
  "thrift_connect_timeout_ms\030\007 \001(\r\022)\n!activ"
  "e_thrift_response_timeout_ms\030\010 \001(\r\022\027\n\017up"
  "load_interval\030\t \001(\r\022\027\n\017stf_buffer_size\030\n"
  " \001(\r\022\022\n\nrecord_vin\030\013 \001(\010\022\027\n\017persist_requ"
  "est\030\014 \001(\010\022J\n\rstartup_delay\030\r \001(\01323.data_"
  "collection_configuration_request.StartUp"
  "Delay\022Z\n\026end_point_uncertainity\030\016 \001(\0132:."
  "data_collection_configuration_request.En"
  "dPointUncertainty\022S\n\022data_recording_gap\030"
  "\017 \001(\01327.data_collection_configuration_re"
  "quest.DataRecordingGap\022W\n\024absolute_time_"
  "offset\030\020 \001(\01329.data_collection_configura"
  "tion_request.AbsoluteTimeOffset\022J\n\022job_f"
  "ormat_version\030\021 \001(\0132..data_collection_co"
  "nfiguration_request.Version\022h\n\033relative_"
  "time_stamp_capture\030\022 \001(\0162C.data_collecti"
  "on_configuration_request.RelativeTimeSta"
  "mpCaptureEnum\022\027\n\017record_tzoffset\030\023 \001(\010\022\033"
  "\n\023record_file_counter\030\024 \001(\010\022\031\n\021record_se"
  "ssion_id\030\025 \001(\010\022\023\n\013record_rvid\030\026 \001(\010\022\027\n\017r"
  "ecord_ecu_info\030\027 \001(\010\022\032\n\022record_market_in"
  "fo\030\030 \001(\010\022\024\n\014job_priority\030\031 \001(\r\022B\n\021device"
  "_properties\030\032 \003(\0132\'.request_format.data_"
  "types.KeyValuePair\022B\n\021debug_information\030"
  "\033 \003(\0132\'.request_format.data_types.KeyVal"
  "uePair\022a\n\033data_package_time_to_live_s\030\034 "
  "\001(\0132<.data_collection_configuration_requ"
  "est.DataPackageTimeToLive\022L\n\016upload_chan"
  "nel\030\035 \001(\01624.data_collection_configuratio"
  "n_request.UploadChannel*.\n\023LogicalOperat"
  "orEnum\022\006\n\002OR\020\000\022\007\n\003AND\020\001\022\006\n\002NA\020\002*d\n\rSyste"
  "m_States\022\014\n\010IGN_LOCK\020\000\022\013\n\007IGN_OFF\020\001\022\013\n\007I"
  "GN_ACC\020\002\022\n\n\006IGN_ON\020\003\022\r\n\tIGN_START\020\004\022\020\n\014I"
  "GNITION_OFF\020\005*\214\001\n\034RelativeTimeStampCaptu"
  "reEnum\022\020\n\014NO_TIMESTAMP\020\000\022\020\n\014NOT_RELATIVE"
  "\020\001\022\025\n\021RELATIVE_WRT_FILE\020\002\022\025\n\021RELATIVE_WR"
  "T_RVID\020\003\022\032\n\026RELATIVE_WRT_SESSIONID\020\004*2\n\r"
  "UploadChannel\022\021\n\rPERSONAL_DATA\020\000\022\016\n\nCROW"
  "D_DATA\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto_deps[3] = {
  &::descriptor_table_data_5ftypes_2eproto,
  &::descriptor_table_logical_5fexpression_2eproto,
  &::descriptor_table_signal_5fsource_5fdefinition_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto_sccs[44] = {
  &scc_info_AbsoluteTimeOffset_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_CollectAfterTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_CollectionAction_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_CollectionExtents_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_CollectionTask_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_CompositeTimeRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_DataCollectionJob_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_DataCollectionJob_JobConfig_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_DataPackageTimeToLive_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_DataRecordingGap_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_DatapointsConfiguration_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_DistanceDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_EndPointUncertainty_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_GeoAction_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_GeoCircle_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_GeoCorridor_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_GeoPolygon_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_GeoRectangle_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_GeoRegionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_JobTerminationConditions_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_JobValidityRestrictions_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_KeyValuePair_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_ListOfSNA_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_MapRestriction_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_MapRestriction_FunctionalRoadClassRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_MapRestriction_RoadAttribute_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_RawValueFilter_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_RvidEffectivePeriod_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_SignalChangeTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_SignalCollectionCount_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_SignalTransitionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_StartUpDelay_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_SystemStates_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_TimeDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_TimestampInterval_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_Trigger_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_TriggerAnnotationID_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_Uint32Range_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_ValueInterval_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_ValueRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
  &scc_info_Version_data_5fcollection_5fconfiguration_5frequest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto_once;
static bool descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto = {
  &descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto_initialized, descriptor_table_protodef_data_5fcollection_5fconfiguration_5frequest_2eproto, "data_collection_configuration_request.proto", 12136,
  &descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto_once, descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto_sccs, descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto_deps, 44, 3,
  schemas, file_default_instances, TableStruct_data_5fcollection_5fconfiguration_5frequest_2eproto::offsets,
  file_level_metadata_data_5fcollection_5fconfiguration_5frequest_2eproto, 46, file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto, file_level_service_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_data_5fcollection_5fconfiguration_5frequest_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto), true);
namespace data_collection_configuration_request {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompositeTimeRange_WeekdayEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto);
  return file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[0];
}
bool CompositeTimeRange_WeekdayEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::UNDEFINED;
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::MONDAY;
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::TUESDAY;
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::WEDNESDAY;
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::THURSDAY;
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::FRIDAY;
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::SATURDAY;
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::SUNDAY;
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::WeekdayEnum_MIN;
constexpr CompositeTimeRange_WeekdayEnum CompositeTimeRange::WeekdayEnum_MAX;
constexpr int CompositeTimeRange::WeekdayEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MapRestriction_RoadAttributeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto);
  return file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[1];
}
bool MapRestriction_RoadAttributeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MapRestriction_RoadAttributeEnum MapRestriction::NONE;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::MOTORWAY;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::COUNTRY_ROAD;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::CITY_ROAD;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::HOV;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::TUNNEL;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::BRIDGE;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::WATER_AREA;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::OTHER_AREA;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::STATE_ROAD;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::TOLL;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::PRIVATE;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::DOUBLE_CARRIAGE;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::OFF_MAP;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::RURAL_AREA;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::BUILDING;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::RoadAttributeEnum_MIN;
constexpr MapRestriction_RoadAttributeEnum MapRestriction::RoadAttributeEnum_MAX;
constexpr int MapRestriction::RoadAttributeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeDeltaTriggerEvent_TimeTriggerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto);
  return file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[2];
}
bool TimeDeltaTriggerEvent_TimeTriggerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TimeDeltaTriggerEvent_TimeTriggerType TimeDeltaTriggerEvent::ACTIVE;
constexpr TimeDeltaTriggerEvent_TimeTriggerType TimeDeltaTriggerEvent::PASSIVE;
constexpr TimeDeltaTriggerEvent_TimeTriggerType TimeDeltaTriggerEvent::TimeTriggerType_MIN;
constexpr TimeDeltaTriggerEvent_TimeTriggerType TimeDeltaTriggerEvent::TimeTriggerType_MAX;
constexpr int TimeDeltaTriggerEvent::TimeTriggerType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Datapoint_DataPointValueTypeEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto);
  return file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[3];
}
bool Datapoint_DataPointValueTypeEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Datapoint_DataPointValueTypeEnum Datapoint::DOUBLE;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::FLOAT;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::INT32;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::INT64;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::UINT32;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::UINT64;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::SINT32;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::SINT64;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::FIXED32;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::FIXED64;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::SFIXED32;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::SFIXED64;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::BOOL;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::STRING;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::BYTES;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::DataPointValueTypeEnum_MIN;
constexpr Datapoint_DataPointValueTypeEnum Datapoint::DataPointValueTypeEnum_MAX;
constexpr int Datapoint::DataPointValueTypeEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Datapoint_RelativeDataValueCaptureEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto);
  return file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[4];
}
bool Datapoint_RelativeDataValueCaptureEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Datapoint_RelativeDataValueCaptureEnum Datapoint::NOT_RELATIVE;
constexpr Datapoint_RelativeDataValueCaptureEnum Datapoint::RELATIVE_WRT_FILE;
constexpr Datapoint_RelativeDataValueCaptureEnum Datapoint::RELATIVE_WRT_RVID;
constexpr Datapoint_RelativeDataValueCaptureEnum Datapoint::RELATIVE_WRT_SESSIONID;
constexpr Datapoint_RelativeDataValueCaptureEnum Datapoint::RelativeDataValueCaptureEnum_MIN;
constexpr Datapoint_RelativeDataValueCaptureEnum Datapoint::RelativeDataValueCaptureEnum_MAX;
constexpr int Datapoint::RelativeDataValueCaptureEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalOperatorEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto);
  return file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[5];
}
bool LogicalOperatorEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* System_States_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto);
  return file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[6];
}
bool System_States_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RelativeTimeStampCaptureEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto);
  return file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[7];
}
bool RelativeTimeStampCaptureEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UploadChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_data_5fcollection_5fconfiguration_5frequest_2eproto);
  return file_level_enum_descriptors_data_5fcollection_5fconfiguration_5frequest_2eproto[8];
}
bool UploadChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Version::InitAsDefaultInstance() {
}
class Version::_Internal {
 public:
};

Version::Version()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.Version)
}
Version::Version(const Version& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&major_, &from.major_,
    static_cast<size_t>(reinterpret_cast<char*>(&patch_) -
    reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.Version)
}

void Version::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Version_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
}

Version::~Version() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.Version)
  SharedDtor();
}

void Version::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Version::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Version& Version::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Version_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void Version::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&major_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&patch_) -
      reinterpret_cast<char*>(&major_)) + sizeof(patch_));
  _internal_metadata_.Clear();
}

const char* Version::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 major = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          major_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 minor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          minor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 patch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          patch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "data_collection_configuration_request.Version.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Version::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.Version)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 major = 1;
  if (this->major() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_major(), target);
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_minor(), target);
  }

  // uint32 patch = 3;
  if (this->patch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_patch(), target);
  }

  // string name = 4;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data_collection_configuration_request.Version.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.Version)
  return target;
}

size_t Version::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.Version)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 4;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 major = 1;
  if (this->major() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_major());
  }

  // uint32 minor = 2;
  if (this->minor() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_minor());
  }

  // uint32 patch = 3;
  if (this->patch() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_patch());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Version::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.Version)
  GOOGLE_DCHECK_NE(&from, this);
  const Version* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Version>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.Version)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.Version)
    MergeFrom(*source);
  }
}

void Version::MergeFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.Version)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.major() != 0) {
    _internal_set_major(from._internal_major());
  }
  if (from.minor() != 0) {
    _internal_set_minor(from._internal_minor());
  }
  if (from.patch() != 0) {
    _internal_set_patch(from._internal_patch());
  }
}

void Version::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Version::CopyFrom(const Version& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.Version)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Version::IsInitialized() const {
  return true;
}

void Version::InternalSwap(Version* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(major_, other->major_);
  swap(minor_, other->minor_);
  swap(patch_, other->patch_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionExtents::InitAsDefaultInstance() {
}
class CollectionExtents::_Internal {
 public:
};

CollectionExtents::CollectionExtents()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.CollectionExtents)
}
CollectionExtents::CollectionExtents(const CollectionExtents& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      by_trigger_(from.by_trigger_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&path_duration_s_) -
    reinterpret_cast<char*>(&count_)) + sizeof(path_duration_s_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.CollectionExtents)
}

void CollectionExtents::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionExtents_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_duration_s_) -
      reinterpret_cast<char*>(&count_)) + sizeof(path_duration_s_));
}

CollectionExtents::~CollectionExtents() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.CollectionExtents)
  SharedDtor();
}

void CollectionExtents::SharedDtor() {
}

void CollectionExtents::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionExtents& CollectionExtents::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionExtents_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CollectionExtents::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.CollectionExtents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  by_trigger_.Clear();
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&path_duration_s_) -
      reinterpret_cast<char*>(&count_)) + sizeof(path_duration_s_));
  _internal_metadata_.Clear();
}

const char* CollectionExtents::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size_byte = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_byte_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 path_length_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          path_length_m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 path_duration_s = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          path_duration_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.Trigger by_trigger = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_by_trigger(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionExtents::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.CollectionExtents)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_count(), target);
  }

  // uint64 size_byte = 2;
  if (this->size_byte() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size_byte(), target);
  }

  // uint64 path_length_m = 3;
  if (this->path_length_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_path_length_m(), target);
  }

  // uint64 path_duration_s = 4;
  if (this->path_duration_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_path_duration_s(), target);
  }

  // repeated .data_collection_configuration_request.Trigger by_trigger = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_by_trigger_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_by_trigger(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.CollectionExtents)
  return target;
}

size_t CollectionExtents::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.CollectionExtents)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.Trigger by_trigger = 5;
  total_size += 1UL * this->_internal_by_trigger_size();
  for (const auto& msg : this->by_trigger_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_count());
  }

  // uint64 size_byte = 2;
  if (this->size_byte() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size_byte());
  }

  // uint64 path_length_m = 3;
  if (this->path_length_m() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_path_length_m());
  }

  // uint64 path_duration_s = 4;
  if (this->path_duration_s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_path_duration_s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionExtents::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.CollectionExtents)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionExtents* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionExtents>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.CollectionExtents)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.CollectionExtents)
    MergeFrom(*source);
  }
}

void CollectionExtents::MergeFrom(const CollectionExtents& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.CollectionExtents)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  by_trigger_.MergeFrom(from.by_trigger_);
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (from.size_byte() != 0) {
    _internal_set_size_byte(from._internal_size_byte());
  }
  if (from.path_length_m() != 0) {
    _internal_set_path_length_m(from._internal_path_length_m());
  }
  if (from.path_duration_s() != 0) {
    _internal_set_path_duration_s(from._internal_path_duration_s());
  }
}

void CollectionExtents::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.CollectionExtents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionExtents::CopyFrom(const CollectionExtents& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.CollectionExtents)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionExtents::IsInitialized() const {
  return true;
}

void CollectionExtents::InternalSwap(CollectionExtents* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  by_trigger_.InternalSwap(&other->by_trigger_);
  swap(count_, other->count_);
  swap(size_byte_, other->size_byte_);
  swap(path_length_m_, other->path_length_m_);
  swap(path_duration_s_, other->path_duration_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionExtents::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimestampInterval::InitAsDefaultInstance() {
}
class TimestampInterval::_Internal {
 public:
};

TimestampInterval::TimestampInterval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.TimestampInterval)
}
TimestampInterval::TimestampInterval(const TimestampInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.TimestampInterval)
}

void TimestampInterval::SharedCtor() {
}

TimestampInterval::~TimestampInterval() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.TimestampInterval)
  SharedDtor();
}

void TimestampInterval::SharedDtor() {
}

void TimestampInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimestampInterval& TimestampInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimestampInterval_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void TimestampInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.TimestampInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* TimestampInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimestampInterval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.TimestampInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.TimestampInterval)
  return target;
}

size_t TimestampInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.TimestampInterval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimestampInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.TimestampInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const TimestampInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimestampInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.TimestampInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.TimestampInterval)
    MergeFrom(*source);
  }
}

void TimestampInterval::MergeFrom(const TimestampInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.TimestampInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TimestampInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.TimestampInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimestampInterval::CopyFrom(const TimestampInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.TimestampInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimestampInterval::IsInitialized() const {
  return true;
}

void TimestampInterval::InternalSwap(TimestampInterval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimestampInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Uint32Range::InitAsDefaultInstance() {
}
class Uint32Range::_Internal {
 public:
};

Uint32Range::Uint32Range()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.Uint32Range)
}
Uint32Range::Uint32Range(const Uint32Range& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_value_, &from.min_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_value_) -
    reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.Uint32Range)
}

void Uint32Range::SharedCtor() {
  ::memset(&min_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_value_) -
      reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
}

Uint32Range::~Uint32Range() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.Uint32Range)
  SharedDtor();
}

void Uint32Range::SharedDtor() {
}

void Uint32Range::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Uint32Range& Uint32Range::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Uint32Range_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void Uint32Range::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.Uint32Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_value_) -
      reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
  _internal_metadata_.Clear();
}

const char* Uint32Range::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 min_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Uint32Range::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.Uint32Range)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 min_value = 1;
  if (this->min_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_value(), target);
  }

  // uint32 max_value = 2;
  if (this->max_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.Uint32Range)
  return target;
}

size_t Uint32Range::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.Uint32Range)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 min_value = 1;
  if (this->min_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_value());
  }

  // uint32 max_value = 2;
  if (this->max_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Uint32Range::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.Uint32Range)
  GOOGLE_DCHECK_NE(&from, this);
  const Uint32Range* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Uint32Range>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.Uint32Range)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.Uint32Range)
    MergeFrom(*source);
  }
}

void Uint32Range::MergeFrom(const Uint32Range& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.Uint32Range)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_value() != 0) {
    _internal_set_min_value(from._internal_min_value());
  }
  if (from.max_value() != 0) {
    _internal_set_max_value(from._internal_max_value());
  }
}

void Uint32Range::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.Uint32Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uint32Range::CopyFrom(const Uint32Range& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.Uint32Range)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uint32Range::IsInitialized() const {
  return true;
}

void Uint32Range::InternalSwap(Uint32Range* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_value_, other->min_value_);
  swap(max_value_, other->max_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Uint32Range::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoLocation::InitAsDefaultInstance() {
}
class GeoLocation::_Internal {
 public:
};

GeoLocation::GeoLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.GeoLocation)
}
GeoLocation::GeoLocation(const GeoLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_deg_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(longitude_deg_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.GeoLocation)
}

void GeoLocation::SharedCtor() {
  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_deg_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(longitude_deg_));
}

GeoLocation::~GeoLocation() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.GeoLocation)
  SharedDtor();
}

void GeoLocation::SharedDtor() {
}

void GeoLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoLocation& GeoLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GeoLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.GeoLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_deg_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(longitude_deg_));
  _internal_metadata_.Clear();
}

const char* GeoLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double latitude_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double longitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.GeoLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.GeoLocation)
  return target;
}

size_t GeoLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.GeoLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1;
  if (!(this->latitude_deg() <= 0 && this->latitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2;
  if (!(this->longitude_deg() <= 0 && this->longitude_deg() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.GeoLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.GeoLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.GeoLocation)
    MergeFrom(*source);
  }
}

void GeoLocation::MergeFrom(const GeoLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.GeoLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.latitude_deg() <= 0 && from.latitude_deg() >= 0)) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  if (!(from.longitude_deg() <= 0 && from.longitude_deg() >= 0)) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
}

void GeoLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.GeoLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoLocation::CopyFrom(const GeoLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.GeoLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoLocation::IsInitialized() const {
  return true;
}

void GeoLocation::InternalSwap(GeoLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(latitude_deg_, other->latitude_deg_);
  swap(longitude_deg_, other->longitude_deg_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoRectangle::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_GeoRectangle_default_instance_._instance.get_mutable()->top_left_ = const_cast< ::data_collection_configuration_request::GeoLocation*>(
      ::data_collection_configuration_request::GeoLocation::internal_default_instance());
  ::data_collection_configuration_request::_GeoRectangle_default_instance_._instance.get_mutable()->bottom_right_ = const_cast< ::data_collection_configuration_request::GeoLocation*>(
      ::data_collection_configuration_request::GeoLocation::internal_default_instance());
}
class GeoRectangle::_Internal {
 public:
  static const ::data_collection_configuration_request::GeoLocation& top_left(const GeoRectangle* msg);
  static const ::data_collection_configuration_request::GeoLocation& bottom_right(const GeoRectangle* msg);
};

const ::data_collection_configuration_request::GeoLocation&
GeoRectangle::_Internal::top_left(const GeoRectangle* msg) {
  return *msg->top_left_;
}
const ::data_collection_configuration_request::GeoLocation&
GeoRectangle::_Internal::bottom_right(const GeoRectangle* msg) {
  return *msg->bottom_right_;
}
GeoRectangle::GeoRectangle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.GeoRectangle)
}
GeoRectangle::GeoRectangle(const GeoRectangle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_top_left()) {
    top_left_ = new ::data_collection_configuration_request::GeoLocation(*from.top_left_);
  } else {
    top_left_ = nullptr;
  }
  if (from._internal_has_bottom_right()) {
    bottom_right_ = new ::data_collection_configuration_request::GeoLocation(*from.bottom_right_);
  } else {
    bottom_right_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.GeoRectangle)
}

void GeoRectangle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoRectangle_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  ::memset(&top_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bottom_right_) -
      reinterpret_cast<char*>(&top_left_)) + sizeof(bottom_right_));
}

GeoRectangle::~GeoRectangle() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.GeoRectangle)
  SharedDtor();
}

void GeoRectangle::SharedDtor() {
  if (this != internal_default_instance()) delete top_left_;
  if (this != internal_default_instance()) delete bottom_right_;
}

void GeoRectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoRectangle& GeoRectangle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoRectangle_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GeoRectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.GeoRectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && top_left_ != nullptr) {
    delete top_left_;
  }
  top_left_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && bottom_right_ != nullptr) {
    delete bottom_right_;
  }
  bottom_right_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GeoRectangle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .data_collection_configuration_request.GeoLocation top_left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_top_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.GeoLocation bottom_right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_bottom_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoRectangle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.GeoRectangle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data_collection_configuration_request.GeoLocation top_left = 1;
  if (this->has_top_left()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::top_left(this), target, stream);
  }

  // .data_collection_configuration_request.GeoLocation bottom_right = 2;
  if (this->has_bottom_right()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::bottom_right(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.GeoRectangle)
  return target;
}

size_t GeoRectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.GeoRectangle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .data_collection_configuration_request.GeoLocation top_left = 1;
  if (this->has_top_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *top_left_);
  }

  // .data_collection_configuration_request.GeoLocation bottom_right = 2;
  if (this->has_bottom_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bottom_right_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoRectangle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.GeoRectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoRectangle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoRectangle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.GeoRectangle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.GeoRectangle)
    MergeFrom(*source);
  }
}

void GeoRectangle::MergeFrom(const GeoRectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.GeoRectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_top_left()) {
    _internal_mutable_top_left()->::data_collection_configuration_request::GeoLocation::MergeFrom(from._internal_top_left());
  }
  if (from.has_bottom_right()) {
    _internal_mutable_bottom_right()->::data_collection_configuration_request::GeoLocation::MergeFrom(from._internal_bottom_right());
  }
}

void GeoRectangle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.GeoRectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoRectangle::CopyFrom(const GeoRectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.GeoRectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRectangle::IsInitialized() const {
  return true;
}

void GeoRectangle::InternalSwap(GeoRectangle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(top_left_, other->top_left_);
  swap(bottom_right_, other->bottom_right_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoRectangle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoCircle::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_GeoCircle_default_instance_._instance.get_mutable()->center_ = const_cast< ::data_collection_configuration_request::GeoLocation*>(
      ::data_collection_configuration_request::GeoLocation::internal_default_instance());
}
class GeoCircle::_Internal {
 public:
  static const ::data_collection_configuration_request::GeoLocation& center(const GeoCircle* msg);
};

const ::data_collection_configuration_request::GeoLocation&
GeoCircle::_Internal::center(const GeoCircle* msg) {
  return *msg->center_;
}
GeoCircle::GeoCircle()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.GeoCircle)
}
GeoCircle::GeoCircle(const GeoCircle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::data_collection_configuration_request::GeoLocation(*from.center_);
  } else {
    center_ = nullptr;
  }
  radius_m_ = from.radius_m_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.GeoCircle)
}

void GeoCircle::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoCircle_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_m_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_m_));
}

GeoCircle::~GeoCircle() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.GeoCircle)
  SharedDtor();
}

void GeoCircle::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void GeoCircle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoCircle& GeoCircle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoCircle_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GeoCircle::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.GeoCircle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  radius_m_ = 0;
  _internal_metadata_.Clear();
}

const char* GeoCircle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .data_collection_configuration_request.GeoLocation center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double radius_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          radius_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoCircle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.GeoCircle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data_collection_configuration_request.GeoLocation center = 1;
  if (this->has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // double radius_m = 2;
  if (!(this->radius_m() <= 0 && this->radius_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_radius_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.GeoCircle)
  return target;
}

size_t GeoCircle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.GeoCircle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .data_collection_configuration_request.GeoLocation center = 1;
  if (this->has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // double radius_m = 2;
  if (!(this->radius_m() <= 0 && this->radius_m() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoCircle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.GeoCircle)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoCircle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoCircle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.GeoCircle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.GeoCircle)
    MergeFrom(*source);
  }
}

void GeoCircle::MergeFrom(const GeoCircle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.GeoCircle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_center()) {
    _internal_mutable_center()->::data_collection_configuration_request::GeoLocation::MergeFrom(from._internal_center());
  }
  if (!(from.radius_m() <= 0 && from.radius_m() >= 0)) {
    _internal_set_radius_m(from._internal_radius_m());
  }
}

void GeoCircle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.GeoCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoCircle::CopyFrom(const GeoCircle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.GeoCircle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoCircle::IsInitialized() const {
  return true;
}

void GeoCircle::InternalSwap(GeoCircle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(center_, other->center_);
  swap(radius_m_, other->radius_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoCircle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoPolygon::InitAsDefaultInstance() {
}
class GeoPolygon::_Internal {
 public:
};

GeoPolygon::GeoPolygon()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.GeoPolygon)
}
GeoPolygon::GeoPolygon(const GeoPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      points_(from.points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.GeoPolygon)
}

void GeoPolygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoPolygon_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
}

GeoPolygon::~GeoPolygon() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.GeoPolygon)
  SharedDtor();
}

void GeoPolygon::SharedDtor() {
}

void GeoPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoPolygon& GeoPolygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoPolygon_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GeoPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.GeoPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  _internal_metadata_.Clear();
}

const char* GeoPolygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.GeoLocation points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoPolygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.GeoPolygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.GeoLocation points = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.GeoPolygon)
  return target;
}

size_t GeoPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.GeoPolygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.GeoLocation points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoPolygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.GeoPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoPolygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoPolygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.GeoPolygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.GeoPolygon)
    MergeFrom(*source);
  }
}

void GeoPolygon::MergeFrom(const GeoPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.GeoPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
}

void GeoPolygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.GeoPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoPolygon::CopyFrom(const GeoPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.GeoPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPolygon::IsInitialized() const {
  return true;
}

void GeoPolygon::InternalSwap(GeoPolygon* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPolygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoCorridor::InitAsDefaultInstance() {
}
class GeoCorridor::_Internal {
 public:
};

GeoCorridor::GeoCorridor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.GeoCorridor)
}
GeoCorridor::GeoCorridor(const GeoCorridor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      center_line_(from.center_line_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  width_m_ = from.width_m_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.GeoCorridor)
}

void GeoCorridor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoCorridor_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  width_m_ = 0;
}

GeoCorridor::~GeoCorridor() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.GeoCorridor)
  SharedDtor();
}

void GeoCorridor::SharedDtor() {
}

void GeoCorridor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoCorridor& GeoCorridor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoCorridor_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GeoCorridor::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.GeoCorridor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  center_line_.Clear();
  width_m_ = 0;
  _internal_metadata_.Clear();
}

const char* GeoCorridor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.GeoLocation center_line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_center_line(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // double width_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          width_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoCorridor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.GeoCorridor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.GeoLocation center_line = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_center_line_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_center_line(i), target, stream);
  }

  // double width_m = 2;
  if (!(this->width_m() <= 0 && this->width_m() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.GeoCorridor)
  return target;
}

size_t GeoCorridor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.GeoCorridor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.GeoLocation center_line = 1;
  total_size += 1UL * this->_internal_center_line_size();
  for (const auto& msg : this->center_line_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // double width_m = 2;
  if (!(this->width_m() <= 0 && this->width_m() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoCorridor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.GeoCorridor)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoCorridor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoCorridor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.GeoCorridor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.GeoCorridor)
    MergeFrom(*source);
  }
}

void GeoCorridor::MergeFrom(const GeoCorridor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.GeoCorridor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  center_line_.MergeFrom(from.center_line_);
  if (!(from.width_m() <= 0 && from.width_m() >= 0)) {
    _internal_set_width_m(from._internal_width_m());
  }
}

void GeoCorridor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.GeoCorridor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoCorridor::CopyFrom(const GeoCorridor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.GeoCorridor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoCorridor::IsInitialized() const {
  return true;
}

void GeoCorridor::InternalSwap(GeoCorridor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  center_line_.InternalSwap(&other->center_line_);
  swap(width_m_, other->width_m_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoCorridor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompositeTimeRange::InitAsDefaultInstance() {
}
class CompositeTimeRange::_Internal {
 public:
};

CompositeTimeRange::CompositeTimeRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.CompositeTimeRange)
}
CompositeTimeRange::CompositeTimeRange(const CompositeTimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      date_range_(from.date_range_),
      weekday_(from.weekday_),
      time_of_the_day_range_(from.time_of_the_day_range_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.CompositeTimeRange)
}

void CompositeTimeRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompositeTimeRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
}

CompositeTimeRange::~CompositeTimeRange() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.CompositeTimeRange)
  SharedDtor();
}

void CompositeTimeRange::SharedDtor() {
}

void CompositeTimeRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompositeTimeRange& CompositeTimeRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompositeTimeRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CompositeTimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.CompositeTimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  date_range_.Clear();
  weekday_.Clear();
  time_of_the_day_range_.Clear();
  _internal_metadata_.Clear();
}

const char* CompositeTimeRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.TimestampInterval date_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_date_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.CompositeTimeRange.WeekdayEnum weekday = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_weekday(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_weekday(static_cast<::data_collection_configuration_request::CompositeTimeRange_WeekdayEnum>(val));
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.Uint32Range time_of_the_day_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time_of_the_day_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompositeTimeRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.CompositeTimeRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.TimestampInterval date_range = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_date_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_date_range(i), target, stream);
  }

  // repeated .data_collection_configuration_request.CompositeTimeRange.WeekdayEnum weekday = 2;
  {
    int byte_size = _weekday_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          2, weekday_, byte_size, target);
    }
  }

  // repeated .data_collection_configuration_request.Uint32Range time_of_the_day_range = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_of_the_day_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_time_of_the_day_range(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.CompositeTimeRange)
  return target;
}

size_t CompositeTimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.CompositeTimeRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.TimestampInterval date_range = 1;
  total_size += 1UL * this->_internal_date_range_size();
  for (const auto& msg : this->date_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .data_collection_configuration_request.CompositeTimeRange.WeekdayEnum weekday = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_weekday_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_weekday(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _weekday_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .data_collection_configuration_request.Uint32Range time_of_the_day_range = 3;
  total_size += 1UL * this->_internal_time_of_the_day_range_size();
  for (const auto& msg : this->time_of_the_day_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompositeTimeRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.CompositeTimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  const CompositeTimeRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompositeTimeRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.CompositeTimeRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.CompositeTimeRange)
    MergeFrom(*source);
  }
}

void CompositeTimeRange::MergeFrom(const CompositeTimeRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.CompositeTimeRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  date_range_.MergeFrom(from.date_range_);
  weekday_.MergeFrom(from.weekday_);
  time_of_the_day_range_.MergeFrom(from.time_of_the_day_range_);
}

void CompositeTimeRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.CompositeTimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeTimeRange::CopyFrom(const CompositeTimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.CompositeTimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeTimeRange::IsInitialized() const {
  return true;
}

void CompositeTimeRange::InternalSwap(CompositeTimeRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  date_range_.InternalSwap(&other->date_range_);
  weekday_.InternalSwap(&other->weekday_);
  time_of_the_day_range_.InternalSwap(&other->time_of_the_day_range_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompositeTimeRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CompositeLocation::InitAsDefaultInstance() {
}
class CompositeLocation::_Internal {
 public:
};

CompositeLocation::CompositeLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.CompositeLocation)
}
CompositeLocation::CompositeLocation(const CompositeLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      geo_circles_(from.geo_circles_),
      geo_rectangles_(from.geo_rectangles_),
      geo_polygons_(from.geo_polygons_),
      geo_corridors_(from.geo_corridors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.CompositeLocation)
}

void CompositeLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
}

CompositeLocation::~CompositeLocation() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.CompositeLocation)
  SharedDtor();
}

void CompositeLocation::SharedDtor() {
}

void CompositeLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompositeLocation& CompositeLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompositeLocation_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CompositeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.CompositeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geo_circles_.Clear();
  geo_rectangles_.Clear();
  geo_polygons_.Clear();
  geo_corridors_.Clear();
  _internal_metadata_.Clear();
}

const char* CompositeLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.GeoCircle geo_circles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_circles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.GeoRectangle geo_rectangles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_rectangles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.GeoPolygon geo_polygons = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_polygons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.GeoCorridor geo_corridors = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geo_corridors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompositeLocation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.CompositeLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.GeoCircle geo_circles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geo_circles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_geo_circles(i), target, stream);
  }

  // repeated .data_collection_configuration_request.GeoRectangle geo_rectangles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geo_rectangles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_geo_rectangles(i), target, stream);
  }

  // repeated .data_collection_configuration_request.GeoPolygon geo_polygons = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geo_polygons_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_geo_polygons(i), target, stream);
  }

  // repeated .data_collection_configuration_request.GeoCorridor geo_corridors = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_geo_corridors_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_geo_corridors(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.CompositeLocation)
  return target;
}

size_t CompositeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.CompositeLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.GeoCircle geo_circles = 1;
  total_size += 1UL * this->_internal_geo_circles_size();
  for (const auto& msg : this->geo_circles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .data_collection_configuration_request.GeoRectangle geo_rectangles = 2;
  total_size += 1UL * this->_internal_geo_rectangles_size();
  for (const auto& msg : this->geo_rectangles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .data_collection_configuration_request.GeoPolygon geo_polygons = 3;
  total_size += 1UL * this->_internal_geo_polygons_size();
  for (const auto& msg : this->geo_polygons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .data_collection_configuration_request.GeoCorridor geo_corridors = 4;
  total_size += 1UL * this->_internal_geo_corridors_size();
  for (const auto& msg : this->geo_corridors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompositeLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.CompositeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const CompositeLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompositeLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.CompositeLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.CompositeLocation)
    MergeFrom(*source);
  }
}

void CompositeLocation::MergeFrom(const CompositeLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.CompositeLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  geo_circles_.MergeFrom(from.geo_circles_);
  geo_rectangles_.MergeFrom(from.geo_rectangles_);
  geo_polygons_.MergeFrom(from.geo_polygons_);
  geo_corridors_.MergeFrom(from.geo_corridors_);
}

void CompositeLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.CompositeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompositeLocation::CopyFrom(const CompositeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.CompositeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompositeLocation::IsInitialized() const {
  return true;
}

void CompositeLocation::InternalSwap(CompositeLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  geo_circles_.InternalSwap(&other->geo_circles_);
  geo_rectangles_.InternalSwap(&other->geo_rectangles_);
  geo_polygons_.InternalSwap(&other->geo_polygons_);
  geo_corridors_.InternalSwap(&other->geo_corridors_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompositeLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapRestriction_RoadAttribute::InitAsDefaultInstance() {
}
class MapRestriction_RoadAttribute::_Internal {
 public:
};

MapRestriction_RoadAttribute::MapRestriction_RoadAttribute()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.MapRestriction.RoadAttribute)
}
MapRestriction_RoadAttribute::MapRestriction_RoadAttribute(const MapRestriction_RoadAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      road_type_(from.road_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  road_type_operator_ = from.road_type_operator_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.MapRestriction.RoadAttribute)
}

void MapRestriction_RoadAttribute::SharedCtor() {
  road_type_operator_ = 0;
}

MapRestriction_RoadAttribute::~MapRestriction_RoadAttribute() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.MapRestriction.RoadAttribute)
  SharedDtor();
}

void MapRestriction_RoadAttribute::SharedDtor() {
}

void MapRestriction_RoadAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapRestriction_RoadAttribute& MapRestriction_RoadAttribute::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapRestriction_RoadAttribute_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void MapRestriction_RoadAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.MapRestriction.RoadAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  road_type_.Clear();
  road_type_operator_ = 0;
  _internal_metadata_.Clear();
}

const char* MapRestriction_RoadAttribute::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.MapRestriction.RoadAttributeEnum road_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_road_type(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_add_road_type(static_cast<::data_collection_configuration_request::MapRestriction_RoadAttributeEnum>(val));
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.LogicalOperatorEnum road_type_operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_road_type_operator(static_cast<::data_collection_configuration_request::LogicalOperatorEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapRestriction_RoadAttribute::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.MapRestriction.RoadAttribute)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.MapRestriction.RoadAttributeEnum road_type = 1;
  {
    int byte_size = _road_type_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          1, road_type_, byte_size, target);
    }
  }

  // .data_collection_configuration_request.LogicalOperatorEnum road_type_operator = 2;
  if (this->road_type_operator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_road_type_operator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.MapRestriction.RoadAttribute)
  return target;
}

size_t MapRestriction_RoadAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.MapRestriction.RoadAttribute)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.MapRestriction.RoadAttributeEnum road_type = 1;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_road_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_road_type(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _road_type_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .data_collection_configuration_request.LogicalOperatorEnum road_type_operator = 2;
  if (this->road_type_operator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_road_type_operator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapRestriction_RoadAttribute::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.MapRestriction.RoadAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const MapRestriction_RoadAttribute* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapRestriction_RoadAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.MapRestriction.RoadAttribute)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.MapRestriction.RoadAttribute)
    MergeFrom(*source);
  }
}

void MapRestriction_RoadAttribute::MergeFrom(const MapRestriction_RoadAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.MapRestriction.RoadAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  road_type_.MergeFrom(from.road_type_);
  if (from.road_type_operator() != 0) {
    _internal_set_road_type_operator(from._internal_road_type_operator());
  }
}

void MapRestriction_RoadAttribute::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.MapRestriction.RoadAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRestriction_RoadAttribute::CopyFrom(const MapRestriction_RoadAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.MapRestriction.RoadAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRestriction_RoadAttribute::IsInitialized() const {
  return true;
}

void MapRestriction_RoadAttribute::InternalSwap(MapRestriction_RoadAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  road_type_.InternalSwap(&other->road_type_);
  swap(road_type_operator_, other->road_type_operator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRestriction_RoadAttribute::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapRestriction_FunctionalRoadClassRange::InitAsDefaultInstance() {
}
class MapRestriction_FunctionalRoadClassRange::_Internal {
 public:
};

MapRestriction_FunctionalRoadClassRange::MapRestriction_FunctionalRoadClassRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
}
MapRestriction_FunctionalRoadClassRange::MapRestriction_FunctionalRoadClassRange(const MapRestriction_FunctionalRoadClassRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_value_, &from.min_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_value_) -
    reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
}

void MapRestriction_FunctionalRoadClassRange::SharedCtor() {
  ::memset(&min_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_value_) -
      reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
}

MapRestriction_FunctionalRoadClassRange::~MapRestriction_FunctionalRoadClassRange() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
  SharedDtor();
}

void MapRestriction_FunctionalRoadClassRange::SharedDtor() {
}

void MapRestriction_FunctionalRoadClassRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapRestriction_FunctionalRoadClassRange& MapRestriction_FunctionalRoadClassRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapRestriction_FunctionalRoadClassRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void MapRestriction_FunctionalRoadClassRange::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_value_) -
      reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
  _internal_metadata_.Clear();
}

const char* MapRestriction_FunctionalRoadClassRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 min_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          min_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 max_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapRestriction_FunctionalRoadClassRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 min_value = 1;
  if (this->min_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min_value(), target);
  }

  // uint32 max_value = 2;
  if (this->max_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
  return target;
}

size_t MapRestriction_FunctionalRoadClassRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 min_value = 1;
  if (this->min_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_value());
  }

  // uint32 max_value = 2;
  if (this->max_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_max_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapRestriction_FunctionalRoadClassRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
  GOOGLE_DCHECK_NE(&from, this);
  const MapRestriction_FunctionalRoadClassRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapRestriction_FunctionalRoadClassRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
    MergeFrom(*source);
  }
}

void MapRestriction_FunctionalRoadClassRange::MergeFrom(const MapRestriction_FunctionalRoadClassRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.min_value() != 0) {
    _internal_set_min_value(from._internal_min_value());
  }
  if (from.max_value() != 0) {
    _internal_set_max_value(from._internal_max_value());
  }
}

void MapRestriction_FunctionalRoadClassRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRestriction_FunctionalRoadClassRange::CopyFrom(const MapRestriction_FunctionalRoadClassRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRestriction_FunctionalRoadClassRange::IsInitialized() const {
  return true;
}

void MapRestriction_FunctionalRoadClassRange::InternalSwap(MapRestriction_FunctionalRoadClassRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(min_value_, other->min_value_);
  swap(max_value_, other->max_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRestriction_FunctionalRoadClassRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MapRestriction::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_MapRestriction_default_instance_._instance.get_mutable()->road_attribute_ = const_cast< ::data_collection_configuration_request::MapRestriction_RoadAttribute*>(
      ::data_collection_configuration_request::MapRestriction_RoadAttribute::internal_default_instance());
}
class MapRestriction::_Internal {
 public:
  static const ::data_collection_configuration_request::MapRestriction_RoadAttribute& road_attribute(const MapRestriction* msg);
};

const ::data_collection_configuration_request::MapRestriction_RoadAttribute&
MapRestriction::_Internal::road_attribute(const MapRestriction* msg) {
  return *msg->road_attribute_;
}
MapRestriction::MapRestriction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.MapRestriction)
}
MapRestriction::MapRestriction(const MapRestriction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      functional_road_class_range_(from.functional_road_class_range_),
      whitelist_country_codes_(from.whitelist_country_codes_),
      blacklist_country_codes_(from.blacklist_country_codes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_road_attribute()) {
    road_attribute_ = new ::data_collection_configuration_request::MapRestriction_RoadAttribute(*from.road_attribute_);
  } else {
    road_attribute_ = nullptr;
  }
  ignore_if_not_supported_ = from.ignore_if_not_supported_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.MapRestriction)
}

void MapRestriction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MapRestriction_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  ::memset(&road_attribute_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ignore_if_not_supported_) -
      reinterpret_cast<char*>(&road_attribute_)) + sizeof(ignore_if_not_supported_));
}

MapRestriction::~MapRestriction() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.MapRestriction)
  SharedDtor();
}

void MapRestriction::SharedDtor() {
  if (this != internal_default_instance()) delete road_attribute_;
}

void MapRestriction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MapRestriction& MapRestriction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MapRestriction_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void MapRestriction::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.MapRestriction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  functional_road_class_range_.Clear();
  whitelist_country_codes_.Clear();
  blacklist_country_codes_.Clear();
  if (GetArenaNoVirtual() == nullptr && road_attribute_ != nullptr) {
    delete road_attribute_;
  }
  road_attribute_ = nullptr;
  ignore_if_not_supported_ = false;
  _internal_metadata_.Clear();
}

const char* MapRestriction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .data_collection_configuration_request.MapRestriction.RoadAttribute road_attribute = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_road_attribute(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange functional_road_class_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_functional_road_class_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string whitelist_country_codes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_whitelist_country_codes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "data_collection_configuration_request.MapRestriction.whitelist_country_codes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string blacklist_country_codes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_blacklist_country_codes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "data_collection_configuration_request.MapRestriction.blacklist_country_codes"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // bool ignore_if_not_supported = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ignore_if_not_supported_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MapRestriction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.MapRestriction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data_collection_configuration_request.MapRestriction.RoadAttribute road_attribute = 1;
  if (this->has_road_attribute()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::road_attribute(this), target, stream);
  }

  // repeated .data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange functional_road_class_range = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_functional_road_class_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_functional_road_class_range(i), target, stream);
  }

  // repeated string whitelist_country_codes = 3;
  for (int i = 0, n = this->_internal_whitelist_country_codes_size(); i < n; i++) {
    const auto& s = this->_internal_whitelist_country_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data_collection_configuration_request.MapRestriction.whitelist_country_codes");
    target = stream->WriteString(3, s, target);
  }

  // repeated string blacklist_country_codes = 4;
  for (int i = 0, n = this->_internal_blacklist_country_codes_size(); i < n; i++) {
    const auto& s = this->_internal_blacklist_country_codes(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data_collection_configuration_request.MapRestriction.blacklist_country_codes");
    target = stream->WriteString(4, s, target);
  }

  // bool ignore_if_not_supported = 5;
  if (this->ignore_if_not_supported() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_ignore_if_not_supported(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.MapRestriction)
  return target;
}

size_t MapRestriction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.MapRestriction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.MapRestriction.FunctionalRoadClassRange functional_road_class_range = 2;
  total_size += 1UL * this->_internal_functional_road_class_range_size();
  for (const auto& msg : this->functional_road_class_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string whitelist_country_codes = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(whitelist_country_codes_.size());
  for (int i = 0, n = whitelist_country_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      whitelist_country_codes_.Get(i));
  }

  // repeated string blacklist_country_codes = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(blacklist_country_codes_.size());
  for (int i = 0, n = blacklist_country_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      blacklist_country_codes_.Get(i));
  }

  // .data_collection_configuration_request.MapRestriction.RoadAttribute road_attribute = 1;
  if (this->has_road_attribute()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *road_attribute_);
  }

  // bool ignore_if_not_supported = 5;
  if (this->ignore_if_not_supported() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapRestriction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.MapRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  const MapRestriction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MapRestriction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.MapRestriction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.MapRestriction)
    MergeFrom(*source);
  }
}

void MapRestriction::MergeFrom(const MapRestriction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.MapRestriction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  functional_road_class_range_.MergeFrom(from.functional_road_class_range_);
  whitelist_country_codes_.MergeFrom(from.whitelist_country_codes_);
  blacklist_country_codes_.MergeFrom(from.blacklist_country_codes_);
  if (from.has_road_attribute()) {
    _internal_mutable_road_attribute()->::data_collection_configuration_request::MapRestriction_RoadAttribute::MergeFrom(from._internal_road_attribute());
  }
  if (from.ignore_if_not_supported() != 0) {
    _internal_set_ignore_if_not_supported(from._internal_ignore_if_not_supported());
  }
}

void MapRestriction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.MapRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapRestriction::CopyFrom(const MapRestriction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.MapRestriction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapRestriction::IsInitialized() const {
  return true;
}

void MapRestriction::InternalSwap(MapRestriction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  functional_road_class_range_.InternalSwap(&other->functional_road_class_range_);
  whitelist_country_codes_.InternalSwap(&other->whitelist_country_codes_);
  blacklist_country_codes_.InternalSwap(&other->blacklist_country_codes_);
  swap(road_attribute_, other->road_attribute_);
  swap(ignore_if_not_supported_, other->ignore_if_not_supported_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MapRestriction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SystemStates::InitAsDefaultInstance() {
}
class SystemStates::_Internal {
 public:
};

SystemStates::SystemStates()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.SystemStates)
}
SystemStates::SystemStates(const SystemStates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.SystemStates)
}

void SystemStates::SharedCtor() {
  state_ = 0;
}

SystemStates::~SystemStates() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.SystemStates)
  SharedDtor();
}

void SystemStates::SharedDtor() {
}

void SystemStates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SystemStates& SystemStates::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SystemStates_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SystemStates::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.SystemStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_ = 0;
  _internal_metadata_.Clear();
}

const char* SystemStates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .data_collection_configuration_request.System_States state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::data_collection_configuration_request::System_States>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SystemStates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.SystemStates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data_collection_configuration_request.System_States state = 1;
  if (this->state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.SystemStates)
  return target;
}

size_t SystemStates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.SystemStates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .data_collection_configuration_request.System_States state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SystemStates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.SystemStates)
  GOOGLE_DCHECK_NE(&from, this);
  const SystemStates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SystemStates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.SystemStates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.SystemStates)
    MergeFrom(*source);
  }
}

void SystemStates::MergeFrom(const SystemStates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.SystemStates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.state() != 0) {
    _internal_set_state(from._internal_state());
  }
}

void SystemStates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.SystemStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemStates::CopyFrom(const SystemStates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.SystemStates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStates::IsInitialized() const {
  return true;
}

void SystemStates::InternalSwap(SystemStates* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(state_, other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SystemStates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobValidityRestrictions::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_JobValidityRestrictions_default_instance_._instance.get_mutable()->spatial_restrictions_ = const_cast< ::data_collection_configuration_request::CompositeLocation*>(
      ::data_collection_configuration_request::CompositeLocation::internal_default_instance());
}
class JobValidityRestrictions::_Internal {
 public:
  static const ::data_collection_configuration_request::CompositeLocation& spatial_restrictions(const JobValidityRestrictions* msg);
};

const ::data_collection_configuration_request::CompositeLocation&
JobValidityRestrictions::_Internal::spatial_restrictions(const JobValidityRestrictions* msg) {
  return *msg->spatial_restrictions_;
}
JobValidityRestrictions::JobValidityRestrictions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.JobValidityRestrictions)
}
JobValidityRestrictions::JobValidityRestrictions(const JobValidityRestrictions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      time_restrictions_(from.time_restrictions_),
      map_restrictions_(from.map_restrictions_),
      invalid_collection_states_(from.invalid_collection_states_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_spatial_restrictions()) {
    spatial_restrictions_ = new ::data_collection_configuration_request::CompositeLocation(*from.spatial_restrictions_);
  } else {
    spatial_restrictions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.JobValidityRestrictions)
}

void JobValidityRestrictions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobValidityRestrictions_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  spatial_restrictions_ = nullptr;
}

JobValidityRestrictions::~JobValidityRestrictions() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.JobValidityRestrictions)
  SharedDtor();
}

void JobValidityRestrictions::SharedDtor() {
  if (this != internal_default_instance()) delete spatial_restrictions_;
}

void JobValidityRestrictions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobValidityRestrictions& JobValidityRestrictions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobValidityRestrictions_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void JobValidityRestrictions::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.JobValidityRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_restrictions_.Clear();
  map_restrictions_.Clear();
  invalid_collection_states_.Clear();
  if (GetArenaNoVirtual() == nullptr && spatial_restrictions_ != nullptr) {
    delete spatial_restrictions_;
  }
  spatial_restrictions_ = nullptr;
  _internal_metadata_.Clear();
}

const char* JobValidityRestrictions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.CompositeTimeRange time_restrictions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time_restrictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.CompositeLocation spatial_restrictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.MapRestriction map_restrictions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_map_restrictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.SystemStates invalid_collection_states = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_invalid_collection_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobValidityRestrictions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.JobValidityRestrictions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.CompositeTimeRange time_restrictions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_restrictions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_time_restrictions(i), target, stream);
  }

  // .data_collection_configuration_request.CompositeLocation spatial_restrictions = 2;
  if (this->has_spatial_restrictions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spatial_restrictions(this), target, stream);
  }

  // repeated .data_collection_configuration_request.MapRestriction map_restrictions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_map_restrictions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_map_restrictions(i), target, stream);
  }

  // repeated .data_collection_configuration_request.SystemStates invalid_collection_states = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_invalid_collection_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_invalid_collection_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.JobValidityRestrictions)
  return target;
}

size_t JobValidityRestrictions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.JobValidityRestrictions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.CompositeTimeRange time_restrictions = 1;
  total_size += 1UL * this->_internal_time_restrictions_size();
  for (const auto& msg : this->time_restrictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .data_collection_configuration_request.MapRestriction map_restrictions = 3;
  total_size += 1UL * this->_internal_map_restrictions_size();
  for (const auto& msg : this->map_restrictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .data_collection_configuration_request.SystemStates invalid_collection_states = 4;
  total_size += 1UL * this->_internal_invalid_collection_states_size();
  for (const auto& msg : this->invalid_collection_states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .data_collection_configuration_request.CompositeLocation spatial_restrictions = 2;
  if (this->has_spatial_restrictions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spatial_restrictions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobValidityRestrictions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.JobValidityRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  const JobValidityRestrictions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobValidityRestrictions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.JobValidityRestrictions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.JobValidityRestrictions)
    MergeFrom(*source);
  }
}

void JobValidityRestrictions::MergeFrom(const JobValidityRestrictions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.JobValidityRestrictions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_restrictions_.MergeFrom(from.time_restrictions_);
  map_restrictions_.MergeFrom(from.map_restrictions_);
  invalid_collection_states_.MergeFrom(from.invalid_collection_states_);
  if (from.has_spatial_restrictions()) {
    _internal_mutable_spatial_restrictions()->::data_collection_configuration_request::CompositeLocation::MergeFrom(from._internal_spatial_restrictions());
  }
}

void JobValidityRestrictions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.JobValidityRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobValidityRestrictions::CopyFrom(const JobValidityRestrictions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.JobValidityRestrictions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobValidityRestrictions::IsInitialized() const {
  return true;
}

void JobValidityRestrictions::InternalSwap(JobValidityRestrictions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  time_restrictions_.InternalSwap(&other->time_restrictions_);
  map_restrictions_.InternalSwap(&other->map_restrictions_);
  invalid_collection_states_.InternalSwap(&other->invalid_collection_states_);
  swap(spatial_restrictions_, other->spatial_restrictions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobValidityRestrictions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JobTerminationConditions::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_JobTerminationConditions_default_instance_._instance.get_mutable()->spatial_conditions_ = const_cast< ::data_collection_configuration_request::CompositeLocation*>(
      ::data_collection_configuration_request::CompositeLocation::internal_default_instance());
  ::data_collection_configuration_request::_JobTerminationConditions_default_instance_._instance.get_mutable()->extents_ = const_cast< ::data_collection_configuration_request::CollectionExtents*>(
      ::data_collection_configuration_request::CollectionExtents::internal_default_instance());
}
class JobTerminationConditions::_Internal {
 public:
  static const ::data_collection_configuration_request::CompositeLocation& spatial_conditions(const JobTerminationConditions* msg);
  static const ::data_collection_configuration_request::CollectionExtents& extents(const JobTerminationConditions* msg);
};

const ::data_collection_configuration_request::CompositeLocation&
JobTerminationConditions::_Internal::spatial_conditions(const JobTerminationConditions* msg) {
  return *msg->spatial_conditions_;
}
const ::data_collection_configuration_request::CollectionExtents&
JobTerminationConditions::_Internal::extents(const JobTerminationConditions* msg) {
  return *msg->extents_;
}
void JobTerminationConditions::clear_signal_value_condition() {
  signal_value_condition_.Clear();
}
JobTerminationConditions::JobTerminationConditions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.JobTerminationConditions)
}
JobTerminationConditions::JobTerminationConditions(const JobTerminationConditions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      time_conditions_(from.time_conditions_),
      signal_value_condition_(from.signal_value_condition_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_spatial_conditions()) {
    spatial_conditions_ = new ::data_collection_configuration_request::CompositeLocation(*from.spatial_conditions_);
  } else {
    spatial_conditions_ = nullptr;
  }
  if (from._internal_has_extents()) {
    extents_ = new ::data_collection_configuration_request::CollectionExtents(*from.extents_);
  } else {
    extents_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.JobTerminationConditions)
}

void JobTerminationConditions::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JobTerminationConditions_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  ::memset(&spatial_conditions_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&extents_) -
      reinterpret_cast<char*>(&spatial_conditions_)) + sizeof(extents_));
}

JobTerminationConditions::~JobTerminationConditions() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.JobTerminationConditions)
  SharedDtor();
}

void JobTerminationConditions::SharedDtor() {
  if (this != internal_default_instance()) delete spatial_conditions_;
  if (this != internal_default_instance()) delete extents_;
}

void JobTerminationConditions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JobTerminationConditions& JobTerminationConditions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JobTerminationConditions_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void JobTerminationConditions::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.JobTerminationConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_conditions_.Clear();
  signal_value_condition_.Clear();
  if (GetArenaNoVirtual() == nullptr && spatial_conditions_ != nullptr) {
    delete spatial_conditions_;
  }
  spatial_conditions_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && extents_ != nullptr) {
    delete extents_;
  }
  extents_ = nullptr;
  _internal_metadata_.Clear();
}

const char* JobTerminationConditions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.CompositeTimeRange time_conditions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_time_conditions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.CompositeLocation spatial_conditions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spatial_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .logical_expression.LogicalExpression signal_value_condition = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_signal_value_condition(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.CollectionExtents extents = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_extents(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JobTerminationConditions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.JobTerminationConditions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.CompositeTimeRange time_conditions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_time_conditions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_time_conditions(i), target, stream);
  }

  // .data_collection_configuration_request.CompositeLocation spatial_conditions = 2;
  if (this->has_spatial_conditions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::spatial_conditions(this), target, stream);
  }

  // repeated .logical_expression.LogicalExpression signal_value_condition = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_signal_value_condition_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_signal_value_condition(i), target, stream);
  }

  // .data_collection_configuration_request.CollectionExtents extents = 4;
  if (this->has_extents()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::extents(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.JobTerminationConditions)
  return target;
}

size_t JobTerminationConditions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.JobTerminationConditions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.CompositeTimeRange time_conditions = 1;
  total_size += 1UL * this->_internal_time_conditions_size();
  for (const auto& msg : this->time_conditions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .logical_expression.LogicalExpression signal_value_condition = 3;
  total_size += 1UL * this->_internal_signal_value_condition_size();
  for (const auto& msg : this->signal_value_condition_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .data_collection_configuration_request.CompositeLocation spatial_conditions = 2;
  if (this->has_spatial_conditions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spatial_conditions_);
  }

  // .data_collection_configuration_request.CollectionExtents extents = 4;
  if (this->has_extents()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extents_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobTerminationConditions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.JobTerminationConditions)
  GOOGLE_DCHECK_NE(&from, this);
  const JobTerminationConditions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JobTerminationConditions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.JobTerminationConditions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.JobTerminationConditions)
    MergeFrom(*source);
  }
}

void JobTerminationConditions::MergeFrom(const JobTerminationConditions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.JobTerminationConditions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  time_conditions_.MergeFrom(from.time_conditions_);
  signal_value_condition_.MergeFrom(from.signal_value_condition_);
  if (from.has_spatial_conditions()) {
    _internal_mutable_spatial_conditions()->::data_collection_configuration_request::CompositeLocation::MergeFrom(from._internal_spatial_conditions());
  }
  if (from.has_extents()) {
    _internal_mutable_extents()->::data_collection_configuration_request::CollectionExtents::MergeFrom(from._internal_extents());
  }
}

void JobTerminationConditions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.JobTerminationConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobTerminationConditions::CopyFrom(const JobTerminationConditions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.JobTerminationConditions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobTerminationConditions::IsInitialized() const {
  return true;
}

void JobTerminationConditions::InternalSwap(JobTerminationConditions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  time_conditions_.InternalSwap(&other->time_conditions_);
  signal_value_condition_.InternalSwap(&other->signal_value_condition_);
  swap(spatial_conditions_, other->spatial_conditions_);
  swap(extents_, other->extents_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JobTerminationConditions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimeDeltaTriggerEvent::InitAsDefaultInstance() {
}
class TimeDeltaTriggerEvent::_Internal {
 public:
};

TimeDeltaTriggerEvent::TimeDeltaTriggerEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.TimeDeltaTriggerEvent)
}
TimeDeltaTriggerEvent::TimeDeltaTriggerEvent(const TimeDeltaTriggerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_delta_milliseconds_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_delta_milliseconds_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.TimeDeltaTriggerEvent)
}

void TimeDeltaTriggerEvent::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_delta_milliseconds_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_delta_milliseconds_));
}

TimeDeltaTriggerEvent::~TimeDeltaTriggerEvent() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.TimeDeltaTriggerEvent)
  SharedDtor();
}

void TimeDeltaTriggerEvent::SharedDtor() {
}

void TimeDeltaTriggerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimeDeltaTriggerEvent& TimeDeltaTriggerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimeDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void TimeDeltaTriggerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.TimeDeltaTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_delta_milliseconds_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_delta_milliseconds_));
  _internal_metadata_.Clear();
}

const char* TimeDeltaTriggerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .data_collection_configuration_request.TimeDeltaTriggerEvent.TimeTriggerType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::data_collection_configuration_request::TimeDeltaTriggerEvent_TimeTriggerType>(val));
        } else goto handle_unusual;
        continue;
      // uint32 time_delta_milliseconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          time_delta_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimeDeltaTriggerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.TimeDeltaTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data_collection_configuration_request.TimeDeltaTriggerEvent.TimeTriggerType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 time_delta_milliseconds = 2;
  if (this->time_delta_milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_time_delta_milliseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.TimeDeltaTriggerEvent)
  return target;
}

size_t TimeDeltaTriggerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.TimeDeltaTriggerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .data_collection_configuration_request.TimeDeltaTriggerEvent.TimeTriggerType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 time_delta_milliseconds = 2;
  if (this->time_delta_milliseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_time_delta_milliseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimeDeltaTriggerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.TimeDeltaTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const TimeDeltaTriggerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimeDeltaTriggerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.TimeDeltaTriggerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.TimeDeltaTriggerEvent)
    MergeFrom(*source);
  }
}

void TimeDeltaTriggerEvent::MergeFrom(const TimeDeltaTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.TimeDeltaTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.time_delta_milliseconds() != 0) {
    _internal_set_time_delta_milliseconds(from._internal_time_delta_milliseconds());
  }
}

void TimeDeltaTriggerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.TimeDeltaTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimeDeltaTriggerEvent::CopyFrom(const TimeDeltaTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.TimeDeltaTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeDeltaTriggerEvent::IsInitialized() const {
  return true;
}

void TimeDeltaTriggerEvent::InternalSwap(TimeDeltaTriggerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(time_delta_milliseconds_, other->time_delta_milliseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeDeltaTriggerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DistanceDeltaTriggerEvent::InitAsDefaultInstance() {
}
class DistanceDeltaTriggerEvent::_Internal {
 public:
};

DistanceDeltaTriggerEvent::DistanceDeltaTriggerEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.DistanceDeltaTriggerEvent)
}
DistanceDeltaTriggerEvent::DistanceDeltaTriggerEvent(const DistanceDeltaTriggerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  distance_delta_meters_ = from.distance_delta_meters_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.DistanceDeltaTriggerEvent)
}

void DistanceDeltaTriggerEvent::SharedCtor() {
  distance_delta_meters_ = 0u;
}

DistanceDeltaTriggerEvent::~DistanceDeltaTriggerEvent() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.DistanceDeltaTriggerEvent)
  SharedDtor();
}

void DistanceDeltaTriggerEvent::SharedDtor() {
}

void DistanceDeltaTriggerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DistanceDeltaTriggerEvent& DistanceDeltaTriggerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DistanceDeltaTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DistanceDeltaTriggerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.DistanceDeltaTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  distance_delta_meters_ = 0u;
  _internal_metadata_.Clear();
}

const char* DistanceDeltaTriggerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 distance_delta_meters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          distance_delta_meters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DistanceDeltaTriggerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.DistanceDeltaTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 distance_delta_meters = 1;
  if (this->distance_delta_meters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_distance_delta_meters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.DistanceDeltaTriggerEvent)
  return target;
}

size_t DistanceDeltaTriggerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.DistanceDeltaTriggerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 distance_delta_meters = 1;
  if (this->distance_delta_meters() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_distance_delta_meters());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DistanceDeltaTriggerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.DistanceDeltaTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const DistanceDeltaTriggerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DistanceDeltaTriggerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.DistanceDeltaTriggerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.DistanceDeltaTriggerEvent)
    MergeFrom(*source);
  }
}

void DistanceDeltaTriggerEvent::MergeFrom(const DistanceDeltaTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.DistanceDeltaTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.distance_delta_meters() != 0) {
    _internal_set_distance_delta_meters(from._internal_distance_delta_meters());
  }
}

void DistanceDeltaTriggerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.DistanceDeltaTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DistanceDeltaTriggerEvent::CopyFrom(const DistanceDeltaTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.DistanceDeltaTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistanceDeltaTriggerEvent::IsInitialized() const {
  return true;
}

void DistanceDeltaTriggerEvent::InternalSwap(DistanceDeltaTriggerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(distance_delta_meters_, other->distance_delta_meters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DistanceDeltaTriggerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalChangeTriggerEvent::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_.default_signal_ = const_cast< ::signal_source_definition::DefaultSource*>(
      ::signal_source_definition::DefaultSource::internal_default_instance());
  ::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_.can_signal_ = const_cast< ::signal_source_definition::CanSource*>(
      ::signal_source_definition::CanSource::internal_default_instance());
  ::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_.lin_signal_ = const_cast< ::signal_source_definition::LinSource*>(
      ::signal_source_definition::LinSource::internal_default_instance());
  ::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_.ethernet_signal_ = const_cast< ::signal_source_definition::EthernetSource*>(
      ::signal_source_definition::EthernetSource::internal_default_instance());
  ::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_.network_signal_ = const_cast< ::signal_source_definition::NetworkSource*>(
      ::signal_source_definition::NetworkSource::internal_default_instance());
  ::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_.internal_signal_ = const_cast< ::signal_source_definition::InternalSource*>(
      ::signal_source_definition::InternalSource::internal_default_instance());
  ::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_.processing_toolbox_signal_ = const_cast< ::signal_source_definition::ProcessingToolboxSource*>(
      ::signal_source_definition::ProcessingToolboxSource::internal_default_instance());
  ::data_collection_configuration_request::_SignalChangeTriggerEvent_default_instance_.thriftme_signal_ = const_cast< ::signal_source_definition::ThriftmeSource*>(
      ::signal_source_definition::ThriftmeSource::internal_default_instance());
}
class SignalChangeTriggerEvent::_Internal {
 public:
  static const ::signal_source_definition::DefaultSource& default_signal(const SignalChangeTriggerEvent* msg);
  static const ::signal_source_definition::CanSource& can_signal(const SignalChangeTriggerEvent* msg);
  static const ::signal_source_definition::LinSource& lin_signal(const SignalChangeTriggerEvent* msg);
  static const ::signal_source_definition::EthernetSource& ethernet_signal(const SignalChangeTriggerEvent* msg);
  static const ::signal_source_definition::NetworkSource& network_signal(const SignalChangeTriggerEvent* msg);
  static const ::signal_source_definition::InternalSource& internal_signal(const SignalChangeTriggerEvent* msg);
  static const ::signal_source_definition::ProcessingToolboxSource& processing_toolbox_signal(const SignalChangeTriggerEvent* msg);
  static const ::signal_source_definition::ThriftmeSource& thriftme_signal(const SignalChangeTriggerEvent* msg);
};

const ::signal_source_definition::DefaultSource&
SignalChangeTriggerEvent::_Internal::default_signal(const SignalChangeTriggerEvent* msg) {
  return *msg->signal_definition_.default_signal_;
}
const ::signal_source_definition::CanSource&
SignalChangeTriggerEvent::_Internal::can_signal(const SignalChangeTriggerEvent* msg) {
  return *msg->signal_definition_.can_signal_;
}
const ::signal_source_definition::LinSource&
SignalChangeTriggerEvent::_Internal::lin_signal(const SignalChangeTriggerEvent* msg) {
  return *msg->signal_definition_.lin_signal_;
}
const ::signal_source_definition::EthernetSource&
SignalChangeTriggerEvent::_Internal::ethernet_signal(const SignalChangeTriggerEvent* msg) {
  return *msg->signal_definition_.ethernet_signal_;
}
const ::signal_source_definition::NetworkSource&
SignalChangeTriggerEvent::_Internal::network_signal(const SignalChangeTriggerEvent* msg) {
  return *msg->signal_definition_.network_signal_;
}
const ::signal_source_definition::InternalSource&
SignalChangeTriggerEvent::_Internal::internal_signal(const SignalChangeTriggerEvent* msg) {
  return *msg->signal_definition_.internal_signal_;
}
const ::signal_source_definition::ProcessingToolboxSource&
SignalChangeTriggerEvent::_Internal::processing_toolbox_signal(const SignalChangeTriggerEvent* msg) {
  return *msg->signal_definition_.processing_toolbox_signal_;
}
const ::signal_source_definition::ThriftmeSource&
SignalChangeTriggerEvent::_Internal::thriftme_signal(const SignalChangeTriggerEvent* msg) {
  return *msg->signal_definition_.thriftme_signal_;
}
void SignalChangeTriggerEvent::set_allocated_default_signal(::signal_source_definition::DefaultSource* default_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (default_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_signal, submessage_arena);
    }
    set_has_default_signal();
    signal_definition_.default_signal_ = default_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.SignalChangeTriggerEvent.default_signal)
}
void SignalChangeTriggerEvent::clear_default_signal() {
  if (_internal_has_default_signal()) {
    delete signal_definition_.default_signal_;
    clear_has_signal_definition();
  }
}
void SignalChangeTriggerEvent::set_allocated_can_signal(::signal_source_definition::CanSource* can_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (can_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      can_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_signal, submessage_arena);
    }
    set_has_can_signal();
    signal_definition_.can_signal_ = can_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.SignalChangeTriggerEvent.can_signal)
}
void SignalChangeTriggerEvent::clear_can_signal() {
  if (_internal_has_can_signal()) {
    delete signal_definition_.can_signal_;
    clear_has_signal_definition();
  }
}
void SignalChangeTriggerEvent::set_allocated_lin_signal(::signal_source_definition::LinSource* lin_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (lin_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lin_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lin_signal, submessage_arena);
    }
    set_has_lin_signal();
    signal_definition_.lin_signal_ = lin_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.SignalChangeTriggerEvent.lin_signal)
}
void SignalChangeTriggerEvent::clear_lin_signal() {
  if (_internal_has_lin_signal()) {
    delete signal_definition_.lin_signal_;
    clear_has_signal_definition();
  }
}
void SignalChangeTriggerEvent::set_allocated_ethernet_signal(::signal_source_definition::EthernetSource* ethernet_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (ethernet_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ethernet_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ethernet_signal, submessage_arena);
    }
    set_has_ethernet_signal();
    signal_definition_.ethernet_signal_ = ethernet_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.SignalChangeTriggerEvent.ethernet_signal)
}
void SignalChangeTriggerEvent::clear_ethernet_signal() {
  if (_internal_has_ethernet_signal()) {
    delete signal_definition_.ethernet_signal_;
    clear_has_signal_definition();
  }
}
void SignalChangeTriggerEvent::set_allocated_network_signal(::signal_source_definition::NetworkSource* network_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (network_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_signal, submessage_arena);
    }
    set_has_network_signal();
    signal_definition_.network_signal_ = network_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.SignalChangeTriggerEvent.network_signal)
}
void SignalChangeTriggerEvent::clear_network_signal() {
  if (_internal_has_network_signal()) {
    delete signal_definition_.network_signal_;
    clear_has_signal_definition();
  }
}
void SignalChangeTriggerEvent::set_allocated_internal_signal(::signal_source_definition::InternalSource* internal_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (internal_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      internal_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_signal, submessage_arena);
    }
    set_has_internal_signal();
    signal_definition_.internal_signal_ = internal_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.SignalChangeTriggerEvent.internal_signal)
}
void SignalChangeTriggerEvent::clear_internal_signal() {
  if (_internal_has_internal_signal()) {
    delete signal_definition_.internal_signal_;
    clear_has_signal_definition();
  }
}
void SignalChangeTriggerEvent::set_allocated_processing_toolbox_signal(::signal_source_definition::ProcessingToolboxSource* processing_toolbox_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (processing_toolbox_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      processing_toolbox_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_toolbox_signal, submessage_arena);
    }
    set_has_processing_toolbox_signal();
    signal_definition_.processing_toolbox_signal_ = processing_toolbox_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.SignalChangeTriggerEvent.processing_toolbox_signal)
}
void SignalChangeTriggerEvent::clear_processing_toolbox_signal() {
  if (_internal_has_processing_toolbox_signal()) {
    delete signal_definition_.processing_toolbox_signal_;
    clear_has_signal_definition();
  }
}
void SignalChangeTriggerEvent::set_allocated_thriftme_signal(::signal_source_definition::ThriftmeSource* thriftme_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (thriftme_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thriftme_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thriftme_signal, submessage_arena);
    }
    set_has_thriftme_signal();
    signal_definition_.thriftme_signal_ = thriftme_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.SignalChangeTriggerEvent.thriftme_signal)
}
void SignalChangeTriggerEvent::clear_thriftme_signal() {
  if (_internal_has_thriftme_signal()) {
    delete signal_definition_.thriftme_signal_;
    clear_has_signal_definition();
  }
}
SignalChangeTriggerEvent::SignalChangeTriggerEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.SignalChangeTriggerEvent)
}
SignalChangeTriggerEvent::SignalChangeTriggerEvent(const SignalChangeTriggerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  on_signal_change_ = from.on_signal_change_;
  clear_has_signal_definition();
  switch (from.signal_definition_case()) {
    case kDefaultSignal: {
      _internal_mutable_default_signal()->::signal_source_definition::DefaultSource::MergeFrom(from._internal_default_signal());
      break;
    }
    case kCanSignal: {
      _internal_mutable_can_signal()->::signal_source_definition::CanSource::MergeFrom(from._internal_can_signal());
      break;
    }
    case kLinSignal: {
      _internal_mutable_lin_signal()->::signal_source_definition::LinSource::MergeFrom(from._internal_lin_signal());
      break;
    }
    case kEthernetSignal: {
      _internal_mutable_ethernet_signal()->::signal_source_definition::EthernetSource::MergeFrom(from._internal_ethernet_signal());
      break;
    }
    case kNetworkSignal: {
      _internal_mutable_network_signal()->::signal_source_definition::NetworkSource::MergeFrom(from._internal_network_signal());
      break;
    }
    case kInternalSignal: {
      _internal_mutable_internal_signal()->::signal_source_definition::InternalSource::MergeFrom(from._internal_internal_signal());
      break;
    }
    case kProcessingToolboxSignal: {
      _internal_mutable_processing_toolbox_signal()->::signal_source_definition::ProcessingToolboxSource::MergeFrom(from._internal_processing_toolbox_signal());
      break;
    }
    case kThriftmeSignal: {
      _internal_mutable_thriftme_signal()->::signal_source_definition::ThriftmeSource::MergeFrom(from._internal_thriftme_signal());
      break;
    }
    case SIGNAL_DEFINITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.SignalChangeTriggerEvent)
}

void SignalChangeTriggerEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalChangeTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  on_signal_change_ = false;
  clear_has_signal_definition();
}

SignalChangeTriggerEvent::~SignalChangeTriggerEvent() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.SignalChangeTriggerEvent)
  SharedDtor();
}

void SignalChangeTriggerEvent::SharedDtor() {
  if (has_signal_definition()) {
    clear_signal_definition();
  }
}

void SignalChangeTriggerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalChangeTriggerEvent& SignalChangeTriggerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalChangeTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SignalChangeTriggerEvent::clear_signal_definition() {
// @@protoc_insertion_point(one_of_clear_start:data_collection_configuration_request.SignalChangeTriggerEvent)
  switch (signal_definition_case()) {
    case kDefaultSignal: {
      delete signal_definition_.default_signal_;
      break;
    }
    case kCanSignal: {
      delete signal_definition_.can_signal_;
      break;
    }
    case kLinSignal: {
      delete signal_definition_.lin_signal_;
      break;
    }
    case kEthernetSignal: {
      delete signal_definition_.ethernet_signal_;
      break;
    }
    case kNetworkSignal: {
      delete signal_definition_.network_signal_;
      break;
    }
    case kInternalSignal: {
      delete signal_definition_.internal_signal_;
      break;
    }
    case kProcessingToolboxSignal: {
      delete signal_definition_.processing_toolbox_signal_;
      break;
    }
    case kThriftmeSignal: {
      delete signal_definition_.thriftme_signal_;
      break;
    }
    case SIGNAL_DEFINITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SIGNAL_DEFINITION_NOT_SET;
}


void SignalChangeTriggerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.SignalChangeTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  on_signal_change_ = false;
  clear_signal_definition();
  _internal_metadata_.Clear();
}

const char* SignalChangeTriggerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool on_signal_change = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          on_signal_change_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.DefaultSource default_signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.CanSource can_signal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.LinSource lin_signal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_lin_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.EthernetSource ethernet_signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethernet_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.NetworkSource network_signal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.InternalSource internal_signal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.ProcessingToolboxSource processing_toolbox_signal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_toolbox_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.ThriftmeSource thriftme_signal = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_thriftme_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalChangeTriggerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.SignalChangeTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on_signal_change = 1;
  if (this->on_signal_change() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_on_signal_change(), target);
  }

  // .signal_source_definition.DefaultSource default_signal = 2;
  if (_internal_has_default_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::default_signal(this), target, stream);
  }

  // .signal_source_definition.CanSource can_signal = 3;
  if (_internal_has_can_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::can_signal(this), target, stream);
  }

  // .signal_source_definition.LinSource lin_signal = 4;
  if (_internal_has_lin_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::lin_signal(this), target, stream);
  }

  // .signal_source_definition.EthernetSource ethernet_signal = 5;
  if (_internal_has_ethernet_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ethernet_signal(this), target, stream);
  }

  // .signal_source_definition.NetworkSource network_signal = 6;
  if (_internal_has_network_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::network_signal(this), target, stream);
  }

  // .signal_source_definition.InternalSource internal_signal = 7;
  if (_internal_has_internal_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::internal_signal(this), target, stream);
  }

  // .signal_source_definition.ProcessingToolboxSource processing_toolbox_signal = 8;
  if (_internal_has_processing_toolbox_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::processing_toolbox_signal(this), target, stream);
  }

  // .signal_source_definition.ThriftmeSource thriftme_signal = 9;
  if (_internal_has_thriftme_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::thriftme_signal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.SignalChangeTriggerEvent)
  return target;
}

size_t SignalChangeTriggerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.SignalChangeTriggerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool on_signal_change = 1;
  if (this->on_signal_change() != 0) {
    total_size += 1 + 1;
  }

  switch (signal_definition_case()) {
    // .signal_source_definition.DefaultSource default_signal = 2;
    case kDefaultSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.default_signal_);
      break;
    }
    // .signal_source_definition.CanSource can_signal = 3;
    case kCanSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.can_signal_);
      break;
    }
    // .signal_source_definition.LinSource lin_signal = 4;
    case kLinSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.lin_signal_);
      break;
    }
    // .signal_source_definition.EthernetSource ethernet_signal = 5;
    case kEthernetSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.ethernet_signal_);
      break;
    }
    // .signal_source_definition.NetworkSource network_signal = 6;
    case kNetworkSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.network_signal_);
      break;
    }
    // .signal_source_definition.InternalSource internal_signal = 7;
    case kInternalSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.internal_signal_);
      break;
    }
    // .signal_source_definition.ProcessingToolboxSource processing_toolbox_signal = 8;
    case kProcessingToolboxSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.processing_toolbox_signal_);
      break;
    }
    // .signal_source_definition.ThriftmeSource thriftme_signal = 9;
    case kThriftmeSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.thriftme_signal_);
      break;
    }
    case SIGNAL_DEFINITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalChangeTriggerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.SignalChangeTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalChangeTriggerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalChangeTriggerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.SignalChangeTriggerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.SignalChangeTriggerEvent)
    MergeFrom(*source);
  }
}

void SignalChangeTriggerEvent::MergeFrom(const SignalChangeTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.SignalChangeTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.on_signal_change() != 0) {
    _internal_set_on_signal_change(from._internal_on_signal_change());
  }
  switch (from.signal_definition_case()) {
    case kDefaultSignal: {
      _internal_mutable_default_signal()->::signal_source_definition::DefaultSource::MergeFrom(from._internal_default_signal());
      break;
    }
    case kCanSignal: {
      _internal_mutable_can_signal()->::signal_source_definition::CanSource::MergeFrom(from._internal_can_signal());
      break;
    }
    case kLinSignal: {
      _internal_mutable_lin_signal()->::signal_source_definition::LinSource::MergeFrom(from._internal_lin_signal());
      break;
    }
    case kEthernetSignal: {
      _internal_mutable_ethernet_signal()->::signal_source_definition::EthernetSource::MergeFrom(from._internal_ethernet_signal());
      break;
    }
    case kNetworkSignal: {
      _internal_mutable_network_signal()->::signal_source_definition::NetworkSource::MergeFrom(from._internal_network_signal());
      break;
    }
    case kInternalSignal: {
      _internal_mutable_internal_signal()->::signal_source_definition::InternalSource::MergeFrom(from._internal_internal_signal());
      break;
    }
    case kProcessingToolboxSignal: {
      _internal_mutable_processing_toolbox_signal()->::signal_source_definition::ProcessingToolboxSource::MergeFrom(from._internal_processing_toolbox_signal());
      break;
    }
    case kThriftmeSignal: {
      _internal_mutable_thriftme_signal()->::signal_source_definition::ThriftmeSource::MergeFrom(from._internal_thriftme_signal());
      break;
    }
    case SIGNAL_DEFINITION_NOT_SET: {
      break;
    }
  }
}

void SignalChangeTriggerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.SignalChangeTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalChangeTriggerEvent::CopyFrom(const SignalChangeTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.SignalChangeTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalChangeTriggerEvent::IsInitialized() const {
  return true;
}

void SignalChangeTriggerEvent::InternalSwap(SignalChangeTriggerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(on_signal_change_, other->on_signal_change_);
  swap(signal_definition_, other->signal_definition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalChangeTriggerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalTransitionTriggerEvent::InitAsDefaultInstance() {
}
class SignalTransitionTriggerEvent::_Internal {
 public:
};

void SignalTransitionTriggerEvent::clear_logical_expression() {
  logical_expression_.Clear();
}
SignalTransitionTriggerEvent::SignalTransitionTriggerEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.SignalTransitionTriggerEvent)
}
SignalTransitionTriggerEvent::SignalTransitionTriggerEvent(const SignalTransitionTriggerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      logical_expression_(from.logical_expression_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.SignalTransitionTriggerEvent)
}

void SignalTransitionTriggerEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SignalTransitionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
}

SignalTransitionTriggerEvent::~SignalTransitionTriggerEvent() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.SignalTransitionTriggerEvent)
  SharedDtor();
}

void SignalTransitionTriggerEvent::SharedDtor() {
}

void SignalTransitionTriggerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalTransitionTriggerEvent& SignalTransitionTriggerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalTransitionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SignalTransitionTriggerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.SignalTransitionTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logical_expression_.Clear();
  _internal_metadata_.Clear();
}

const char* SignalTransitionTriggerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .logical_expression.LogicalExpression logical_expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_logical_expression(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalTransitionTriggerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.SignalTransitionTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .logical_expression.LogicalExpression logical_expression = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_logical_expression_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_logical_expression(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.SignalTransitionTriggerEvent)
  return target;
}

size_t SignalTransitionTriggerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.SignalTransitionTriggerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .logical_expression.LogicalExpression logical_expression = 1;
  total_size += 1UL * this->_internal_logical_expression_size();
  for (const auto& msg : this->logical_expression_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalTransitionTriggerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.SignalTransitionTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalTransitionTriggerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalTransitionTriggerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.SignalTransitionTriggerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.SignalTransitionTriggerEvent)
    MergeFrom(*source);
  }
}

void SignalTransitionTriggerEvent::MergeFrom(const SignalTransitionTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.SignalTransitionTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logical_expression_.MergeFrom(from.logical_expression_);
}

void SignalTransitionTriggerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.SignalTransitionTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalTransitionTriggerEvent::CopyFrom(const SignalTransitionTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.SignalTransitionTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalTransitionTriggerEvent::IsInitialized() const {
  return true;
}

void SignalTransitionTriggerEvent::InternalSwap(SignalTransitionTriggerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  logical_expression_.InternalSwap(&other->logical_expression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalTransitionTriggerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SignalCollectionCount::InitAsDefaultInstance() {
}
class SignalCollectionCount::_Internal {
 public:
};

SignalCollectionCount::SignalCollectionCount()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.SignalCollectionCount)
}
SignalCollectionCount::SignalCollectionCount(const SignalCollectionCount& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.SignalCollectionCount)
}

void SignalCollectionCount::SharedCtor() {
  count_ = 0u;
}

SignalCollectionCount::~SignalCollectionCount() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.SignalCollectionCount)
  SharedDtor();
}

void SignalCollectionCount::SharedDtor() {
}

void SignalCollectionCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SignalCollectionCount& SignalCollectionCount::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SignalCollectionCount_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void SignalCollectionCount::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.SignalCollectionCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  count_ = 0u;
  _internal_metadata_.Clear();
}

const char* SignalCollectionCount::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SignalCollectionCount::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.SignalCollectionCount)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.SignalCollectionCount)
  return target;
}

size_t SignalCollectionCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.SignalCollectionCount)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignalCollectionCount::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.SignalCollectionCount)
  GOOGLE_DCHECK_NE(&from, this);
  const SignalCollectionCount* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SignalCollectionCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.SignalCollectionCount)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.SignalCollectionCount)
    MergeFrom(*source);
  }
}

void SignalCollectionCount::MergeFrom(const SignalCollectionCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.SignalCollectionCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void SignalCollectionCount::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.SignalCollectionCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignalCollectionCount::CopyFrom(const SignalCollectionCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.SignalCollectionCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignalCollectionCount::IsInitialized() const {
  return true;
}

void SignalCollectionCount::InternalSwap(SignalCollectionCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(count_, other->count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SignalCollectionCount::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoRegionTriggerEvent::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_GeoRegionTriggerEvent_default_instance_._instance.get_mutable()->geo_area_ = const_cast< ::data_collection_configuration_request::CompositeLocation*>(
      ::data_collection_configuration_request::CompositeLocation::internal_default_instance());
  ::data_collection_configuration_request::_GeoRegionTriggerEvent_default_instance_._instance.get_mutable()->geo_action_ = const_cast< ::data_collection_configuration_request::GeoAction*>(
      ::data_collection_configuration_request::GeoAction::internal_default_instance());
}
class GeoRegionTriggerEvent::_Internal {
 public:
  static const ::data_collection_configuration_request::CompositeLocation& geo_area(const GeoRegionTriggerEvent* msg);
  static const ::data_collection_configuration_request::GeoAction& geo_action(const GeoRegionTriggerEvent* msg);
};

const ::data_collection_configuration_request::CompositeLocation&
GeoRegionTriggerEvent::_Internal::geo_area(const GeoRegionTriggerEvent* msg) {
  return *msg->geo_area_;
}
const ::data_collection_configuration_request::GeoAction&
GeoRegionTriggerEvent::_Internal::geo_action(const GeoRegionTriggerEvent* msg) {
  return *msg->geo_action_;
}
GeoRegionTriggerEvent::GeoRegionTriggerEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.GeoRegionTriggerEvent)
}
GeoRegionTriggerEvent::GeoRegionTriggerEvent(const GeoRegionTriggerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_geo_area()) {
    geo_area_ = new ::data_collection_configuration_request::CompositeLocation(*from.geo_area_);
  } else {
    geo_area_ = nullptr;
  }
  if (from._internal_has_geo_action()) {
    geo_action_ = new ::data_collection_configuration_request::GeoAction(*from.geo_action_);
  } else {
    geo_action_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.GeoRegionTriggerEvent)
}

void GeoRegionTriggerEvent::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GeoRegionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  ::memset(&geo_area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&geo_action_) -
      reinterpret_cast<char*>(&geo_area_)) + sizeof(geo_action_));
}

GeoRegionTriggerEvent::~GeoRegionTriggerEvent() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.GeoRegionTriggerEvent)
  SharedDtor();
}

void GeoRegionTriggerEvent::SharedDtor() {
  if (this != internal_default_instance()) delete geo_area_;
  if (this != internal_default_instance()) delete geo_action_;
}

void GeoRegionTriggerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoRegionTriggerEvent& GeoRegionTriggerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoRegionTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GeoRegionTriggerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.GeoRegionTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && geo_area_ != nullptr) {
    delete geo_area_;
  }
  geo_area_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && geo_action_ != nullptr) {
    delete geo_action_;
  }
  geo_action_ = nullptr;
  _internal_metadata_.Clear();
}

const char* GeoRegionTriggerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .data_collection_configuration_request.CompositeLocation geo_area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.GeoAction geo_action = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoRegionTriggerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.GeoRegionTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data_collection_configuration_request.CompositeLocation geo_area = 1;
  if (this->has_geo_area()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::geo_area(this), target, stream);
  }

  // .data_collection_configuration_request.GeoAction geo_action = 2;
  if (this->has_geo_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::geo_action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.GeoRegionTriggerEvent)
  return target;
}

size_t GeoRegionTriggerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.GeoRegionTriggerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .data_collection_configuration_request.CompositeLocation geo_area = 1;
  if (this->has_geo_area()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_area_);
  }

  // .data_collection_configuration_request.GeoAction geo_action = 2;
  if (this->has_geo_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geo_action_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoRegionTriggerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.GeoRegionTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoRegionTriggerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoRegionTriggerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.GeoRegionTriggerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.GeoRegionTriggerEvent)
    MergeFrom(*source);
  }
}

void GeoRegionTriggerEvent::MergeFrom(const GeoRegionTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.GeoRegionTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_geo_area()) {
    _internal_mutable_geo_area()->::data_collection_configuration_request::CompositeLocation::MergeFrom(from._internal_geo_area());
  }
  if (from.has_geo_action()) {
    _internal_mutable_geo_action()->::data_collection_configuration_request::GeoAction::MergeFrom(from._internal_geo_action());
  }
}

void GeoRegionTriggerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.GeoRegionTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoRegionTriggerEvent::CopyFrom(const GeoRegionTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.GeoRegionTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoRegionTriggerEvent::IsInitialized() const {
  return true;
}

void GeoRegionTriggerEvent::InternalSwap(GeoRegionTriggerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(geo_area_, other->geo_area_);
  swap(geo_action_, other->geo_action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoRegionTriggerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectAfterTriggerEvent::InitAsDefaultInstance() {
}
class CollectAfterTriggerEvent::_Internal {
 public:
};

CollectAfterTriggerEvent::CollectAfterTriggerEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.CollectAfterTriggerEvent)
}
CollectAfterTriggerEvent::CollectAfterTriggerEvent(const CollectAfterTriggerEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&collect_after_distance_meter_min_, &from.collect_after_distance_meter_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&collect_after_time_seconds_max_) -
    reinterpret_cast<char*>(&collect_after_distance_meter_min_)) + sizeof(collect_after_time_seconds_max_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.CollectAfterTriggerEvent)
}

void CollectAfterTriggerEvent::SharedCtor() {
  ::memset(&collect_after_distance_meter_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_after_time_seconds_max_) -
      reinterpret_cast<char*>(&collect_after_distance_meter_min_)) + sizeof(collect_after_time_seconds_max_));
}

CollectAfterTriggerEvent::~CollectAfterTriggerEvent() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.CollectAfterTriggerEvent)
  SharedDtor();
}

void CollectAfterTriggerEvent::SharedDtor() {
}

void CollectAfterTriggerEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectAfterTriggerEvent& CollectAfterTriggerEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectAfterTriggerEvent_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CollectAfterTriggerEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.CollectAfterTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&collect_after_distance_meter_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_after_time_seconds_max_) -
      reinterpret_cast<char*>(&collect_after_distance_meter_min_)) + sizeof(collect_after_time_seconds_max_));
  _internal_metadata_.Clear();
}

const char* CollectAfterTriggerEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double collect_after_distance_meter_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          collect_after_distance_meter_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double collect_after_distance_meter_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          collect_after_distance_meter_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double collect_after_time_seconds_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          collect_after_time_seconds_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double collect_after_time_seconds_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          collect_after_time_seconds_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectAfterTriggerEvent::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.CollectAfterTriggerEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double collect_after_distance_meter_min = 1;
  if (!(this->collect_after_distance_meter_min() <= 0 && this->collect_after_distance_meter_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_collect_after_distance_meter_min(), target);
  }

  // double collect_after_distance_meter_max = 2;
  if (!(this->collect_after_distance_meter_max() <= 0 && this->collect_after_distance_meter_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_collect_after_distance_meter_max(), target);
  }

  // double collect_after_time_seconds_min = 3;
  if (!(this->collect_after_time_seconds_min() <= 0 && this->collect_after_time_seconds_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_collect_after_time_seconds_min(), target);
  }

  // double collect_after_time_seconds_max = 4;
  if (!(this->collect_after_time_seconds_max() <= 0 && this->collect_after_time_seconds_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_collect_after_time_seconds_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.CollectAfterTriggerEvent)
  return target;
}

size_t CollectAfterTriggerEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.CollectAfterTriggerEvent)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double collect_after_distance_meter_min = 1;
  if (!(this->collect_after_distance_meter_min() <= 0 && this->collect_after_distance_meter_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double collect_after_distance_meter_max = 2;
  if (!(this->collect_after_distance_meter_max() <= 0 && this->collect_after_distance_meter_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double collect_after_time_seconds_min = 3;
  if (!(this->collect_after_time_seconds_min() <= 0 && this->collect_after_time_seconds_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double collect_after_time_seconds_max = 4;
  if (!(this->collect_after_time_seconds_max() <= 0 && this->collect_after_time_seconds_max() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectAfterTriggerEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.CollectAfterTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectAfterTriggerEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectAfterTriggerEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.CollectAfterTriggerEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.CollectAfterTriggerEvent)
    MergeFrom(*source);
  }
}

void CollectAfterTriggerEvent::MergeFrom(const CollectAfterTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.CollectAfterTriggerEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.collect_after_distance_meter_min() <= 0 && from.collect_after_distance_meter_min() >= 0)) {
    _internal_set_collect_after_distance_meter_min(from._internal_collect_after_distance_meter_min());
  }
  if (!(from.collect_after_distance_meter_max() <= 0 && from.collect_after_distance_meter_max() >= 0)) {
    _internal_set_collect_after_distance_meter_max(from._internal_collect_after_distance_meter_max());
  }
  if (!(from.collect_after_time_seconds_min() <= 0 && from.collect_after_time_seconds_min() >= 0)) {
    _internal_set_collect_after_time_seconds_min(from._internal_collect_after_time_seconds_min());
  }
  if (!(from.collect_after_time_seconds_max() <= 0 && from.collect_after_time_seconds_max() >= 0)) {
    _internal_set_collect_after_time_seconds_max(from._internal_collect_after_time_seconds_max());
  }
}

void CollectAfterTriggerEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.CollectAfterTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectAfterTriggerEvent::CopyFrom(const CollectAfterTriggerEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.CollectAfterTriggerEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectAfterTriggerEvent::IsInitialized() const {
  return true;
}

void CollectAfterTriggerEvent::InternalSwap(CollectAfterTriggerEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(collect_after_distance_meter_min_, other->collect_after_distance_meter_min_);
  swap(collect_after_distance_meter_max_, other->collect_after_distance_meter_max_);
  swap(collect_after_time_seconds_min_, other->collect_after_time_seconds_min_);
  swap(collect_after_time_seconds_max_, other->collect_after_time_seconds_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectAfterTriggerEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GeoAction::InitAsDefaultInstance() {
}
class GeoAction::_Internal {
 public:
};

GeoAction::GeoAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.GeoAction)
}
GeoAction::GeoAction(const GeoAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&on_entry_, &from.on_entry_,
    static_cast<size_t>(reinterpret_cast<char*>(&collect_while_outside_) -
    reinterpret_cast<char*>(&on_entry_)) + sizeof(collect_while_outside_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.GeoAction)
}

void GeoAction::SharedCtor() {
  ::memset(&on_entry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_while_outside_) -
      reinterpret_cast<char*>(&on_entry_)) + sizeof(collect_while_outside_));
}

GeoAction::~GeoAction() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.GeoAction)
  SharedDtor();
}

void GeoAction::SharedDtor() {
}

void GeoAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GeoAction& GeoAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GeoAction_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void GeoAction::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.GeoAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&on_entry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&collect_while_outside_) -
      reinterpret_cast<char*>(&on_entry_)) + sizeof(collect_while_outside_));
  _internal_metadata_.Clear();
}

const char* GeoAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool on_entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          on_entry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool on_exit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          on_exit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool collect_while_inside = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          collect_while_inside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool collect_while_outside = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          collect_while_outside_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GeoAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.GeoAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool on_entry = 1;
  if (this->on_entry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_on_entry(), target);
  }

  // bool on_exit = 2;
  if (this->on_exit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_on_exit(), target);
  }

  // bool collect_while_inside = 3;
  if (this->collect_while_inside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_collect_while_inside(), target);
  }

  // bool collect_while_outside = 4;
  if (this->collect_while_outside() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_collect_while_outside(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.GeoAction)
  return target;
}

size_t GeoAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.GeoAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool on_entry = 1;
  if (this->on_entry() != 0) {
    total_size += 1 + 1;
  }

  // bool on_exit = 2;
  if (this->on_exit() != 0) {
    total_size += 1 + 1;
  }

  // bool collect_while_inside = 3;
  if (this->collect_while_inside() != 0) {
    total_size += 1 + 1;
  }

  // bool collect_while_outside = 4;
  if (this->collect_while_outside() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GeoAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.GeoAction)
  GOOGLE_DCHECK_NE(&from, this);
  const GeoAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GeoAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.GeoAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.GeoAction)
    MergeFrom(*source);
  }
}

void GeoAction::MergeFrom(const GeoAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.GeoAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.on_entry() != 0) {
    _internal_set_on_entry(from._internal_on_entry());
  }
  if (from.on_exit() != 0) {
    _internal_set_on_exit(from._internal_on_exit());
  }
  if (from.collect_while_inside() != 0) {
    _internal_set_collect_while_inside(from._internal_collect_while_inside());
  }
  if (from.collect_while_outside() != 0) {
    _internal_set_collect_while_outside(from._internal_collect_while_outside());
  }
}

void GeoAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.GeoAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeoAction::CopyFrom(const GeoAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.GeoAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoAction::IsInitialized() const {
  return true;
}

void GeoAction::InternalSwap(GeoAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(on_entry_, other->on_entry_);
  swap(on_exit_, other->on_exit_);
  swap(collect_while_inside_, other->collect_while_inside_);
  swap(collect_while_outside_, other->collect_while_outside_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void KeyValuePair::InitAsDefaultInstance() {
}
class KeyValuePair::_Internal {
 public:
};

KeyValuePair::KeyValuePair()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.KeyValuePair)
}
KeyValuePair::KeyValuePair(const KeyValuePair& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.KeyValuePair)
}

void KeyValuePair::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_KeyValuePair_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

KeyValuePair::~KeyValuePair() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.KeyValuePair)
  SharedDtor();
}

void KeyValuePair::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KeyValuePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const KeyValuePair& KeyValuePair::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_KeyValuePair_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void KeyValuePair::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.KeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* KeyValuePair::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "data_collection_configuration_request.KeyValuePair.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "data_collection_configuration_request.KeyValuePair.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* KeyValuePair::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.KeyValuePair)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data_collection_configuration_request.KeyValuePair.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data_collection_configuration_request.KeyValuePair.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.KeyValuePair)
  return target;
}

size_t KeyValuePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.KeyValuePair)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValuePair::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValuePair* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<KeyValuePair>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.KeyValuePair)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.KeyValuePair)
    MergeFrom(*source);
  }
}

void KeyValuePair::MergeFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.KeyValuePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void KeyValuePair::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValuePair::CopyFrom(const KeyValuePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.KeyValuePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValuePair::IsInitialized() const {
  return true;
}

void KeyValuePair::InternalSwap(KeyValuePair* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValuePair::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TriggerAnnotationID::InitAsDefaultInstance() {
}
class TriggerAnnotationID::_Internal {
 public:
};

TriggerAnnotationID::TriggerAnnotationID()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.TriggerAnnotationID)
}
TriggerAnnotationID::TriggerAnnotationID(const TriggerAnnotationID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.TriggerAnnotationID)
}

void TriggerAnnotationID::SharedCtor() {
  id_ = 0u;
}

TriggerAnnotationID::~TriggerAnnotationID() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.TriggerAnnotationID)
  SharedDtor();
}

void TriggerAnnotationID::SharedDtor() {
}

void TriggerAnnotationID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TriggerAnnotationID& TriggerAnnotationID::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TriggerAnnotationID_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void TriggerAnnotationID::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.TriggerAnnotationID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_ = 0u;
  _internal_metadata_.Clear();
}

const char* TriggerAnnotationID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TriggerAnnotationID::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.TriggerAnnotationID)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.TriggerAnnotationID)
  return target;
}

size_t TriggerAnnotationID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.TriggerAnnotationID)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TriggerAnnotationID::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.TriggerAnnotationID)
  GOOGLE_DCHECK_NE(&from, this);
  const TriggerAnnotationID* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TriggerAnnotationID>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.TriggerAnnotationID)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.TriggerAnnotationID)
    MergeFrom(*source);
  }
}

void TriggerAnnotationID::MergeFrom(const TriggerAnnotationID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.TriggerAnnotationID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void TriggerAnnotationID::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.TriggerAnnotationID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TriggerAnnotationID::CopyFrom(const TriggerAnnotationID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.TriggerAnnotationID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TriggerAnnotationID::IsInitialized() const {
  return true;
}

void TriggerAnnotationID::InternalSwap(TriggerAnnotationID* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TriggerAnnotationID::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Trigger::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_Trigger_default_instance_.time_delta_trigger_event_ = const_cast< ::data_collection_configuration_request::TimeDeltaTriggerEvent*>(
      ::data_collection_configuration_request::TimeDeltaTriggerEvent::internal_default_instance());
  ::data_collection_configuration_request::_Trigger_default_instance_.distance_delta_trigger_event_ = const_cast< ::data_collection_configuration_request::DistanceDeltaTriggerEvent*>(
      ::data_collection_configuration_request::DistanceDeltaTriggerEvent::internal_default_instance());
  ::data_collection_configuration_request::_Trigger_default_instance_.signal_change_trigger_event_ = const_cast< ::data_collection_configuration_request::SignalChangeTriggerEvent*>(
      ::data_collection_configuration_request::SignalChangeTriggerEvent::internal_default_instance());
  ::data_collection_configuration_request::_Trigger_default_instance_.signal_transition_trigger_event_ = const_cast< ::data_collection_configuration_request::SignalTransitionTriggerEvent*>(
      ::data_collection_configuration_request::SignalTransitionTriggerEvent::internal_default_instance());
  ::data_collection_configuration_request::_Trigger_default_instance_.geo_region_trigger_event_ = const_cast< ::data_collection_configuration_request::GeoRegionTriggerEvent*>(
      ::data_collection_configuration_request::GeoRegionTriggerEvent::internal_default_instance());
  ::data_collection_configuration_request::_Trigger_default_instance_.count_ = const_cast< ::data_collection_configuration_request::SignalCollectionCount*>(
      ::data_collection_configuration_request::SignalCollectionCount::internal_default_instance());
  ::data_collection_configuration_request::_Trigger_default_instance_.signal_collection_native_frequency_ = false;
  ::data_collection_configuration_request::_Trigger_default_instance_.collect_after_trigger_event_ = const_cast< ::data_collection_configuration_request::CollectAfterTriggerEvent*>(
      ::data_collection_configuration_request::CollectAfterTriggerEvent::internal_default_instance());
}
class Trigger::_Internal {
 public:
  static const ::data_collection_configuration_request::TimeDeltaTriggerEvent& time_delta_trigger_event(const Trigger* msg);
  static const ::data_collection_configuration_request::DistanceDeltaTriggerEvent& distance_delta_trigger_event(const Trigger* msg);
  static const ::data_collection_configuration_request::SignalChangeTriggerEvent& signal_change_trigger_event(const Trigger* msg);
  static const ::data_collection_configuration_request::SignalTransitionTriggerEvent& signal_transition_trigger_event(const Trigger* msg);
  static const ::data_collection_configuration_request::GeoRegionTriggerEvent& geo_region_trigger_event(const Trigger* msg);
  static const ::data_collection_configuration_request::SignalCollectionCount& count(const Trigger* msg);
  static const ::data_collection_configuration_request::CollectAfterTriggerEvent& collect_after_trigger_event(const Trigger* msg);
};

const ::data_collection_configuration_request::TimeDeltaTriggerEvent&
Trigger::_Internal::time_delta_trigger_event(const Trigger* msg) {
  return *msg->CollectionConfiguration_.time_delta_trigger_event_;
}
const ::data_collection_configuration_request::DistanceDeltaTriggerEvent&
Trigger::_Internal::distance_delta_trigger_event(const Trigger* msg) {
  return *msg->CollectionConfiguration_.distance_delta_trigger_event_;
}
const ::data_collection_configuration_request::SignalChangeTriggerEvent&
Trigger::_Internal::signal_change_trigger_event(const Trigger* msg) {
  return *msg->CollectionConfiguration_.signal_change_trigger_event_;
}
const ::data_collection_configuration_request::SignalTransitionTriggerEvent&
Trigger::_Internal::signal_transition_trigger_event(const Trigger* msg) {
  return *msg->CollectionConfiguration_.signal_transition_trigger_event_;
}
const ::data_collection_configuration_request::GeoRegionTriggerEvent&
Trigger::_Internal::geo_region_trigger_event(const Trigger* msg) {
  return *msg->CollectionConfiguration_.geo_region_trigger_event_;
}
const ::data_collection_configuration_request::SignalCollectionCount&
Trigger::_Internal::count(const Trigger* msg) {
  return *msg->CollectionConfiguration_.count_;
}
const ::data_collection_configuration_request::CollectAfterTriggerEvent&
Trigger::_Internal::collect_after_trigger_event(const Trigger* msg) {
  return *msg->CollectionConfiguration_.collect_after_trigger_event_;
}
void Trigger::set_allocated_time_delta_trigger_event(::data_collection_configuration_request::TimeDeltaTriggerEvent* time_delta_trigger_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CollectionConfiguration();
  if (time_delta_trigger_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_delta_trigger_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_delta_trigger_event, submessage_arena);
    }
    set_has_time_delta_trigger_event();
    CollectionConfiguration_.time_delta_trigger_event_ = time_delta_trigger_event;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Trigger.time_delta_trigger_event)
}
void Trigger::set_allocated_distance_delta_trigger_event(::data_collection_configuration_request::DistanceDeltaTriggerEvent* distance_delta_trigger_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CollectionConfiguration();
  if (distance_delta_trigger_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      distance_delta_trigger_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distance_delta_trigger_event, submessage_arena);
    }
    set_has_distance_delta_trigger_event();
    CollectionConfiguration_.distance_delta_trigger_event_ = distance_delta_trigger_event;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Trigger.distance_delta_trigger_event)
}
void Trigger::set_allocated_signal_change_trigger_event(::data_collection_configuration_request::SignalChangeTriggerEvent* signal_change_trigger_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CollectionConfiguration();
  if (signal_change_trigger_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signal_change_trigger_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_change_trigger_event, submessage_arena);
    }
    set_has_signal_change_trigger_event();
    CollectionConfiguration_.signal_change_trigger_event_ = signal_change_trigger_event;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Trigger.signal_change_trigger_event)
}
void Trigger::set_allocated_signal_transition_trigger_event(::data_collection_configuration_request::SignalTransitionTriggerEvent* signal_transition_trigger_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CollectionConfiguration();
  if (signal_transition_trigger_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      signal_transition_trigger_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal_transition_trigger_event, submessage_arena);
    }
    set_has_signal_transition_trigger_event();
    CollectionConfiguration_.signal_transition_trigger_event_ = signal_transition_trigger_event;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Trigger.signal_transition_trigger_event)
}
void Trigger::set_allocated_geo_region_trigger_event(::data_collection_configuration_request::GeoRegionTriggerEvent* geo_region_trigger_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CollectionConfiguration();
  if (geo_region_trigger_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geo_region_trigger_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geo_region_trigger_event, submessage_arena);
    }
    set_has_geo_region_trigger_event();
    CollectionConfiguration_.geo_region_trigger_event_ = geo_region_trigger_event;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Trigger.geo_region_trigger_event)
}
void Trigger::set_allocated_count(::data_collection_configuration_request::SignalCollectionCount* count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CollectionConfiguration();
  if (count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, count, submessage_arena);
    }
    set_has_count();
    CollectionConfiguration_.count_ = count;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Trigger.count)
}
void Trigger::set_allocated_collect_after_trigger_event(::data_collection_configuration_request::CollectAfterTriggerEvent* collect_after_trigger_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_CollectionConfiguration();
  if (collect_after_trigger_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collect_after_trigger_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collect_after_trigger_event, submessage_arena);
    }
    set_has_collect_after_trigger_event();
    CollectionConfiguration_.collect_after_trigger_event_ = collect_after_trigger_event;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Trigger.collect_after_trigger_event)
}
Trigger::Trigger()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.Trigger)
}
Trigger::Trigger(const Trigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      trigger_annotation_ids_(from.trigger_annotation_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_CollectionConfiguration();
  switch (from.CollectionConfiguration_case()) {
    case kTimeDeltaTriggerEvent: {
      _internal_mutable_time_delta_trigger_event()->::data_collection_configuration_request::TimeDeltaTriggerEvent::MergeFrom(from._internal_time_delta_trigger_event());
      break;
    }
    case kDistanceDeltaTriggerEvent: {
      _internal_mutable_distance_delta_trigger_event()->::data_collection_configuration_request::DistanceDeltaTriggerEvent::MergeFrom(from._internal_distance_delta_trigger_event());
      break;
    }
    case kSignalChangeTriggerEvent: {
      _internal_mutable_signal_change_trigger_event()->::data_collection_configuration_request::SignalChangeTriggerEvent::MergeFrom(from._internal_signal_change_trigger_event());
      break;
    }
    case kSignalTransitionTriggerEvent: {
      _internal_mutable_signal_transition_trigger_event()->::data_collection_configuration_request::SignalTransitionTriggerEvent::MergeFrom(from._internal_signal_transition_trigger_event());
      break;
    }
    case kGeoRegionTriggerEvent: {
      _internal_mutable_geo_region_trigger_event()->::data_collection_configuration_request::GeoRegionTriggerEvent::MergeFrom(from._internal_geo_region_trigger_event());
      break;
    }
    case kCount: {
      _internal_mutable_count()->::data_collection_configuration_request::SignalCollectionCount::MergeFrom(from._internal_count());
      break;
    }
    case kSignalCollectionNativeFrequency: {
      _internal_set_signal_collection_native_frequency(from._internal_signal_collection_native_frequency());
      break;
    }
    case kCollectAfterTriggerEvent: {
      _internal_mutable_collect_after_trigger_event()->::data_collection_configuration_request::CollectAfterTriggerEvent::MergeFrom(from._internal_collect_after_trigger_event());
      break;
    }
    case COLLECTIONCONFIGURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.Trigger)
}

void Trigger::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Trigger_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  clear_has_CollectionConfiguration();
}

Trigger::~Trigger() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.Trigger)
  SharedDtor();
}

void Trigger::SharedDtor() {
  if (has_CollectionConfiguration()) {
    clear_CollectionConfiguration();
  }
}

void Trigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Trigger& Trigger::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Trigger_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void Trigger::clear_CollectionConfiguration() {
// @@protoc_insertion_point(one_of_clear_start:data_collection_configuration_request.Trigger)
  switch (CollectionConfiguration_case()) {
    case kTimeDeltaTriggerEvent: {
      delete CollectionConfiguration_.time_delta_trigger_event_;
      break;
    }
    case kDistanceDeltaTriggerEvent: {
      delete CollectionConfiguration_.distance_delta_trigger_event_;
      break;
    }
    case kSignalChangeTriggerEvent: {
      delete CollectionConfiguration_.signal_change_trigger_event_;
      break;
    }
    case kSignalTransitionTriggerEvent: {
      delete CollectionConfiguration_.signal_transition_trigger_event_;
      break;
    }
    case kGeoRegionTriggerEvent: {
      delete CollectionConfiguration_.geo_region_trigger_event_;
      break;
    }
    case kCount: {
      delete CollectionConfiguration_.count_;
      break;
    }
    case kSignalCollectionNativeFrequency: {
      // No need to clear
      break;
    }
    case kCollectAfterTriggerEvent: {
      delete CollectionConfiguration_.collect_after_trigger_event_;
      break;
    }
    case COLLECTIONCONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COLLECTIONCONFIGURATION_NOT_SET;
}


void Trigger::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trigger_annotation_ids_.Clear();
  clear_CollectionConfiguration();
  _internal_metadata_.Clear();
}

const char* Trigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.TriggerAnnotationID trigger_annotation_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trigger_annotation_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.TimeDeltaTriggerEvent time_delta_trigger_event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_delta_trigger_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.DistanceDeltaTriggerEvent distance_delta_trigger_event = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_distance_delta_trigger_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.SignalChangeTriggerEvent signal_change_trigger_event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_change_trigger_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.SignalTransitionTriggerEvent signal_transition_trigger_event = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_signal_transition_trigger_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.GeoRegionTriggerEvent geo_region_trigger_event = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_geo_region_trigger_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.SignalCollectionCount count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_count(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool signal_collection_native_frequency = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _internal_set_signal_collection_native_frequency(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.CollectAfterTriggerEvent collect_after_trigger_event = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_collect_after_trigger_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trigger::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.Trigger)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.TriggerAnnotationID trigger_annotation_ids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trigger_annotation_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_trigger_annotation_ids(i), target, stream);
  }

  // .data_collection_configuration_request.TimeDeltaTriggerEvent time_delta_trigger_event = 2;
  if (_internal_has_time_delta_trigger_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::time_delta_trigger_event(this), target, stream);
  }

  // .data_collection_configuration_request.DistanceDeltaTriggerEvent distance_delta_trigger_event = 3;
  if (_internal_has_distance_delta_trigger_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::distance_delta_trigger_event(this), target, stream);
  }

  // .data_collection_configuration_request.SignalChangeTriggerEvent signal_change_trigger_event = 4;
  if (_internal_has_signal_change_trigger_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::signal_change_trigger_event(this), target, stream);
  }

  // .data_collection_configuration_request.SignalTransitionTriggerEvent signal_transition_trigger_event = 5;
  if (_internal_has_signal_transition_trigger_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::signal_transition_trigger_event(this), target, stream);
  }

  // .data_collection_configuration_request.GeoRegionTriggerEvent geo_region_trigger_event = 6;
  if (_internal_has_geo_region_trigger_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::geo_region_trigger_event(this), target, stream);
  }

  // .data_collection_configuration_request.SignalCollectionCount count = 7;
  if (_internal_has_count()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::count(this), target, stream);
  }

  // bool signal_collection_native_frequency = 8;
  if (_internal_has_signal_collection_native_frequency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_signal_collection_native_frequency(), target);
  }

  // .data_collection_configuration_request.CollectAfterTriggerEvent collect_after_trigger_event = 9;
  if (_internal_has_collect_after_trigger_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::collect_after_trigger_event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.Trigger)
  return target;
}

size_t Trigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.Trigger)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.TriggerAnnotationID trigger_annotation_ids = 1;
  total_size += 1UL * this->_internal_trigger_annotation_ids_size();
  for (const auto& msg : this->trigger_annotation_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (CollectionConfiguration_case()) {
    // .data_collection_configuration_request.TimeDeltaTriggerEvent time_delta_trigger_event = 2;
    case kTimeDeltaTriggerEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CollectionConfiguration_.time_delta_trigger_event_);
      break;
    }
    // .data_collection_configuration_request.DistanceDeltaTriggerEvent distance_delta_trigger_event = 3;
    case kDistanceDeltaTriggerEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CollectionConfiguration_.distance_delta_trigger_event_);
      break;
    }
    // .data_collection_configuration_request.SignalChangeTriggerEvent signal_change_trigger_event = 4;
    case kSignalChangeTriggerEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CollectionConfiguration_.signal_change_trigger_event_);
      break;
    }
    // .data_collection_configuration_request.SignalTransitionTriggerEvent signal_transition_trigger_event = 5;
    case kSignalTransitionTriggerEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CollectionConfiguration_.signal_transition_trigger_event_);
      break;
    }
    // .data_collection_configuration_request.GeoRegionTriggerEvent geo_region_trigger_event = 6;
    case kGeoRegionTriggerEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CollectionConfiguration_.geo_region_trigger_event_);
      break;
    }
    // .data_collection_configuration_request.SignalCollectionCount count = 7;
    case kCount: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CollectionConfiguration_.count_);
      break;
    }
    // bool signal_collection_native_frequency = 8;
    case kSignalCollectionNativeFrequency: {
      total_size += 1 + 1;
      break;
    }
    // .data_collection_configuration_request.CollectAfterTriggerEvent collect_after_trigger_event = 9;
    case kCollectAfterTriggerEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *CollectionConfiguration_.collect_after_trigger_event_);
      break;
    }
    case COLLECTIONCONFIGURATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Trigger::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  const Trigger* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Trigger>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.Trigger)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.Trigger)
    MergeFrom(*source);
  }
}

void Trigger::MergeFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.Trigger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trigger_annotation_ids_.MergeFrom(from.trigger_annotation_ids_);
  switch (from.CollectionConfiguration_case()) {
    case kTimeDeltaTriggerEvent: {
      _internal_mutable_time_delta_trigger_event()->::data_collection_configuration_request::TimeDeltaTriggerEvent::MergeFrom(from._internal_time_delta_trigger_event());
      break;
    }
    case kDistanceDeltaTriggerEvent: {
      _internal_mutable_distance_delta_trigger_event()->::data_collection_configuration_request::DistanceDeltaTriggerEvent::MergeFrom(from._internal_distance_delta_trigger_event());
      break;
    }
    case kSignalChangeTriggerEvent: {
      _internal_mutable_signal_change_trigger_event()->::data_collection_configuration_request::SignalChangeTriggerEvent::MergeFrom(from._internal_signal_change_trigger_event());
      break;
    }
    case kSignalTransitionTriggerEvent: {
      _internal_mutable_signal_transition_trigger_event()->::data_collection_configuration_request::SignalTransitionTriggerEvent::MergeFrom(from._internal_signal_transition_trigger_event());
      break;
    }
    case kGeoRegionTriggerEvent: {
      _internal_mutable_geo_region_trigger_event()->::data_collection_configuration_request::GeoRegionTriggerEvent::MergeFrom(from._internal_geo_region_trigger_event());
      break;
    }
    case kCount: {
      _internal_mutable_count()->::data_collection_configuration_request::SignalCollectionCount::MergeFrom(from._internal_count());
      break;
    }
    case kSignalCollectionNativeFrequency: {
      _internal_set_signal_collection_native_frequency(from._internal_signal_collection_native_frequency());
      break;
    }
    case kCollectAfterTriggerEvent: {
      _internal_mutable_collect_after_trigger_event()->::data_collection_configuration_request::CollectAfterTriggerEvent::MergeFrom(from._internal_collect_after_trigger_event());
      break;
    }
    case COLLECTIONCONFIGURATION_NOT_SET: {
      break;
    }
  }
}

void Trigger::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger::CopyFrom(const Trigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.Trigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  return true;
}

void Trigger::InternalSwap(Trigger* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  trigger_annotation_ids_.InternalSwap(&other->trigger_annotation_ids_);
  swap(CollectionConfiguration_, other->CollectionConfiguration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Trigger::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionAction::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_CollectionAction_default_instance_._instance.get_mutable()->min_split_frequency_ = const_cast< ::data_collection_configuration_request::CollectionExtents*>(
      ::data_collection_configuration_request::CollectionExtents::internal_default_instance());
  ::data_collection_configuration_request::_CollectionAction_default_instance_._instance.get_mutable()->data_packetization_trigger_ = const_cast< ::data_collection_configuration_request::CollectionExtents*>(
      ::data_collection_configuration_request::CollectionExtents::internal_default_instance());
}
class CollectionAction::_Internal {
 public:
  static const ::data_collection_configuration_request::CollectionExtents& min_split_frequency(const CollectionAction* msg);
  static const ::data_collection_configuration_request::CollectionExtents& data_packetization_trigger(const CollectionAction* msg);
};

const ::data_collection_configuration_request::CollectionExtents&
CollectionAction::_Internal::min_split_frequency(const CollectionAction* msg) {
  return *msg->min_split_frequency_;
}
const ::data_collection_configuration_request::CollectionExtents&
CollectionAction::_Internal::data_packetization_trigger(const CollectionAction* msg) {
  return *msg->data_packetization_trigger_;
}
CollectionAction::CollectionAction()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.CollectionAction)
}
CollectionAction::CollectionAction(const CollectionAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      collection_tasks_(from.collection_tasks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_min_split_frequency()) {
    min_split_frequency_ = new ::data_collection_configuration_request::CollectionExtents(*from.min_split_frequency_);
  } else {
    min_split_frequency_ = nullptr;
  }
  if (from._internal_has_data_packetization_trigger()) {
    data_packetization_trigger_ = new ::data_collection_configuration_request::CollectionExtents(*from.data_packetization_trigger_);
  } else {
    data_packetization_trigger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.CollectionAction)
}

void CollectionAction::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionAction_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  ::memset(&min_split_frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_packetization_trigger_) -
      reinterpret_cast<char*>(&min_split_frequency_)) + sizeof(data_packetization_trigger_));
}

CollectionAction::~CollectionAction() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.CollectionAction)
  SharedDtor();
}

void CollectionAction::SharedDtor() {
  if (this != internal_default_instance()) delete min_split_frequency_;
  if (this != internal_default_instance()) delete data_packetization_trigger_;
}

void CollectionAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionAction& CollectionAction::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionAction_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CollectionAction::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.CollectionAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  collection_tasks_.Clear();
  if (GetArenaNoVirtual() == nullptr && min_split_frequency_ != nullptr) {
    delete min_split_frequency_;
  }
  min_split_frequency_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_packetization_trigger_ != nullptr) {
    delete data_packetization_trigger_;
  }
  data_packetization_trigger_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CollectionAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.CollectionTask collection_tasks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_collection_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.CollectionExtents min_split_frequency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_split_frequency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.CollectionExtents data_packetization_trigger = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_packetization_trigger(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionAction::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.CollectionAction)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.CollectionTask collection_tasks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_collection_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_collection_tasks(i), target, stream);
  }

  // .data_collection_configuration_request.CollectionExtents min_split_frequency = 2;
  if (this->has_min_split_frequency()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::min_split_frequency(this), target, stream);
  }

  // .data_collection_configuration_request.CollectionExtents data_packetization_trigger = 3;
  if (this->has_data_packetization_trigger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data_packetization_trigger(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.CollectionAction)
  return target;
}

size_t CollectionAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.CollectionAction)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.CollectionTask collection_tasks = 1;
  total_size += 1UL * this->_internal_collection_tasks_size();
  for (const auto& msg : this->collection_tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .data_collection_configuration_request.CollectionExtents min_split_frequency = 2;
  if (this->has_min_split_frequency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *min_split_frequency_);
  }

  // .data_collection_configuration_request.CollectionExtents data_packetization_trigger = 3;
  if (this->has_data_packetization_trigger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_packetization_trigger_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionAction::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.CollectionAction)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionAction* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionAction>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.CollectionAction)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.CollectionAction)
    MergeFrom(*source);
  }
}

void CollectionAction::MergeFrom(const CollectionAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.CollectionAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  collection_tasks_.MergeFrom(from.collection_tasks_);
  if (from.has_min_split_frequency()) {
    _internal_mutable_min_split_frequency()->::data_collection_configuration_request::CollectionExtents::MergeFrom(from._internal_min_split_frequency());
  }
  if (from.has_data_packetization_trigger()) {
    _internal_mutable_data_packetization_trigger()->::data_collection_configuration_request::CollectionExtents::MergeFrom(from._internal_data_packetization_trigger());
  }
}

void CollectionAction::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.CollectionAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionAction::CopyFrom(const CollectionAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.CollectionAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionAction::IsInitialized() const {
  return true;
}

void CollectionAction::InternalSwap(CollectionAction* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  collection_tasks_.InternalSwap(&other->collection_tasks_);
  swap(min_split_frequency_, other->min_split_frequency_);
  swap(data_packetization_trigger_, other->data_packetization_trigger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionAction::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartUpDelay::InitAsDefaultInstance() {
}
class StartUpDelay::_Internal {
 public:
};

StartUpDelay::StartUpDelay()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.StartUpDelay)
}
StartUpDelay::StartUpDelay(const StartUpDelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&no_collection_startup_distance_meter_min_, &from.no_collection_startup_distance_meter_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_collection_startup_time_seconds_max_) -
    reinterpret_cast<char*>(&no_collection_startup_distance_meter_min_)) + sizeof(no_collection_startup_time_seconds_max_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.StartUpDelay)
}

void StartUpDelay::SharedCtor() {
  ::memset(&no_collection_startup_distance_meter_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_collection_startup_time_seconds_max_) -
      reinterpret_cast<char*>(&no_collection_startup_distance_meter_min_)) + sizeof(no_collection_startup_time_seconds_max_));
}

StartUpDelay::~StartUpDelay() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.StartUpDelay)
  SharedDtor();
}

void StartUpDelay::SharedDtor() {
}

void StartUpDelay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartUpDelay& StartUpDelay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartUpDelay_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void StartUpDelay::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.StartUpDelay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&no_collection_startup_distance_meter_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_collection_startup_time_seconds_max_) -
      reinterpret_cast<char*>(&no_collection_startup_distance_meter_min_)) + sizeof(no_collection_startup_time_seconds_max_));
  _internal_metadata_.Clear();
}

const char* StartUpDelay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double no_collection_startup_distance_meter_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          no_collection_startup_distance_meter_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double no_collection_startup_distance_meter_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          no_collection_startup_distance_meter_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double no_collection_startup_time_seconds_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          no_collection_startup_time_seconds_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double no_collection_startup_time_seconds_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          no_collection_startup_time_seconds_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartUpDelay::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.StartUpDelay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double no_collection_startup_distance_meter_min = 1;
  if (!(this->no_collection_startup_distance_meter_min() <= 0 && this->no_collection_startup_distance_meter_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_no_collection_startup_distance_meter_min(), target);
  }

  // double no_collection_startup_distance_meter_max = 2;
  if (!(this->no_collection_startup_distance_meter_max() <= 0 && this->no_collection_startup_distance_meter_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_no_collection_startup_distance_meter_max(), target);
  }

  // double no_collection_startup_time_seconds_min = 3;
  if (!(this->no_collection_startup_time_seconds_min() <= 0 && this->no_collection_startup_time_seconds_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_no_collection_startup_time_seconds_min(), target);
  }

  // double no_collection_startup_time_seconds_max = 4;
  if (!(this->no_collection_startup_time_seconds_max() <= 0 && this->no_collection_startup_time_seconds_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_no_collection_startup_time_seconds_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.StartUpDelay)
  return target;
}

size_t StartUpDelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.StartUpDelay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double no_collection_startup_distance_meter_min = 1;
  if (!(this->no_collection_startup_distance_meter_min() <= 0 && this->no_collection_startup_distance_meter_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double no_collection_startup_distance_meter_max = 2;
  if (!(this->no_collection_startup_distance_meter_max() <= 0 && this->no_collection_startup_distance_meter_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double no_collection_startup_time_seconds_min = 3;
  if (!(this->no_collection_startup_time_seconds_min() <= 0 && this->no_collection_startup_time_seconds_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double no_collection_startup_time_seconds_max = 4;
  if (!(this->no_collection_startup_time_seconds_max() <= 0 && this->no_collection_startup_time_seconds_max() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartUpDelay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.StartUpDelay)
  GOOGLE_DCHECK_NE(&from, this);
  const StartUpDelay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartUpDelay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.StartUpDelay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.StartUpDelay)
    MergeFrom(*source);
  }
}

void StartUpDelay::MergeFrom(const StartUpDelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.StartUpDelay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.no_collection_startup_distance_meter_min() <= 0 && from.no_collection_startup_distance_meter_min() >= 0)) {
    _internal_set_no_collection_startup_distance_meter_min(from._internal_no_collection_startup_distance_meter_min());
  }
  if (!(from.no_collection_startup_distance_meter_max() <= 0 && from.no_collection_startup_distance_meter_max() >= 0)) {
    _internal_set_no_collection_startup_distance_meter_max(from._internal_no_collection_startup_distance_meter_max());
  }
  if (!(from.no_collection_startup_time_seconds_min() <= 0 && from.no_collection_startup_time_seconds_min() >= 0)) {
    _internal_set_no_collection_startup_time_seconds_min(from._internal_no_collection_startup_time_seconds_min());
  }
  if (!(from.no_collection_startup_time_seconds_max() <= 0 && from.no_collection_startup_time_seconds_max() >= 0)) {
    _internal_set_no_collection_startup_time_seconds_max(from._internal_no_collection_startup_time_seconds_max());
  }
}

void StartUpDelay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.StartUpDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartUpDelay::CopyFrom(const StartUpDelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.StartUpDelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartUpDelay::IsInitialized() const {
  return true;
}

void StartUpDelay::InternalSwap(StartUpDelay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(no_collection_startup_distance_meter_min_, other->no_collection_startup_distance_meter_min_);
  swap(no_collection_startup_distance_meter_max_, other->no_collection_startup_distance_meter_max_);
  swap(no_collection_startup_time_seconds_min_, other->no_collection_startup_time_seconds_min_);
  swap(no_collection_startup_time_seconds_max_, other->no_collection_startup_time_seconds_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartUpDelay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EndPointUncertainty::InitAsDefaultInstance() {
}
class EndPointUncertainty::_Internal {
 public:
};

EndPointUncertainty::EndPointUncertainty()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.EndPointUncertainty)
}
EndPointUncertainty::EndPointUncertainty(const EndPointUncertainty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&no_collection_end_distance_meter_min_, &from.no_collection_end_distance_meter_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_collection_end_time_seconds_max_) -
    reinterpret_cast<char*>(&no_collection_end_distance_meter_min_)) + sizeof(no_collection_end_time_seconds_max_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.EndPointUncertainty)
}

void EndPointUncertainty::SharedCtor() {
  ::memset(&no_collection_end_distance_meter_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_collection_end_time_seconds_max_) -
      reinterpret_cast<char*>(&no_collection_end_distance_meter_min_)) + sizeof(no_collection_end_time_seconds_max_));
}

EndPointUncertainty::~EndPointUncertainty() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.EndPointUncertainty)
  SharedDtor();
}

void EndPointUncertainty::SharedDtor() {
}

void EndPointUncertainty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EndPointUncertainty& EndPointUncertainty::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EndPointUncertainty_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void EndPointUncertainty::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.EndPointUncertainty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&no_collection_end_distance_meter_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_collection_end_time_seconds_max_) -
      reinterpret_cast<char*>(&no_collection_end_distance_meter_min_)) + sizeof(no_collection_end_time_seconds_max_));
  _internal_metadata_.Clear();
}

const char* EndPointUncertainty::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double no_collection_end_distance_meter_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          no_collection_end_distance_meter_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double no_collection_end_distance_meter_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          no_collection_end_distance_meter_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double no_collection_end_time_seconds_min = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          no_collection_end_time_seconds_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double no_collection_end_time_seconds_max = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          no_collection_end_time_seconds_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndPointUncertainty::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.EndPointUncertainty)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double no_collection_end_distance_meter_min = 1;
  if (!(this->no_collection_end_distance_meter_min() <= 0 && this->no_collection_end_distance_meter_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_no_collection_end_distance_meter_min(), target);
  }

  // double no_collection_end_distance_meter_max = 2;
  if (!(this->no_collection_end_distance_meter_max() <= 0 && this->no_collection_end_distance_meter_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_no_collection_end_distance_meter_max(), target);
  }

  // double no_collection_end_time_seconds_min = 3;
  if (!(this->no_collection_end_time_seconds_min() <= 0 && this->no_collection_end_time_seconds_min() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_no_collection_end_time_seconds_min(), target);
  }

  // double no_collection_end_time_seconds_max = 4;
  if (!(this->no_collection_end_time_seconds_max() <= 0 && this->no_collection_end_time_seconds_max() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_no_collection_end_time_seconds_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.EndPointUncertainty)
  return target;
}

size_t EndPointUncertainty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.EndPointUncertainty)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double no_collection_end_distance_meter_min = 1;
  if (!(this->no_collection_end_distance_meter_min() <= 0 && this->no_collection_end_distance_meter_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double no_collection_end_distance_meter_max = 2;
  if (!(this->no_collection_end_distance_meter_max() <= 0 && this->no_collection_end_distance_meter_max() >= 0)) {
    total_size += 1 + 8;
  }

  // double no_collection_end_time_seconds_min = 3;
  if (!(this->no_collection_end_time_seconds_min() <= 0 && this->no_collection_end_time_seconds_min() >= 0)) {
    total_size += 1 + 8;
  }

  // double no_collection_end_time_seconds_max = 4;
  if (!(this->no_collection_end_time_seconds_max() <= 0 && this->no_collection_end_time_seconds_max() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndPointUncertainty::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.EndPointUncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  const EndPointUncertainty* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndPointUncertainty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.EndPointUncertainty)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.EndPointUncertainty)
    MergeFrom(*source);
  }
}

void EndPointUncertainty::MergeFrom(const EndPointUncertainty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.EndPointUncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.no_collection_end_distance_meter_min() <= 0 && from.no_collection_end_distance_meter_min() >= 0)) {
    _internal_set_no_collection_end_distance_meter_min(from._internal_no_collection_end_distance_meter_min());
  }
  if (!(from.no_collection_end_distance_meter_max() <= 0 && from.no_collection_end_distance_meter_max() >= 0)) {
    _internal_set_no_collection_end_distance_meter_max(from._internal_no_collection_end_distance_meter_max());
  }
  if (!(from.no_collection_end_time_seconds_min() <= 0 && from.no_collection_end_time_seconds_min() >= 0)) {
    _internal_set_no_collection_end_time_seconds_min(from._internal_no_collection_end_time_seconds_min());
  }
  if (!(from.no_collection_end_time_seconds_max() <= 0 && from.no_collection_end_time_seconds_max() >= 0)) {
    _internal_set_no_collection_end_time_seconds_max(from._internal_no_collection_end_time_seconds_max());
  }
}

void EndPointUncertainty::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.EndPointUncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPointUncertainty::CopyFrom(const EndPointUncertainty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.EndPointUncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPointUncertainty::IsInitialized() const {
  return true;
}

void EndPointUncertainty::InternalSwap(EndPointUncertainty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(no_collection_end_distance_meter_min_, other->no_collection_end_distance_meter_min_);
  swap(no_collection_end_distance_meter_max_, other->no_collection_end_distance_meter_max_);
  swap(no_collection_end_time_seconds_min_, other->no_collection_end_time_seconds_min_);
  swap(no_collection_end_time_seconds_max_, other->no_collection_end_time_seconds_max_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPointUncertainty::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataRecordingGap::InitAsDefaultInstance() {
}
class DataRecordingGap::_Internal {
 public:
};

DataRecordingGap::DataRecordingGap()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.DataRecordingGap)
}
DataRecordingGap::DataRecordingGap(const DataRecordingGap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_recording_gap_distance_minimum_meter_, &from.data_recording_gap_distance_minimum_meter_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_recording_gap_time_maximum_seconds_) -
    reinterpret_cast<char*>(&data_recording_gap_distance_minimum_meter_)) + sizeof(data_recording_gap_time_maximum_seconds_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.DataRecordingGap)
}

void DataRecordingGap::SharedCtor() {
  ::memset(&data_recording_gap_distance_minimum_meter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_recording_gap_time_maximum_seconds_) -
      reinterpret_cast<char*>(&data_recording_gap_distance_minimum_meter_)) + sizeof(data_recording_gap_time_maximum_seconds_));
}

DataRecordingGap::~DataRecordingGap() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.DataRecordingGap)
  SharedDtor();
}

void DataRecordingGap::SharedDtor() {
}

void DataRecordingGap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataRecordingGap& DataRecordingGap::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataRecordingGap_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DataRecordingGap::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.DataRecordingGap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_recording_gap_distance_minimum_meter_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_recording_gap_time_maximum_seconds_) -
      reinterpret_cast<char*>(&data_recording_gap_distance_minimum_meter_)) + sizeof(data_recording_gap_time_maximum_seconds_));
  _internal_metadata_.Clear();
}

const char* DataRecordingGap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double data_recording_gap_distance_minimum_meter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          data_recording_gap_distance_minimum_meter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double data_recording_gap_distance_maximum_meter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          data_recording_gap_distance_maximum_meter_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double data_recording_gap_time_minimum_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          data_recording_gap_time_minimum_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double data_recording_gap_time_maximum_seconds = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          data_recording_gap_time_maximum_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataRecordingGap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.DataRecordingGap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double data_recording_gap_distance_minimum_meter = 1;
  if (!(this->data_recording_gap_distance_minimum_meter() <= 0 && this->data_recording_gap_distance_minimum_meter() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_data_recording_gap_distance_minimum_meter(), target);
  }

  // double data_recording_gap_distance_maximum_meter = 2;
  if (!(this->data_recording_gap_distance_maximum_meter() <= 0 && this->data_recording_gap_distance_maximum_meter() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_data_recording_gap_distance_maximum_meter(), target);
  }

  // double data_recording_gap_time_minimum_seconds = 3;
  if (!(this->data_recording_gap_time_minimum_seconds() <= 0 && this->data_recording_gap_time_minimum_seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_data_recording_gap_time_minimum_seconds(), target);
  }

  // double data_recording_gap_time_maximum_seconds = 4;
  if (!(this->data_recording_gap_time_maximum_seconds() <= 0 && this->data_recording_gap_time_maximum_seconds() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_data_recording_gap_time_maximum_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.DataRecordingGap)
  return target;
}

size_t DataRecordingGap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.DataRecordingGap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double data_recording_gap_distance_minimum_meter = 1;
  if (!(this->data_recording_gap_distance_minimum_meter() <= 0 && this->data_recording_gap_distance_minimum_meter() >= 0)) {
    total_size += 1 + 8;
  }

  // double data_recording_gap_distance_maximum_meter = 2;
  if (!(this->data_recording_gap_distance_maximum_meter() <= 0 && this->data_recording_gap_distance_maximum_meter() >= 0)) {
    total_size += 1 + 8;
  }

  // double data_recording_gap_time_minimum_seconds = 3;
  if (!(this->data_recording_gap_time_minimum_seconds() <= 0 && this->data_recording_gap_time_minimum_seconds() >= 0)) {
    total_size += 1 + 8;
  }

  // double data_recording_gap_time_maximum_seconds = 4;
  if (!(this->data_recording_gap_time_maximum_seconds() <= 0 && this->data_recording_gap_time_maximum_seconds() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataRecordingGap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.DataRecordingGap)
  GOOGLE_DCHECK_NE(&from, this);
  const DataRecordingGap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataRecordingGap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.DataRecordingGap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.DataRecordingGap)
    MergeFrom(*source);
  }
}

void DataRecordingGap::MergeFrom(const DataRecordingGap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.DataRecordingGap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.data_recording_gap_distance_minimum_meter() <= 0 && from.data_recording_gap_distance_minimum_meter() >= 0)) {
    _internal_set_data_recording_gap_distance_minimum_meter(from._internal_data_recording_gap_distance_minimum_meter());
  }
  if (!(from.data_recording_gap_distance_maximum_meter() <= 0 && from.data_recording_gap_distance_maximum_meter() >= 0)) {
    _internal_set_data_recording_gap_distance_maximum_meter(from._internal_data_recording_gap_distance_maximum_meter());
  }
  if (!(from.data_recording_gap_time_minimum_seconds() <= 0 && from.data_recording_gap_time_minimum_seconds() >= 0)) {
    _internal_set_data_recording_gap_time_minimum_seconds(from._internal_data_recording_gap_time_minimum_seconds());
  }
  if (!(from.data_recording_gap_time_maximum_seconds() <= 0 && from.data_recording_gap_time_maximum_seconds() >= 0)) {
    _internal_set_data_recording_gap_time_maximum_seconds(from._internal_data_recording_gap_time_maximum_seconds());
  }
}

void DataRecordingGap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.DataRecordingGap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRecordingGap::CopyFrom(const DataRecordingGap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.DataRecordingGap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRecordingGap::IsInitialized() const {
  return true;
}

void DataRecordingGap::InternalSwap(DataRecordingGap* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_recording_gap_distance_minimum_meter_, other->data_recording_gap_distance_minimum_meter_);
  swap(data_recording_gap_distance_maximum_meter_, other->data_recording_gap_distance_maximum_meter_);
  swap(data_recording_gap_time_minimum_seconds_, other->data_recording_gap_time_minimum_seconds_);
  swap(data_recording_gap_time_maximum_seconds_, other->data_recording_gap_time_maximum_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataRecordingGap::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AbsoluteTimeOffset::InitAsDefaultInstance() {
}
class AbsoluteTimeOffset::_Internal {
 public:
};

AbsoluteTimeOffset::AbsoluteTimeOffset()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.AbsoluteTimeOffset)
}
AbsoluteTimeOffset::AbsoluteTimeOffset(const AbsoluteTimeOffset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&absolute_time_offset_minimum_milliseconds_, &from.absolute_time_offset_minimum_milliseconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&absolute_time_offset_maximum_milliseconds_) -
    reinterpret_cast<char*>(&absolute_time_offset_minimum_milliseconds_)) + sizeof(absolute_time_offset_maximum_milliseconds_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.AbsoluteTimeOffset)
}

void AbsoluteTimeOffset::SharedCtor() {
  ::memset(&absolute_time_offset_minimum_milliseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_time_offset_maximum_milliseconds_) -
      reinterpret_cast<char*>(&absolute_time_offset_minimum_milliseconds_)) + sizeof(absolute_time_offset_maximum_milliseconds_));
}

AbsoluteTimeOffset::~AbsoluteTimeOffset() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.AbsoluteTimeOffset)
  SharedDtor();
}

void AbsoluteTimeOffset::SharedDtor() {
}

void AbsoluteTimeOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AbsoluteTimeOffset& AbsoluteTimeOffset::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AbsoluteTimeOffset_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void AbsoluteTimeOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.AbsoluteTimeOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&absolute_time_offset_minimum_milliseconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&absolute_time_offset_maximum_milliseconds_) -
      reinterpret_cast<char*>(&absolute_time_offset_minimum_milliseconds_)) + sizeof(absolute_time_offset_maximum_milliseconds_));
  _internal_metadata_.Clear();
}

const char* AbsoluteTimeOffset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 absolute_time_offset_minimum_milliseconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          absolute_time_offset_minimum_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 absolute_time_offset_maximum_milliseconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          absolute_time_offset_maximum_milliseconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AbsoluteTimeOffset::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.AbsoluteTimeOffset)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 absolute_time_offset_minimum_milliseconds = 1;
  if (this->absolute_time_offset_minimum_milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_absolute_time_offset_minimum_milliseconds(), target);
  }

  // int64 absolute_time_offset_maximum_milliseconds = 2;
  if (this->absolute_time_offset_maximum_milliseconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_absolute_time_offset_maximum_milliseconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.AbsoluteTimeOffset)
  return target;
}

size_t AbsoluteTimeOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.AbsoluteTimeOffset)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 absolute_time_offset_minimum_milliseconds = 1;
  if (this->absolute_time_offset_minimum_milliseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_absolute_time_offset_minimum_milliseconds());
  }

  // int64 absolute_time_offset_maximum_milliseconds = 2;
  if (this->absolute_time_offset_maximum_milliseconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_absolute_time_offset_maximum_milliseconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AbsoluteTimeOffset::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.AbsoluteTimeOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const AbsoluteTimeOffset* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AbsoluteTimeOffset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.AbsoluteTimeOffset)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.AbsoluteTimeOffset)
    MergeFrom(*source);
  }
}

void AbsoluteTimeOffset::MergeFrom(const AbsoluteTimeOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.AbsoluteTimeOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.absolute_time_offset_minimum_milliseconds() != 0) {
    _internal_set_absolute_time_offset_minimum_milliseconds(from._internal_absolute_time_offset_minimum_milliseconds());
  }
  if (from.absolute_time_offset_maximum_milliseconds() != 0) {
    _internal_set_absolute_time_offset_maximum_milliseconds(from._internal_absolute_time_offset_maximum_milliseconds());
  }
}

void AbsoluteTimeOffset::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.AbsoluteTimeOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AbsoluteTimeOffset::CopyFrom(const AbsoluteTimeOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.AbsoluteTimeOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AbsoluteTimeOffset::IsInitialized() const {
  return true;
}

void AbsoluteTimeOffset::InternalSwap(AbsoluteTimeOffset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(absolute_time_offset_minimum_milliseconds_, other->absolute_time_offset_minimum_milliseconds_);
  swap(absolute_time_offset_maximum_milliseconds_, other->absolute_time_offset_maximum_milliseconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AbsoluteTimeOffset::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CollectionTask::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_CollectionTask_default_instance_._instance.get_mutable()->data_points_configuration_ = const_cast< ::data_collection_configuration_request::DatapointsConfiguration*>(
      ::data_collection_configuration_request::DatapointsConfiguration::internal_default_instance());
}
class CollectionTask::_Internal {
 public:
  static const ::data_collection_configuration_request::DatapointsConfiguration& data_points_configuration(const CollectionTask* msg);
};

const ::data_collection_configuration_request::DatapointsConfiguration&
CollectionTask::_Internal::data_points_configuration(const CollectionTask* msg) {
  return *msg->data_points_configuration_;
}
CollectionTask::CollectionTask()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.CollectionTask)
}
CollectionTask::CollectionTask(const CollectionTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      data_points_(from.data_points_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data_points_configuration()) {
    data_points_configuration_ = new ::data_collection_configuration_request::DatapointsConfiguration(*from.data_points_configuration_);
  } else {
    data_points_configuration_ = nullptr;
  }
  task_id_ = from.task_id_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.CollectionTask)
}

void CollectionTask::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CollectionTask_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  ::memset(&data_points_configuration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&task_id_) -
      reinterpret_cast<char*>(&data_points_configuration_)) + sizeof(task_id_));
}

CollectionTask::~CollectionTask() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.CollectionTask)
  SharedDtor();
}

void CollectionTask::SharedDtor() {
  if (this != internal_default_instance()) delete data_points_configuration_;
}

void CollectionTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CollectionTask& CollectionTask::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CollectionTask_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void CollectionTask::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.CollectionTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_points_.Clear();
  if (GetArenaNoVirtual() == nullptr && data_points_configuration_ != nullptr) {
    delete data_points_configuration_;
  }
  data_points_configuration_ = nullptr;
  task_id_ = 0u;
  _internal_metadata_.Clear();
}

const char* CollectionTask::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 task_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.Datapoint data_points = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_data_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.DatapointsConfiguration data_points_configuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_points_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CollectionTask::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.CollectionTask)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 task_id = 1;
  if (this->task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_task_id(), target);
  }

  // repeated .data_collection_configuration_request.Datapoint data_points = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_data_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_data_points(i), target, stream);
  }

  // .data_collection_configuration_request.DatapointsConfiguration data_points_configuration = 3;
  if (this->has_data_points_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data_points_configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.CollectionTask)
  return target;
}

size_t CollectionTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.CollectionTask)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.Datapoint data_points = 2;
  total_size += 1UL * this->_internal_data_points_size();
  for (const auto& msg : this->data_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .data_collection_configuration_request.DatapointsConfiguration data_points_configuration = 3;
  if (this->has_data_points_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_points_configuration_);
  }

  // uint32 task_id = 1;
  if (this->task_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CollectionTask::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.CollectionTask)
  GOOGLE_DCHECK_NE(&from, this);
  const CollectionTask* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CollectionTask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.CollectionTask)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.CollectionTask)
    MergeFrom(*source);
  }
}

void CollectionTask::MergeFrom(const CollectionTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.CollectionTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_points_.MergeFrom(from.data_points_);
  if (from.has_data_points_configuration()) {
    _internal_mutable_data_points_configuration()->::data_collection_configuration_request::DatapointsConfiguration::MergeFrom(from._internal_data_points_configuration());
  }
  if (from.task_id() != 0) {
    _internal_set_task_id(from._internal_task_id());
  }
}

void CollectionTask::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.CollectionTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CollectionTask::CopyFrom(const CollectionTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.CollectionTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CollectionTask::IsInitialized() const {
  return true;
}

void CollectionTask::InternalSwap(CollectionTask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_points_.InternalSwap(&other->data_points_);
  swap(data_points_configuration_, other->data_points_configuration_);
  swap(task_id_, other->task_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CollectionTask::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListOfSNA::InitAsDefaultInstance() {
}
class ListOfSNA::_Internal {
 public:
};

ListOfSNA::ListOfSNA()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.ListOfSNA)
}
ListOfSNA::ListOfSNA(const ListOfSNA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_range_(from.value_range_),
      value_list_sna_(from.value_list_sna_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.ListOfSNA)
}

void ListOfSNA::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListOfSNA_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
}

ListOfSNA::~ListOfSNA() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.ListOfSNA)
  SharedDtor();
}

void ListOfSNA::SharedDtor() {
}

void ListOfSNA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListOfSNA& ListOfSNA::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListOfSNA_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void ListOfSNA::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.ListOfSNA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_range_.Clear();
  value_list_sna_.Clear();
  _internal_metadata_.Clear();
}

const char* ListOfSNA::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.ValueRange value_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_range(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double value_list_SNA = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value_list_sna(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_value_list_sna(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListOfSNA::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.ListOfSNA)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.ValueRange value_range = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_range_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value_range(i), target, stream);
  }

  // repeated double value_list_SNA = 2;
  if (this->_internal_value_list_sna_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_value_list_sna(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.ListOfSNA)
  return target;
}

size_t ListOfSNA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.ListOfSNA)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.ValueRange value_range = 1;
  total_size += 1UL * this->_internal_value_range_size();
  for (const auto& msg : this->value_range_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double value_list_SNA = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_list_sna_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_list_sna_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListOfSNA::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.ListOfSNA)
  GOOGLE_DCHECK_NE(&from, this);
  const ListOfSNA* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListOfSNA>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.ListOfSNA)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.ListOfSNA)
    MergeFrom(*source);
  }
}

void ListOfSNA::MergeFrom(const ListOfSNA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.ListOfSNA)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_range_.MergeFrom(from.value_range_);
  value_list_sna_.MergeFrom(from.value_list_sna_);
}

void ListOfSNA::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.ListOfSNA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListOfSNA::CopyFrom(const ListOfSNA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.ListOfSNA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListOfSNA::IsInitialized() const {
  return true;
}

void ListOfSNA::InternalSwap(ListOfSNA* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_range_.InternalSwap(&other->value_range_);
  value_list_sna_.InternalSwap(&other->value_list_sna_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListOfSNA::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RawValueFilter::InitAsDefaultInstance() {
}
class RawValueFilter::_Internal {
 public:
};

RawValueFilter::RawValueFilter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.RawValueFilter)
}
RawValueFilter::RawValueFilter(const RawValueFilter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      value_range_custom_(from.value_range_custom_),
      value_list_custom_(from.value_list_custom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.RawValueFilter)
}

void RawValueFilter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RawValueFilter_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
}

RawValueFilter::~RawValueFilter() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.RawValueFilter)
  SharedDtor();
}

void RawValueFilter::SharedDtor() {
}

void RawValueFilter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RawValueFilter& RawValueFilter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RawValueFilter_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void RawValueFilter::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.RawValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_range_custom_.Clear();
  value_list_custom_.Clear();
  _internal_metadata_.Clear();
}

const char* RawValueFilter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.ValueRange value_range_custom = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value_range_custom(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated double value_list_custom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_value_list_custom(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17) {
          _internal_add_value_list_custom(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RawValueFilter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.RawValueFilter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.ValueRange value_range_custom = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_range_custom_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value_range_custom(i), target, stream);
  }

  // repeated double value_list_custom = 2;
  if (this->_internal_value_list_custom_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_value_list_custom(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.RawValueFilter)
  return target;
}

size_t RawValueFilter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.RawValueFilter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.ValueRange value_range_custom = 1;
  total_size += 1UL * this->_internal_value_range_custom_size();
  for (const auto& msg : this->value_range_custom_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated double value_list_custom = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_value_list_custom_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _value_list_custom_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RawValueFilter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.RawValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  const RawValueFilter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RawValueFilter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.RawValueFilter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.RawValueFilter)
    MergeFrom(*source);
  }
}

void RawValueFilter::MergeFrom(const RawValueFilter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.RawValueFilter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  value_range_custom_.MergeFrom(from.value_range_custom_);
  value_list_custom_.MergeFrom(from.value_list_custom_);
}

void RawValueFilter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.RawValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RawValueFilter::CopyFrom(const RawValueFilter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.RawValueFilter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RawValueFilter::IsInitialized() const {
  return true;
}

void RawValueFilter::InternalSwap(RawValueFilter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_range_custom_.InternalSwap(&other->value_range_custom_);
  value_list_custom_.InternalSwap(&other->value_list_custom_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RawValueFilter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValueRange::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_ValueRange_default_instance_.less_than_equal_to_ = 0;
  ::data_collection_configuration_request::_ValueRange_default_instance_.greater_than_equal_to_ = 0;
  ::data_collection_configuration_request::_ValueRange_default_instance_.value_interval_ = const_cast< ::data_collection_configuration_request::ValueInterval*>(
      ::data_collection_configuration_request::ValueInterval::internal_default_instance());
}
class ValueRange::_Internal {
 public:
  static const ::data_collection_configuration_request::ValueInterval& value_interval(const ValueRange* msg);
};

const ::data_collection_configuration_request::ValueInterval&
ValueRange::_Internal::value_interval(const ValueRange* msg) {
  return *msg->range_.value_interval_;
}
void ValueRange::set_allocated_value_interval(::data_collection_configuration_request::ValueInterval* value_interval) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_range();
  if (value_interval) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value_interval = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_interval, submessage_arena);
    }
    set_has_value_interval();
    range_.value_interval_ = value_interval;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.ValueRange.value_interval)
}
ValueRange::ValueRange()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.ValueRange)
}
ValueRange::ValueRange(const ValueRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_range();
  switch (from.range_case()) {
    case kLessThanEqualTo: {
      _internal_set_less_than_equal_to(from._internal_less_than_equal_to());
      break;
    }
    case kGreaterThanEqualTo: {
      _internal_set_greater_than_equal_to(from._internal_greater_than_equal_to());
      break;
    }
    case kValueInterval: {
      _internal_mutable_value_interval()->::data_collection_configuration_request::ValueInterval::MergeFrom(from._internal_value_interval());
      break;
    }
    case RANGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.ValueRange)
}

void ValueRange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ValueRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  clear_has_range();
}

ValueRange::~ValueRange() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.ValueRange)
  SharedDtor();
}

void ValueRange::SharedDtor() {
  if (has_range()) {
    clear_range();
  }
}

void ValueRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValueRange& ValueRange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValueRange_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void ValueRange::clear_range() {
// @@protoc_insertion_point(one_of_clear_start:data_collection_configuration_request.ValueRange)
  switch (range_case()) {
    case kLessThanEqualTo: {
      // No need to clear
      break;
    }
    case kGreaterThanEqualTo: {
      // No need to clear
      break;
    }
    case kValueInterval: {
      delete range_.value_interval_;
      break;
    }
    case RANGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RANGE_NOT_SET;
}


void ValueRange::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.ValueRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_range();
  _internal_metadata_.Clear();
}

const char* ValueRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double less_than_equal_to = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _internal_set_less_than_equal_to(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double greater_than_equal_to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _internal_set_greater_than_equal_to(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.ValueInterval value_interval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_interval(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueRange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.ValueRange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double less_than_equal_to = 1;
  if (_internal_has_less_than_equal_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_less_than_equal_to(), target);
  }

  // double greater_than_equal_to = 2;
  if (_internal_has_greater_than_equal_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_greater_than_equal_to(), target);
  }

  // .data_collection_configuration_request.ValueInterval value_interval = 3;
  if (_internal_has_value_interval()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value_interval(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.ValueRange)
  return target;
}

size_t ValueRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.ValueRange)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (range_case()) {
    // double less_than_equal_to = 1;
    case kLessThanEqualTo: {
      total_size += 1 + 8;
      break;
    }
    // double greater_than_equal_to = 2;
    case kGreaterThanEqualTo: {
      total_size += 1 + 8;
      break;
    }
    // .data_collection_configuration_request.ValueInterval value_interval = 3;
    case kValueInterval: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *range_.value_interval_);
      break;
    }
    case RANGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueRange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.ValueRange)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueRange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValueRange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.ValueRange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.ValueRange)
    MergeFrom(*source);
  }
}

void ValueRange::MergeFrom(const ValueRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.ValueRange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.range_case()) {
    case kLessThanEqualTo: {
      _internal_set_less_than_equal_to(from._internal_less_than_equal_to());
      break;
    }
    case kGreaterThanEqualTo: {
      _internal_set_greater_than_equal_to(from._internal_greater_than_equal_to());
      break;
    }
    case kValueInterval: {
      _internal_mutable_value_interval()->::data_collection_configuration_request::ValueInterval::MergeFrom(from._internal_value_interval());
      break;
    }
    case RANGE_NOT_SET: {
      break;
    }
  }
}

void ValueRange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.ValueRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueRange::CopyFrom(const ValueRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.ValueRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueRange::IsInitialized() const {
  return true;
}

void ValueRange::InternalSwap(ValueRange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(range_, other->range_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueRange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ValueInterval::InitAsDefaultInstance() {
}
class ValueInterval::_Internal {
 public:
};

ValueInterval::ValueInterval()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.ValueInterval)
}
ValueInterval::ValueInterval(const ValueInterval& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&value_lower_included_, &from.value_lower_included_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_upper_included_) -
    reinterpret_cast<char*>(&value_lower_included_)) + sizeof(value_upper_included_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.ValueInterval)
}

void ValueInterval::SharedCtor() {
  ::memset(&value_lower_included_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_upper_included_) -
      reinterpret_cast<char*>(&value_lower_included_)) + sizeof(value_upper_included_));
}

ValueInterval::~ValueInterval() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.ValueInterval)
  SharedDtor();
}

void ValueInterval::SharedDtor() {
}

void ValueInterval::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ValueInterval& ValueInterval::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ValueInterval_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void ValueInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.ValueInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&value_lower_included_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_upper_included_) -
      reinterpret_cast<char*>(&value_lower_included_)) + sizeof(value_upper_included_));
  _internal_metadata_.Clear();
}

const char* ValueInterval::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double value_lower_included = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          value_lower_included_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double value_upper_included = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          value_upper_included_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ValueInterval::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.ValueInterval)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double value_lower_included = 1;
  if (!(this->value_lower_included() <= 0 && this->value_lower_included() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_value_lower_included(), target);
  }

  // double value_upper_included = 2;
  if (!(this->value_upper_included() <= 0 && this->value_upper_included() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_value_upper_included(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.ValueInterval)
  return target;
}

size_t ValueInterval::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.ValueInterval)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double value_lower_included = 1;
  if (!(this->value_lower_included() <= 0 && this->value_lower_included() >= 0)) {
    total_size += 1 + 8;
  }

  // double value_upper_included = 2;
  if (!(this->value_upper_included() <= 0 && this->value_upper_included() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ValueInterval::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.ValueInterval)
  GOOGLE_DCHECK_NE(&from, this);
  const ValueInterval* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ValueInterval>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.ValueInterval)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.ValueInterval)
    MergeFrom(*source);
  }
}

void ValueInterval::MergeFrom(const ValueInterval& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.ValueInterval)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.value_lower_included() <= 0 && from.value_lower_included() >= 0)) {
    _internal_set_value_lower_included(from._internal_value_lower_included());
  }
  if (!(from.value_upper_included() <= 0 && from.value_upper_included() >= 0)) {
    _internal_set_value_upper_included(from._internal_value_upper_included());
  }
}

void ValueInterval::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.ValueInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValueInterval::CopyFrom(const ValueInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.ValueInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValueInterval::IsInitialized() const {
  return true;
}

void ValueInterval::InternalSwap(ValueInterval* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_lower_included_, other->value_lower_included_);
  swap(value_upper_included_, other->value_upper_included_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValueInterval::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Datapoint::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_Datapoint_default_instance_.default_signal_ = const_cast< ::signal_source_definition::DefaultSource*>(
      ::signal_source_definition::DefaultSource::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.can_signal_ = const_cast< ::signal_source_definition::CanSource*>(
      ::signal_source_definition::CanSource::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.lin_signal_ = const_cast< ::signal_source_definition::LinSource*>(
      ::signal_source_definition::LinSource::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.ethernet_signal_ = const_cast< ::signal_source_definition::EthernetSource*>(
      ::signal_source_definition::EthernetSource::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.network_signal_ = const_cast< ::signal_source_definition::NetworkSource*>(
      ::signal_source_definition::NetworkSource::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.internal_signal_ = const_cast< ::signal_source_definition::InternalSource*>(
      ::signal_source_definition::InternalSource::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.processing_toolbox_signal_ = const_cast< ::data_collection_configuration_request::Processing_Toolbox_Definition*>(
      ::data_collection_configuration_request::Processing_Toolbox_Definition::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.thriftme_signal_ = const_cast< ::signal_source_definition::ThriftmeSource*>(
      ::signal_source_definition::ThriftmeSource::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.collectd_ = const_cast< ::signal_source_definition::CollectdSource*>(
      ::signal_source_definition::CollectdSource::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.eelsource_ = const_cast< ::signal_source_definition::EELSource*>(
      ::signal_source_definition::EELSource::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_.thriftme_active_ = const_cast< ::signal_source_definition::ThriftmeSourceActive*>(
      ::signal_source_definition::ThriftmeSourceActive::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_._instance.get_mutable()->list_of_sna_ = const_cast< ::data_collection_configuration_request::ListOfSNA*>(
      ::data_collection_configuration_request::ListOfSNA::internal_default_instance());
  ::data_collection_configuration_request::_Datapoint_default_instance_._instance.get_mutable()->raw_value_filter_ = const_cast< ::data_collection_configuration_request::RawValueFilter*>(
      ::data_collection_configuration_request::RawValueFilter::internal_default_instance());
}
class Datapoint::_Internal {
 public:
  static const ::signal_source_definition::DefaultSource& default_signal(const Datapoint* msg);
  static const ::signal_source_definition::CanSource& can_signal(const Datapoint* msg);
  static const ::signal_source_definition::LinSource& lin_signal(const Datapoint* msg);
  static const ::signal_source_definition::EthernetSource& ethernet_signal(const Datapoint* msg);
  static const ::signal_source_definition::NetworkSource& network_signal(const Datapoint* msg);
  static const ::signal_source_definition::InternalSource& internal_signal(const Datapoint* msg);
  static const ::data_collection_configuration_request::Processing_Toolbox_Definition& processing_toolbox_signal(const Datapoint* msg);
  static const ::signal_source_definition::ThriftmeSource& thriftme_signal(const Datapoint* msg);
  static const ::signal_source_definition::CollectdSource& collectd(const Datapoint* msg);
  static const ::signal_source_definition::EELSource& eelsource(const Datapoint* msg);
  static const ::signal_source_definition::ThriftmeSourceActive& thriftme_active(const Datapoint* msg);
  static const ::data_collection_configuration_request::ListOfSNA& list_of_sna(const Datapoint* msg);
  static const ::data_collection_configuration_request::RawValueFilter& raw_value_filter(const Datapoint* msg);
};

const ::signal_source_definition::DefaultSource&
Datapoint::_Internal::default_signal(const Datapoint* msg) {
  return *msg->signal_definition_.default_signal_;
}
const ::signal_source_definition::CanSource&
Datapoint::_Internal::can_signal(const Datapoint* msg) {
  return *msg->signal_definition_.can_signal_;
}
const ::signal_source_definition::LinSource&
Datapoint::_Internal::lin_signal(const Datapoint* msg) {
  return *msg->signal_definition_.lin_signal_;
}
const ::signal_source_definition::EthernetSource&
Datapoint::_Internal::ethernet_signal(const Datapoint* msg) {
  return *msg->signal_definition_.ethernet_signal_;
}
const ::signal_source_definition::NetworkSource&
Datapoint::_Internal::network_signal(const Datapoint* msg) {
  return *msg->signal_definition_.network_signal_;
}
const ::signal_source_definition::InternalSource&
Datapoint::_Internal::internal_signal(const Datapoint* msg) {
  return *msg->signal_definition_.internal_signal_;
}
const ::data_collection_configuration_request::Processing_Toolbox_Definition&
Datapoint::_Internal::processing_toolbox_signal(const Datapoint* msg) {
  return *msg->signal_definition_.processing_toolbox_signal_;
}
const ::signal_source_definition::ThriftmeSource&
Datapoint::_Internal::thriftme_signal(const Datapoint* msg) {
  return *msg->signal_definition_.thriftme_signal_;
}
const ::signal_source_definition::CollectdSource&
Datapoint::_Internal::collectd(const Datapoint* msg) {
  return *msg->signal_definition_.collectd_;
}
const ::signal_source_definition::EELSource&
Datapoint::_Internal::eelsource(const Datapoint* msg) {
  return *msg->signal_definition_.eelsource_;
}
const ::signal_source_definition::ThriftmeSourceActive&
Datapoint::_Internal::thriftme_active(const Datapoint* msg) {
  return *msg->signal_definition_.thriftme_active_;
}
const ::data_collection_configuration_request::ListOfSNA&
Datapoint::_Internal::list_of_sna(const Datapoint* msg) {
  return *msg->list_of_sna_;
}
const ::data_collection_configuration_request::RawValueFilter&
Datapoint::_Internal::raw_value_filter(const Datapoint* msg) {
  return *msg->raw_value_filter_;
}
void Datapoint::set_allocated_default_signal(::signal_source_definition::DefaultSource* default_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (default_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, default_signal, submessage_arena);
    }
    set_has_default_signal();
    signal_definition_.default_signal_ = default_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.default_signal)
}
void Datapoint::clear_default_signal() {
  if (_internal_has_default_signal()) {
    delete signal_definition_.default_signal_;
    clear_has_signal_definition();
  }
}
void Datapoint::set_allocated_can_signal(::signal_source_definition::CanSource* can_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (can_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      can_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, can_signal, submessage_arena);
    }
    set_has_can_signal();
    signal_definition_.can_signal_ = can_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.can_signal)
}
void Datapoint::clear_can_signal() {
  if (_internal_has_can_signal()) {
    delete signal_definition_.can_signal_;
    clear_has_signal_definition();
  }
}
void Datapoint::set_allocated_lin_signal(::signal_source_definition::LinSource* lin_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (lin_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lin_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lin_signal, submessage_arena);
    }
    set_has_lin_signal();
    signal_definition_.lin_signal_ = lin_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.lin_signal)
}
void Datapoint::clear_lin_signal() {
  if (_internal_has_lin_signal()) {
    delete signal_definition_.lin_signal_;
    clear_has_signal_definition();
  }
}
void Datapoint::set_allocated_ethernet_signal(::signal_source_definition::EthernetSource* ethernet_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (ethernet_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ethernet_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ethernet_signal, submessage_arena);
    }
    set_has_ethernet_signal();
    signal_definition_.ethernet_signal_ = ethernet_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.ethernet_signal)
}
void Datapoint::clear_ethernet_signal() {
  if (_internal_has_ethernet_signal()) {
    delete signal_definition_.ethernet_signal_;
    clear_has_signal_definition();
  }
}
void Datapoint::set_allocated_network_signal(::signal_source_definition::NetworkSource* network_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (network_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_signal, submessage_arena);
    }
    set_has_network_signal();
    signal_definition_.network_signal_ = network_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.network_signal)
}
void Datapoint::clear_network_signal() {
  if (_internal_has_network_signal()) {
    delete signal_definition_.network_signal_;
    clear_has_signal_definition();
  }
}
void Datapoint::set_allocated_internal_signal(::signal_source_definition::InternalSource* internal_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (internal_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      internal_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, internal_signal, submessage_arena);
    }
    set_has_internal_signal();
    signal_definition_.internal_signal_ = internal_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.internal_signal)
}
void Datapoint::clear_internal_signal() {
  if (_internal_has_internal_signal()) {
    delete signal_definition_.internal_signal_;
    clear_has_signal_definition();
  }
}
void Datapoint::set_allocated_processing_toolbox_signal(::data_collection_configuration_request::Processing_Toolbox_Definition* processing_toolbox_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (processing_toolbox_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      processing_toolbox_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_toolbox_signal, submessage_arena);
    }
    set_has_processing_toolbox_signal();
    signal_definition_.processing_toolbox_signal_ = processing_toolbox_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.processing_toolbox_signal)
}
void Datapoint::set_allocated_thriftme_signal(::signal_source_definition::ThriftmeSource* thriftme_signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (thriftme_signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thriftme_signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thriftme_signal, submessage_arena);
    }
    set_has_thriftme_signal();
    signal_definition_.thriftme_signal_ = thriftme_signal;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.thriftme_signal)
}
void Datapoint::clear_thriftme_signal() {
  if (_internal_has_thriftme_signal()) {
    delete signal_definition_.thriftme_signal_;
    clear_has_signal_definition();
  }
}
void Datapoint::set_allocated_collectd(::signal_source_definition::CollectdSource* collectd) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (collectd) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      collectd = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, collectd, submessage_arena);
    }
    set_has_collectd();
    signal_definition_.collectd_ = collectd;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.collectd)
}
void Datapoint::clear_collectd() {
  if (_internal_has_collectd()) {
    delete signal_definition_.collectd_;
    clear_has_signal_definition();
  }
}
void Datapoint::set_allocated_eelsource(::signal_source_definition::EELSource* eelsource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (eelsource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      eelsource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, eelsource, submessage_arena);
    }
    set_has_eelsource();
    signal_definition_.eelsource_ = eelsource;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.eelsource)
}
void Datapoint::clear_eelsource() {
  if (_internal_has_eelsource()) {
    delete signal_definition_.eelsource_;
    clear_has_signal_definition();
  }
}
void Datapoint::set_allocated_thriftme_active(::signal_source_definition::ThriftmeSourceActive* thriftme_active) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_signal_definition();
  if (thriftme_active) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      thriftme_active = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, thriftme_active, submessage_arena);
    }
    set_has_thriftme_active();
    signal_definition_.thriftme_active_ = thriftme_active;
  }
  // @@protoc_insertion_point(field_set_allocated:data_collection_configuration_request.Datapoint.thriftme_active)
}
void Datapoint::clear_thriftme_active() {
  if (_internal_has_thriftme_active()) {
    delete signal_definition_.thriftme_active_;
    clear_has_signal_definition();
  }
}
Datapoint::Datapoint()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.Datapoint)
}
Datapoint::Datapoint(const Datapoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  slug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_slug().empty()) {
    slug_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.slug_);
  }
  if (from._internal_has_list_of_sna()) {
    list_of_sna_ = new ::data_collection_configuration_request::ListOfSNA(*from.list_of_sna_);
  } else {
    list_of_sna_ = nullptr;
  }
  if (from._internal_has_raw_value_filter()) {
    raw_value_filter_ = new ::data_collection_configuration_request::RawValueFilter(*from.raw_value_filter_);
  } else {
    raw_value_filter_ = nullptr;
  }
  ::memcpy(&data_point_field_type_, &from.data_point_field_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&filter_raw_value_custom_) -
    reinterpret_cast<char*>(&data_point_field_type_)) + sizeof(filter_raw_value_custom_));
  clear_has_signal_definition();
  switch (from.signal_definition_case()) {
    case kDefaultSignal: {
      _internal_mutable_default_signal()->::signal_source_definition::DefaultSource::MergeFrom(from._internal_default_signal());
      break;
    }
    case kCanSignal: {
      _internal_mutable_can_signal()->::signal_source_definition::CanSource::MergeFrom(from._internal_can_signal());
      break;
    }
    case kLinSignal: {
      _internal_mutable_lin_signal()->::signal_source_definition::LinSource::MergeFrom(from._internal_lin_signal());
      break;
    }
    case kEthernetSignal: {
      _internal_mutable_ethernet_signal()->::signal_source_definition::EthernetSource::MergeFrom(from._internal_ethernet_signal());
      break;
    }
    case kNetworkSignal: {
      _internal_mutable_network_signal()->::signal_source_definition::NetworkSource::MergeFrom(from._internal_network_signal());
      break;
    }
    case kInternalSignal: {
      _internal_mutable_internal_signal()->::signal_source_definition::InternalSource::MergeFrom(from._internal_internal_signal());
      break;
    }
    case kProcessingToolboxSignal: {
      _internal_mutable_processing_toolbox_signal()->::data_collection_configuration_request::Processing_Toolbox_Definition::MergeFrom(from._internal_processing_toolbox_signal());
      break;
    }
    case kThriftmeSignal: {
      _internal_mutable_thriftme_signal()->::signal_source_definition::ThriftmeSource::MergeFrom(from._internal_thriftme_signal());
      break;
    }
    case kCollectd: {
      _internal_mutable_collectd()->::signal_source_definition::CollectdSource::MergeFrom(from._internal_collectd());
      break;
    }
    case kEelsource: {
      _internal_mutable_eelsource()->::signal_source_definition::EELSource::MergeFrom(from._internal_eelsource());
      break;
    }
    case kThriftmeActive: {
      _internal_mutable_thriftme_active()->::signal_source_definition::ThriftmeSourceActive::MergeFrom(from._internal_thriftme_active());
      break;
    }
    case SIGNAL_DEFINITION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.Datapoint)
}

void Datapoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  slug_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&list_of_sna_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_raw_value_custom_) -
      reinterpret_cast<char*>(&list_of_sna_)) + sizeof(filter_raw_value_custom_));
  clear_has_signal_definition();
}

Datapoint::~Datapoint() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.Datapoint)
  SharedDtor();
}

void Datapoint::SharedDtor() {
  slug_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete list_of_sna_;
  if (this != internal_default_instance()) delete raw_value_filter_;
  if (has_signal_definition()) {
    clear_signal_definition();
  }
}

void Datapoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Datapoint& Datapoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void Datapoint::clear_signal_definition() {
// @@protoc_insertion_point(one_of_clear_start:data_collection_configuration_request.Datapoint)
  switch (signal_definition_case()) {
    case kDefaultSignal: {
      delete signal_definition_.default_signal_;
      break;
    }
    case kCanSignal: {
      delete signal_definition_.can_signal_;
      break;
    }
    case kLinSignal: {
      delete signal_definition_.lin_signal_;
      break;
    }
    case kEthernetSignal: {
      delete signal_definition_.ethernet_signal_;
      break;
    }
    case kNetworkSignal: {
      delete signal_definition_.network_signal_;
      break;
    }
    case kInternalSignal: {
      delete signal_definition_.internal_signal_;
      break;
    }
    case kProcessingToolboxSignal: {
      delete signal_definition_.processing_toolbox_signal_;
      break;
    }
    case kThriftmeSignal: {
      delete signal_definition_.thriftme_signal_;
      break;
    }
    case kCollectd: {
      delete signal_definition_.collectd_;
      break;
    }
    case kEelsource: {
      delete signal_definition_.eelsource_;
      break;
    }
    case kThriftmeActive: {
      delete signal_definition_.thriftme_active_;
      break;
    }
    case SIGNAL_DEFINITION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SIGNAL_DEFINITION_NOT_SET;
}


void Datapoint::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.Datapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slug_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && list_of_sna_ != nullptr) {
    delete list_of_sna_;
  }
  list_of_sna_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && raw_value_filter_ != nullptr) {
    delete raw_value_filter_;
  }
  raw_value_filter_ = nullptr;
  ::memset(&data_point_field_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&filter_raw_value_custom_) -
      reinterpret_cast<char*>(&data_point_field_type_)) + sizeof(filter_raw_value_custom_));
  clear_signal_definition();
  _internal_metadata_.Clear();
}

const char* Datapoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .signal_source_definition.DefaultSource default_signal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_default_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.CanSource can_signal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_can_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.LinSource lin_signal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_lin_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.EthernetSource ethernet_signal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ethernet_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.NetworkSource network_signal = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.InternalSource internal_signal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_internal_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.Processing_Toolbox_Definition processing_toolbox_signal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_toolbox_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.ThriftmeSource thriftme_signal = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_thriftme_signal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.CollectdSource collectd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_collectd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool filter_sna = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          filter_sna_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.Datapoint.DataPointValueTypeEnum data_point_field_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_data_point_field_type(static_cast<::data_collection_configuration_request::Datapoint_DataPointValueTypeEnum>(val));
        } else goto handle_unusual;
        continue;
      // uint32 min_number_of_instances = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          min_number_of_instances_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.Datapoint.RelativeDataValueCaptureEnum relative_data_value_capture = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_relative_data_value_capture(static_cast<::data_collection_configuration_request::Datapoint_RelativeDataValueCaptureEnum>(val));
        } else goto handle_unusual;
        continue;
      // string slug = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_slug();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "data_collection_configuration_request.Datapoint.slug"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.EELSource eelsource = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_eelsource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.ListOfSNA list_of_SNA = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_of_sna(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool filter_raw_value_custom = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          filter_raw_value_custom_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.RawValueFilter raw_value_filter = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_raw_value_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .signal_source_definition.ThriftmeSourceActive thriftme_active = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_thriftme_active(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Datapoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.Datapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .signal_source_definition.DefaultSource default_signal = 1;
  if (_internal_has_default_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::default_signal(this), target, stream);
  }

  // .signal_source_definition.CanSource can_signal = 2;
  if (_internal_has_can_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::can_signal(this), target, stream);
  }

  // .signal_source_definition.LinSource lin_signal = 3;
  if (_internal_has_lin_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::lin_signal(this), target, stream);
  }

  // .signal_source_definition.EthernetSource ethernet_signal = 4;
  if (_internal_has_ethernet_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ethernet_signal(this), target, stream);
  }

  // .signal_source_definition.NetworkSource network_signal = 5;
  if (_internal_has_network_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::network_signal(this), target, stream);
  }

  // .signal_source_definition.InternalSource internal_signal = 6;
  if (_internal_has_internal_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::internal_signal(this), target, stream);
  }

  // .data_collection_configuration_request.Processing_Toolbox_Definition processing_toolbox_signal = 7;
  if (_internal_has_processing_toolbox_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::processing_toolbox_signal(this), target, stream);
  }

  // .signal_source_definition.ThriftmeSource thriftme_signal = 8;
  if (_internal_has_thriftme_signal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::thriftme_signal(this), target, stream);
  }

  // .signal_source_definition.CollectdSource collectd = 10;
  if (_internal_has_collectd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::collectd(this), target, stream);
  }

  // bool filter_sna = 13;
  if (this->filter_sna() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_filter_sna(), target);
  }

  // .data_collection_configuration_request.Datapoint.DataPointValueTypeEnum data_point_field_type = 14;
  if (this->data_point_field_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_data_point_field_type(), target);
  }

  // uint32 min_number_of_instances = 16;
  if (this->min_number_of_instances() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_min_number_of_instances(), target);
  }

  // .data_collection_configuration_request.Datapoint.RelativeDataValueCaptureEnum relative_data_value_capture = 17;
  if (this->relative_data_value_capture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_relative_data_value_capture(), target);
  }

  // string slug = 18;
  if (this->slug().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slug().data(), static_cast<int>(this->_internal_slug().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data_collection_configuration_request.Datapoint.slug");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_slug(), target);
  }

  // .signal_source_definition.EELSource eelsource = 19;
  if (_internal_has_eelsource()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::eelsource(this), target, stream);
  }

  // .data_collection_configuration_request.ListOfSNA list_of_SNA = 20;
  if (this->has_list_of_sna()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::list_of_sna(this), target, stream);
  }

  // bool filter_raw_value_custom = 21;
  if (this->filter_raw_value_custom() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_filter_raw_value_custom(), target);
  }

  // .data_collection_configuration_request.RawValueFilter raw_value_filter = 22;
  if (this->has_raw_value_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::raw_value_filter(this), target, stream);
  }

  // .signal_source_definition.ThriftmeSourceActive thriftme_active = 23;
  if (_internal_has_thriftme_active()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::thriftme_active(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.Datapoint)
  return target;
}

size_t Datapoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.Datapoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slug = 18;
  if (this->slug().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slug());
  }

  // .data_collection_configuration_request.ListOfSNA list_of_SNA = 20;
  if (this->has_list_of_sna()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *list_of_sna_);
  }

  // .data_collection_configuration_request.RawValueFilter raw_value_filter = 22;
  if (this->has_raw_value_filter()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *raw_value_filter_);
  }

  // .data_collection_configuration_request.Datapoint.DataPointValueTypeEnum data_point_field_type = 14;
  if (this->data_point_field_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_point_field_type());
  }

  // uint32 min_number_of_instances = 16;
  if (this->min_number_of_instances() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_min_number_of_instances());
  }

  // .data_collection_configuration_request.Datapoint.RelativeDataValueCaptureEnum relative_data_value_capture = 17;
  if (this->relative_data_value_capture() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relative_data_value_capture());
  }

  // bool filter_sna = 13;
  if (this->filter_sna() != 0) {
    total_size += 1 + 1;
  }

  // bool filter_raw_value_custom = 21;
  if (this->filter_raw_value_custom() != 0) {
    total_size += 2 + 1;
  }

  switch (signal_definition_case()) {
    // .signal_source_definition.DefaultSource default_signal = 1;
    case kDefaultSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.default_signal_);
      break;
    }
    // .signal_source_definition.CanSource can_signal = 2;
    case kCanSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.can_signal_);
      break;
    }
    // .signal_source_definition.LinSource lin_signal = 3;
    case kLinSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.lin_signal_);
      break;
    }
    // .signal_source_definition.EthernetSource ethernet_signal = 4;
    case kEthernetSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.ethernet_signal_);
      break;
    }
    // .signal_source_definition.NetworkSource network_signal = 5;
    case kNetworkSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.network_signal_);
      break;
    }
    // .signal_source_definition.InternalSource internal_signal = 6;
    case kInternalSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.internal_signal_);
      break;
    }
    // .data_collection_configuration_request.Processing_Toolbox_Definition processing_toolbox_signal = 7;
    case kProcessingToolboxSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.processing_toolbox_signal_);
      break;
    }
    // .signal_source_definition.ThriftmeSource thriftme_signal = 8;
    case kThriftmeSignal: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.thriftme_signal_);
      break;
    }
    // .signal_source_definition.CollectdSource collectd = 10;
    case kCollectd: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.collectd_);
      break;
    }
    // .signal_source_definition.EELSource eelsource = 19;
    case kEelsource: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.eelsource_);
      break;
    }
    // .signal_source_definition.ThriftmeSourceActive thriftme_active = 23;
    case kThriftmeActive: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *signal_definition_.thriftme_active_);
      break;
    }
    case SIGNAL_DEFINITION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Datapoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.Datapoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Datapoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Datapoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.Datapoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.Datapoint)
    MergeFrom(*source);
  }
}

void Datapoint::MergeFrom(const Datapoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.Datapoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.slug().size() > 0) {

    slug_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.slug_);
  }
  if (from.has_list_of_sna()) {
    _internal_mutable_list_of_sna()->::data_collection_configuration_request::ListOfSNA::MergeFrom(from._internal_list_of_sna());
  }
  if (from.has_raw_value_filter()) {
    _internal_mutable_raw_value_filter()->::data_collection_configuration_request::RawValueFilter::MergeFrom(from._internal_raw_value_filter());
  }
  if (from.data_point_field_type() != 0) {
    _internal_set_data_point_field_type(from._internal_data_point_field_type());
  }
  if (from.min_number_of_instances() != 0) {
    _internal_set_min_number_of_instances(from._internal_min_number_of_instances());
  }
  if (from.relative_data_value_capture() != 0) {
    _internal_set_relative_data_value_capture(from._internal_relative_data_value_capture());
  }
  if (from.filter_sna() != 0) {
    _internal_set_filter_sna(from._internal_filter_sna());
  }
  if (from.filter_raw_value_custom() != 0) {
    _internal_set_filter_raw_value_custom(from._internal_filter_raw_value_custom());
  }
  switch (from.signal_definition_case()) {
    case kDefaultSignal: {
      _internal_mutable_default_signal()->::signal_source_definition::DefaultSource::MergeFrom(from._internal_default_signal());
      break;
    }
    case kCanSignal: {
      _internal_mutable_can_signal()->::signal_source_definition::CanSource::MergeFrom(from._internal_can_signal());
      break;
    }
    case kLinSignal: {
      _internal_mutable_lin_signal()->::signal_source_definition::LinSource::MergeFrom(from._internal_lin_signal());
      break;
    }
    case kEthernetSignal: {
      _internal_mutable_ethernet_signal()->::signal_source_definition::EthernetSource::MergeFrom(from._internal_ethernet_signal());
      break;
    }
    case kNetworkSignal: {
      _internal_mutable_network_signal()->::signal_source_definition::NetworkSource::MergeFrom(from._internal_network_signal());
      break;
    }
    case kInternalSignal: {
      _internal_mutable_internal_signal()->::signal_source_definition::InternalSource::MergeFrom(from._internal_internal_signal());
      break;
    }
    case kProcessingToolboxSignal: {
      _internal_mutable_processing_toolbox_signal()->::data_collection_configuration_request::Processing_Toolbox_Definition::MergeFrom(from._internal_processing_toolbox_signal());
      break;
    }
    case kThriftmeSignal: {
      _internal_mutable_thriftme_signal()->::signal_source_definition::ThriftmeSource::MergeFrom(from._internal_thriftme_signal());
      break;
    }
    case kCollectd: {
      _internal_mutable_collectd()->::signal_source_definition::CollectdSource::MergeFrom(from._internal_collectd());
      break;
    }
    case kEelsource: {
      _internal_mutable_eelsource()->::signal_source_definition::EELSource::MergeFrom(from._internal_eelsource());
      break;
    }
    case kThriftmeActive: {
      _internal_mutable_thriftme_active()->::signal_source_definition::ThriftmeSourceActive::MergeFrom(from._internal_thriftme_active());
      break;
    }
    case SIGNAL_DEFINITION_NOT_SET: {
      break;
    }
  }
}

void Datapoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.Datapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datapoint::CopyFrom(const Datapoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.Datapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datapoint::IsInitialized() const {
  return true;
}

void Datapoint::InternalSwap(Datapoint* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  slug_.Swap(&other->slug_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(list_of_sna_, other->list_of_sna_);
  swap(raw_value_filter_, other->raw_value_filter_);
  swap(data_point_field_type_, other->data_point_field_type_);
  swap(min_number_of_instances_, other->min_number_of_instances_);
  swap(relative_data_value_capture_, other->relative_data_value_capture_);
  swap(filter_sna_, other->filter_sna_);
  swap(filter_raw_value_custom_, other->filter_raw_value_custom_);
  swap(signal_definition_, other->signal_definition_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Datapoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Processing_Toolbox_Definition::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_Processing_Toolbox_Definition_default_instance_._instance.get_mutable()->processing_toolbox_signal_def_ = const_cast< ::signal_source_definition::ProcessingToolboxSource*>(
      ::signal_source_definition::ProcessingToolboxSource::internal_default_instance());
}
class Processing_Toolbox_Definition::_Internal {
 public:
  static const ::signal_source_definition::ProcessingToolboxSource& processing_toolbox_signal_def(const Processing_Toolbox_Definition* msg);
};

const ::signal_source_definition::ProcessingToolboxSource&
Processing_Toolbox_Definition::_Internal::processing_toolbox_signal_def(const Processing_Toolbox_Definition* msg) {
  return *msg->processing_toolbox_signal_def_;
}
void Processing_Toolbox_Definition::clear_processing_toolbox_signal_def() {
  if (GetArenaNoVirtual() == nullptr && processing_toolbox_signal_def_ != nullptr) {
    delete processing_toolbox_signal_def_;
  }
  processing_toolbox_signal_def_ = nullptr;
}
Processing_Toolbox_Definition::Processing_Toolbox_Definition()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.Processing_Toolbox_Definition)
}
Processing_Toolbox_Definition::Processing_Toolbox_Definition(const Processing_Toolbox_Definition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      tool_input_parameter_(from.tool_input_parameter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_processing_toolbox_signal_def()) {
    processing_toolbox_signal_def_ = new ::signal_source_definition::ProcessingToolboxSource(*from.processing_toolbox_signal_def_);
  } else {
    processing_toolbox_signal_def_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.Processing_Toolbox_Definition)
}

void Processing_Toolbox_Definition::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  processing_toolbox_signal_def_ = nullptr;
}

Processing_Toolbox_Definition::~Processing_Toolbox_Definition() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.Processing_Toolbox_Definition)
  SharedDtor();
}

void Processing_Toolbox_Definition::SharedDtor() {
  if (this != internal_default_instance()) delete processing_toolbox_signal_def_;
}

void Processing_Toolbox_Definition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Processing_Toolbox_Definition& Processing_Toolbox_Definition::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void Processing_Toolbox_Definition::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.Processing_Toolbox_Definition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tool_input_parameter_.Clear();
  if (GetArenaNoVirtual() == nullptr && processing_toolbox_signal_def_ != nullptr) {
    delete processing_toolbox_signal_def_;
  }
  processing_toolbox_signal_def_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Processing_Toolbox_Definition::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .signal_source_definition.ProcessingToolboxSource processing_toolbox_signal_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_toolbox_signal_def(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .data_collection_configuration_request.ToolInputParameter tool_input_parameter = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tool_input_parameter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Processing_Toolbox_Definition::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.Processing_Toolbox_Definition)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .signal_source_definition.ProcessingToolboxSource processing_toolbox_signal_def = 1;
  if (this->has_processing_toolbox_signal_def()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::processing_toolbox_signal_def(this), target, stream);
  }

  // repeated .data_collection_configuration_request.ToolInputParameter tool_input_parameter = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tool_input_parameter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_tool_input_parameter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.Processing_Toolbox_Definition)
  return target;
}

size_t Processing_Toolbox_Definition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.Processing_Toolbox_Definition)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.ToolInputParameter tool_input_parameter = 2;
  total_size += 1UL * this->_internal_tool_input_parameter_size();
  for (const auto& msg : this->tool_input_parameter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .signal_source_definition.ProcessingToolboxSource processing_toolbox_signal_def = 1;
  if (this->has_processing_toolbox_signal_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *processing_toolbox_signal_def_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Processing_Toolbox_Definition::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.Processing_Toolbox_Definition)
  GOOGLE_DCHECK_NE(&from, this);
  const Processing_Toolbox_Definition* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Processing_Toolbox_Definition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.Processing_Toolbox_Definition)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.Processing_Toolbox_Definition)
    MergeFrom(*source);
  }
}

void Processing_Toolbox_Definition::MergeFrom(const Processing_Toolbox_Definition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.Processing_Toolbox_Definition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tool_input_parameter_.MergeFrom(from.tool_input_parameter_);
  if (from.has_processing_toolbox_signal_def()) {
    _internal_mutable_processing_toolbox_signal_def()->::signal_source_definition::ProcessingToolboxSource::MergeFrom(from._internal_processing_toolbox_signal_def());
  }
}

void Processing_Toolbox_Definition::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.Processing_Toolbox_Definition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Processing_Toolbox_Definition::CopyFrom(const Processing_Toolbox_Definition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.Processing_Toolbox_Definition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processing_Toolbox_Definition::IsInitialized() const {
  return true;
}

void Processing_Toolbox_Definition::InternalSwap(Processing_Toolbox_Definition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  tool_input_parameter_.InternalSwap(&other->tool_input_parameter_);
  swap(processing_toolbox_signal_def_, other->processing_toolbox_signal_def_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Processing_Toolbox_Definition::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ToolInputParameter::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_ToolInputParameter_default_instance_._instance.get_mutable()->input_ = const_cast< ::data_collection_configuration_request::Datapoint*>(
      ::data_collection_configuration_request::Datapoint::internal_default_instance());
  ::data_collection_configuration_request::_ToolInputParameter_default_instance_._instance.get_mutable()->data_points_configuration_ = const_cast< ::data_collection_configuration_request::DatapointsConfiguration*>(
      ::data_collection_configuration_request::DatapointsConfiguration::internal_default_instance());
}
class ToolInputParameter::_Internal {
 public:
  static const ::data_collection_configuration_request::Datapoint& input(const ToolInputParameter* msg);
  static const ::data_collection_configuration_request::DatapointsConfiguration& data_points_configuration(const ToolInputParameter* msg);
};

const ::data_collection_configuration_request::Datapoint&
ToolInputParameter::_Internal::input(const ToolInputParameter* msg) {
  return *msg->input_;
}
const ::data_collection_configuration_request::DatapointsConfiguration&
ToolInputParameter::_Internal::data_points_configuration(const ToolInputParameter* msg) {
  return *msg->data_points_configuration_;
}
ToolInputParameter::ToolInputParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.ToolInputParameter)
}
ToolInputParameter::ToolInputParameter(const ToolInputParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dpr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dpr().empty()) {
    dpr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpr_);
  }
  if (from._internal_has_input()) {
    input_ = new ::data_collection_configuration_request::Datapoint(*from.input_);
  } else {
    input_ = nullptr;
  }
  if (from._internal_has_data_points_configuration()) {
    data_points_configuration_ = new ::data_collection_configuration_request::DatapointsConfiguration(*from.data_points_configuration_);
  } else {
    data_points_configuration_ = nullptr;
  }
  dpi_type_ = from.dpi_type_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.ToolInputParameter)
}

void ToolInputParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  dpr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&input_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dpi_type_) -
      reinterpret_cast<char*>(&input_)) + sizeof(dpi_type_));
}

ToolInputParameter::~ToolInputParameter() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.ToolInputParameter)
  SharedDtor();
}

void ToolInputParameter::SharedDtor() {
  dpr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete input_;
  if (this != internal_default_instance()) delete data_points_configuration_;
}

void ToolInputParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ToolInputParameter& ToolInputParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Datapoint_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void ToolInputParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.ToolInputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dpr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && input_ != nullptr) {
    delete input_;
  }
  input_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_points_configuration_ != nullptr) {
    delete data_points_configuration_;
  }
  data_points_configuration_ = nullptr;
  dpi_type_ = 0;
  _internal_metadata_.Clear();
}

const char* ToolInputParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .data_collection_configuration_request.Datapoint input = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dpi_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dpi_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dpr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_dpr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "data_collection_configuration_request.ToolInputParameter.dpr"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.DatapointsConfiguration data_points_configuration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_points_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ToolInputParameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.ToolInputParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data_collection_configuration_request.Datapoint input = 1;
  if (this->has_input()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::input(this), target, stream);
  }

  // int32 dpi_type = 2;
  if (this->dpi_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dpi_type(), target);
  }

  // string dpr = 3;
  if (this->dpr().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dpr().data(), static_cast<int>(this->_internal_dpr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data_collection_configuration_request.ToolInputParameter.dpr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dpr(), target);
  }

  // .data_collection_configuration_request.DatapointsConfiguration data_points_configuration = 4;
  if (this->has_data_points_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::data_points_configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.ToolInputParameter)
  return target;
}

size_t ToolInputParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.ToolInputParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dpr = 3;
  if (this->dpr().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dpr());
  }

  // .data_collection_configuration_request.Datapoint input = 1;
  if (this->has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *input_);
  }

  // .data_collection_configuration_request.DatapointsConfiguration data_points_configuration = 4;
  if (this->has_data_points_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_points_configuration_);
  }

  // int32 dpi_type = 2;
  if (this->dpi_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dpi_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ToolInputParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.ToolInputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const ToolInputParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ToolInputParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.ToolInputParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.ToolInputParameter)
    MergeFrom(*source);
  }
}

void ToolInputParameter::MergeFrom(const ToolInputParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.ToolInputParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dpr().size() > 0) {

    dpr_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dpr_);
  }
  if (from.has_input()) {
    _internal_mutable_input()->::data_collection_configuration_request::Datapoint::MergeFrom(from._internal_input());
  }
  if (from.has_data_points_configuration()) {
    _internal_mutable_data_points_configuration()->::data_collection_configuration_request::DatapointsConfiguration::MergeFrom(from._internal_data_points_configuration());
  }
  if (from.dpi_type() != 0) {
    _internal_set_dpi_type(from._internal_dpi_type());
  }
}

void ToolInputParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.ToolInputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToolInputParameter::CopyFrom(const ToolInputParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.ToolInputParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToolInputParameter::IsInitialized() const {
  return true;
}

void ToolInputParameter::InternalSwap(ToolInputParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dpr_.Swap(&other->dpr_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(input_, other->input_);
  swap(data_points_configuration_, other->data_points_configuration_);
  swap(dpi_type_, other->dpi_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ToolInputParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DatapointsConfiguration::InitAsDefaultInstance() {
}
class DatapointsConfiguration::_Internal {
 public:
};

DatapointsConfiguration::DatapointsConfiguration()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.DatapointsConfiguration)
}
DatapointsConfiguration::DatapointsConfiguration(const DatapointsConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      event_trigger_(from.event_trigger_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collection_trigger_operator_ = from.collection_trigger_operator_;
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.DatapointsConfiguration)
}

void DatapointsConfiguration::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DatapointsConfiguration_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  collection_trigger_operator_ = 0;
}

DatapointsConfiguration::~DatapointsConfiguration() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.DatapointsConfiguration)
  SharedDtor();
}

void DatapointsConfiguration::SharedDtor() {
}

void DatapointsConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DatapointsConfiguration& DatapointsConfiguration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DatapointsConfiguration_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DatapointsConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.DatapointsConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_trigger_.Clear();
  collection_trigger_operator_ = 0;
  _internal_metadata_.Clear();
}

const char* DatapointsConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .data_collection_configuration_request.Trigger event_trigger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_trigger(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.LogicalOperatorEnum collection_trigger_operator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_collection_trigger_operator(static_cast<::data_collection_configuration_request::LogicalOperatorEnum>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DatapointsConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.DatapointsConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.Trigger event_trigger = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_trigger_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_event_trigger(i), target, stream);
  }

  // .data_collection_configuration_request.LogicalOperatorEnum collection_trigger_operator = 2;
  if (this->collection_trigger_operator() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_collection_trigger_operator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.DatapointsConfiguration)
  return target;
}

size_t DatapointsConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.DatapointsConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .data_collection_configuration_request.Trigger event_trigger = 1;
  total_size += 1UL * this->_internal_event_trigger_size();
  for (const auto& msg : this->event_trigger_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .data_collection_configuration_request.LogicalOperatorEnum collection_trigger_operator = 2;
  if (this->collection_trigger_operator() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_collection_trigger_operator());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DatapointsConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.DatapointsConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const DatapointsConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DatapointsConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.DatapointsConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.DatapointsConfiguration)
    MergeFrom(*source);
  }
}

void DatapointsConfiguration::MergeFrom(const DatapointsConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.DatapointsConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  event_trigger_.MergeFrom(from.event_trigger_);
  if (from.collection_trigger_operator() != 0) {
    _internal_set_collection_trigger_operator(from._internal_collection_trigger_operator());
  }
}

void DatapointsConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.DatapointsConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DatapointsConfiguration::CopyFrom(const DatapointsConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.DatapointsConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DatapointsConfiguration::IsInitialized() const {
  return true;
}

void DatapointsConfiguration::InternalSwap(DatapointsConfiguration* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  event_trigger_.InternalSwap(&other->event_trigger_);
  swap(collection_trigger_operator_, other->collection_trigger_operator_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DatapointsConfiguration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RvidEffectivePeriod::InitAsDefaultInstance() {
}
class RvidEffectivePeriod::_Internal {
 public:
};

RvidEffectivePeriod::RvidEffectivePeriod()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.RvidEffectivePeriod)
}
RvidEffectivePeriod::RvidEffectivePeriod(const RvidEffectivePeriod& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rvid_effective_period_range_min_seconds_, &from.rvid_effective_period_range_min_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&rvid_effective_period_range_max_seconds_) -
    reinterpret_cast<char*>(&rvid_effective_period_range_min_seconds_)) + sizeof(rvid_effective_period_range_max_seconds_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.RvidEffectivePeriod)
}

void RvidEffectivePeriod::SharedCtor() {
  ::memset(&rvid_effective_period_range_min_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rvid_effective_period_range_max_seconds_) -
      reinterpret_cast<char*>(&rvid_effective_period_range_min_seconds_)) + sizeof(rvid_effective_period_range_max_seconds_));
}

RvidEffectivePeriod::~RvidEffectivePeriod() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.RvidEffectivePeriod)
  SharedDtor();
}

void RvidEffectivePeriod::SharedDtor() {
}

void RvidEffectivePeriod::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RvidEffectivePeriod& RvidEffectivePeriod::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RvidEffectivePeriod_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void RvidEffectivePeriod::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.RvidEffectivePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rvid_effective_period_range_min_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rvid_effective_period_range_max_seconds_) -
      reinterpret_cast<char*>(&rvid_effective_period_range_min_seconds_)) + sizeof(rvid_effective_period_range_max_seconds_));
  _internal_metadata_.Clear();
}

const char* RvidEffectivePeriod::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 rvid_effective_period_range_min_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rvid_effective_period_range_min_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 rvid_effective_period_range_max_seconds = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          rvid_effective_period_range_max_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RvidEffectivePeriod::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.RvidEffectivePeriod)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 rvid_effective_period_range_min_seconds = 1;
  if (this->rvid_effective_period_range_min_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rvid_effective_period_range_min_seconds(), target);
  }

  // uint32 rvid_effective_period_range_max_seconds = 2;
  if (this->rvid_effective_period_range_max_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_rvid_effective_period_range_max_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.RvidEffectivePeriod)
  return target;
}

size_t RvidEffectivePeriod::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.RvidEffectivePeriod)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 rvid_effective_period_range_min_seconds = 1;
  if (this->rvid_effective_period_range_min_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rvid_effective_period_range_min_seconds());
  }

  // uint32 rvid_effective_period_range_max_seconds = 2;
  if (this->rvid_effective_period_range_max_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rvid_effective_period_range_max_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RvidEffectivePeriod::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.RvidEffectivePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  const RvidEffectivePeriod* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RvidEffectivePeriod>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.RvidEffectivePeriod)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.RvidEffectivePeriod)
    MergeFrom(*source);
  }
}

void RvidEffectivePeriod::MergeFrom(const RvidEffectivePeriod& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.RvidEffectivePeriod)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rvid_effective_period_range_min_seconds() != 0) {
    _internal_set_rvid_effective_period_range_min_seconds(from._internal_rvid_effective_period_range_min_seconds());
  }
  if (from.rvid_effective_period_range_max_seconds() != 0) {
    _internal_set_rvid_effective_period_range_max_seconds(from._internal_rvid_effective_period_range_max_seconds());
  }
}

void RvidEffectivePeriod::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.RvidEffectivePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RvidEffectivePeriod::CopyFrom(const RvidEffectivePeriod& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.RvidEffectivePeriod)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RvidEffectivePeriod::IsInitialized() const {
  return true;
}

void RvidEffectivePeriod::InternalSwap(RvidEffectivePeriod* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rvid_effective_period_range_min_seconds_, other->rvid_effective_period_range_min_seconds_);
  swap(rvid_effective_period_range_max_seconds_, other->rvid_effective_period_range_max_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RvidEffectivePeriod::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataPackageTimeToLive::InitAsDefaultInstance() {
}
class DataPackageTimeToLive::_Internal {
 public:
};

DataPackageTimeToLive::DataPackageTimeToLive()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.DataPackageTimeToLive)
}
DataPackageTimeToLive::DataPackageTimeToLive(const DataPackageTimeToLive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&data_package_time_to_live_min_s_, &from.data_package_time_to_live_min_s_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_package_time_to_live_max_s_) -
    reinterpret_cast<char*>(&data_package_time_to_live_min_s_)) + sizeof(data_package_time_to_live_max_s_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.DataPackageTimeToLive)
}

void DataPackageTimeToLive::SharedCtor() {
  ::memset(&data_package_time_to_live_min_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_package_time_to_live_max_s_) -
      reinterpret_cast<char*>(&data_package_time_to_live_min_s_)) + sizeof(data_package_time_to_live_max_s_));
}

DataPackageTimeToLive::~DataPackageTimeToLive() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.DataPackageTimeToLive)
  SharedDtor();
}

void DataPackageTimeToLive::SharedDtor() {
}

void DataPackageTimeToLive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataPackageTimeToLive& DataPackageTimeToLive::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataPackageTimeToLive_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DataPackageTimeToLive::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.DataPackageTimeToLive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&data_package_time_to_live_min_s_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_package_time_to_live_max_s_) -
      reinterpret_cast<char*>(&data_package_time_to_live_min_s_)) + sizeof(data_package_time_to_live_max_s_));
  _internal_metadata_.Clear();
}

const char* DataPackageTimeToLive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 data_package_time_to_live_min_s = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          data_package_time_to_live_min_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 data_package_time_to_live_max_s = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_package_time_to_live_max_s_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataPackageTimeToLive::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.DataPackageTimeToLive)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 data_package_time_to_live_min_s = 1;
  if (this->data_package_time_to_live_min_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_data_package_time_to_live_min_s(), target);
  }

  // uint32 data_package_time_to_live_max_s = 2;
  if (this->data_package_time_to_live_max_s() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_data_package_time_to_live_max_s(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.DataPackageTimeToLive)
  return target;
}

size_t DataPackageTimeToLive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.DataPackageTimeToLive)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 data_package_time_to_live_min_s = 1;
  if (this->data_package_time_to_live_min_s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_package_time_to_live_min_s());
  }

  // uint32 data_package_time_to_live_max_s = 2;
  if (this->data_package_time_to_live_max_s() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_data_package_time_to_live_max_s());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataPackageTimeToLive::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.DataPackageTimeToLive)
  GOOGLE_DCHECK_NE(&from, this);
  const DataPackageTimeToLive* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataPackageTimeToLive>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.DataPackageTimeToLive)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.DataPackageTimeToLive)
    MergeFrom(*source);
  }
}

void DataPackageTimeToLive::MergeFrom(const DataPackageTimeToLive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.DataPackageTimeToLive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data_package_time_to_live_min_s() != 0) {
    _internal_set_data_package_time_to_live_min_s(from._internal_data_package_time_to_live_min_s());
  }
  if (from.data_package_time_to_live_max_s() != 0) {
    _internal_set_data_package_time_to_live_max_s(from._internal_data_package_time_to_live_max_s());
  }
}

void DataPackageTimeToLive::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.DataPackageTimeToLive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataPackageTimeToLive::CopyFrom(const DataPackageTimeToLive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.DataPackageTimeToLive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataPackageTimeToLive::IsInitialized() const {
  return true;
}

void DataPackageTimeToLive::InternalSwap(DataPackageTimeToLive* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_package_time_to_live_min_s_, other->data_package_time_to_live_min_s_);
  swap(data_package_time_to_live_max_s_, other->data_package_time_to_live_max_s_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataPackageTimeToLive::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataCollectionJob_JobConfig::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_DataCollectionJob_JobConfig_default_instance_._instance.get_mutable()->rvid_effective_period_range_ = const_cast< ::data_collection_configuration_request::RvidEffectivePeriod*>(
      ::data_collection_configuration_request::RvidEffectivePeriod::internal_default_instance());
  ::data_collection_configuration_request::_DataCollectionJob_JobConfig_default_instance_._instance.get_mutable()->startup_delay_ = const_cast< ::data_collection_configuration_request::StartUpDelay*>(
      ::data_collection_configuration_request::StartUpDelay::internal_default_instance());
  ::data_collection_configuration_request::_DataCollectionJob_JobConfig_default_instance_._instance.get_mutable()->end_point_uncertainity_ = const_cast< ::data_collection_configuration_request::EndPointUncertainty*>(
      ::data_collection_configuration_request::EndPointUncertainty::internal_default_instance());
  ::data_collection_configuration_request::_DataCollectionJob_JobConfig_default_instance_._instance.get_mutable()->data_recording_gap_ = const_cast< ::data_collection_configuration_request::DataRecordingGap*>(
      ::data_collection_configuration_request::DataRecordingGap::internal_default_instance());
  ::data_collection_configuration_request::_DataCollectionJob_JobConfig_default_instance_._instance.get_mutable()->absolute_time_offset_ = const_cast< ::data_collection_configuration_request::AbsoluteTimeOffset*>(
      ::data_collection_configuration_request::AbsoluteTimeOffset::internal_default_instance());
  ::data_collection_configuration_request::_DataCollectionJob_JobConfig_default_instance_._instance.get_mutable()->job_format_version_ = const_cast< ::data_collection_configuration_request::Version*>(
      ::data_collection_configuration_request::Version::internal_default_instance());
  ::data_collection_configuration_request::_DataCollectionJob_JobConfig_default_instance_._instance.get_mutable()->data_package_time_to_live_s_ = const_cast< ::data_collection_configuration_request::DataPackageTimeToLive*>(
      ::data_collection_configuration_request::DataPackageTimeToLive::internal_default_instance());
}
class DataCollectionJob_JobConfig::_Internal {
 public:
  static const ::data_collection_configuration_request::RvidEffectivePeriod& rvid_effective_period_range(const DataCollectionJob_JobConfig* msg);
  static const ::data_collection_configuration_request::StartUpDelay& startup_delay(const DataCollectionJob_JobConfig* msg);
  static const ::data_collection_configuration_request::EndPointUncertainty& end_point_uncertainity(const DataCollectionJob_JobConfig* msg);
  static const ::data_collection_configuration_request::DataRecordingGap& data_recording_gap(const DataCollectionJob_JobConfig* msg);
  static const ::data_collection_configuration_request::AbsoluteTimeOffset& absolute_time_offset(const DataCollectionJob_JobConfig* msg);
  static const ::data_collection_configuration_request::Version& job_format_version(const DataCollectionJob_JobConfig* msg);
  static const ::data_collection_configuration_request::DataPackageTimeToLive& data_package_time_to_live_s(const DataCollectionJob_JobConfig* msg);
};

const ::data_collection_configuration_request::RvidEffectivePeriod&
DataCollectionJob_JobConfig::_Internal::rvid_effective_period_range(const DataCollectionJob_JobConfig* msg) {
  return *msg->rvid_effective_period_range_;
}
const ::data_collection_configuration_request::StartUpDelay&
DataCollectionJob_JobConfig::_Internal::startup_delay(const DataCollectionJob_JobConfig* msg) {
  return *msg->startup_delay_;
}
const ::data_collection_configuration_request::EndPointUncertainty&
DataCollectionJob_JobConfig::_Internal::end_point_uncertainity(const DataCollectionJob_JobConfig* msg) {
  return *msg->end_point_uncertainity_;
}
const ::data_collection_configuration_request::DataRecordingGap&
DataCollectionJob_JobConfig::_Internal::data_recording_gap(const DataCollectionJob_JobConfig* msg) {
  return *msg->data_recording_gap_;
}
const ::data_collection_configuration_request::AbsoluteTimeOffset&
DataCollectionJob_JobConfig::_Internal::absolute_time_offset(const DataCollectionJob_JobConfig* msg) {
  return *msg->absolute_time_offset_;
}
const ::data_collection_configuration_request::Version&
DataCollectionJob_JobConfig::_Internal::job_format_version(const DataCollectionJob_JobConfig* msg) {
  return *msg->job_format_version_;
}
const ::data_collection_configuration_request::DataPackageTimeToLive&
DataCollectionJob_JobConfig::_Internal::data_package_time_to_live_s(const DataCollectionJob_JobConfig* msg) {
  return *msg->data_package_time_to_live_s_;
}
void DataCollectionJob_JobConfig::clear_device_properties() {
  device_properties_.Clear();
}
void DataCollectionJob_JobConfig::clear_debug_information() {
  debug_information_.Clear();
}
DataCollectionJob_JobConfig::DataCollectionJob_JobConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.DataCollectionJob.JobConfig)
}
DataCollectionJob_JobConfig::DataCollectionJob_JobConfig(const DataCollectionJob_JobConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      device_properties_(from.device_properties_),
      debug_information_(from.debug_information_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  job_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_job_uuid().empty()) {
    job_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_uuid_);
  }
  if (from._internal_has_rvid_effective_period_range()) {
    rvid_effective_period_range_ = new ::data_collection_configuration_request::RvidEffectivePeriod(*from.rvid_effective_period_range_);
  } else {
    rvid_effective_period_range_ = nullptr;
  }
  if (from._internal_has_startup_delay()) {
    startup_delay_ = new ::data_collection_configuration_request::StartUpDelay(*from.startup_delay_);
  } else {
    startup_delay_ = nullptr;
  }
  if (from._internal_has_end_point_uncertainity()) {
    end_point_uncertainity_ = new ::data_collection_configuration_request::EndPointUncertainty(*from.end_point_uncertainity_);
  } else {
    end_point_uncertainity_ = nullptr;
  }
  if (from._internal_has_data_recording_gap()) {
    data_recording_gap_ = new ::data_collection_configuration_request::DataRecordingGap(*from.data_recording_gap_);
  } else {
    data_recording_gap_ = nullptr;
  }
  if (from._internal_has_absolute_time_offset()) {
    absolute_time_offset_ = new ::data_collection_configuration_request::AbsoluteTimeOffset(*from.absolute_time_offset_);
  } else {
    absolute_time_offset_ = nullptr;
  }
  if (from._internal_has_job_format_version()) {
    job_format_version_ = new ::data_collection_configuration_request::Version(*from.job_format_version_);
  } else {
    job_format_version_ = nullptr;
  }
  if (from._internal_has_data_package_time_to_live_s()) {
    data_package_time_to_live_s_ = new ::data_collection_configuration_request::DataPackageTimeToLive(*from.data_package_time_to_live_s_);
  } else {
    data_package_time_to_live_s_ = nullptr;
  }
  ::memcpy(&nossg_allowed_, &from.nossg_allowed_,
    static_cast<size_t>(reinterpret_cast<char*>(&upload_channel_) -
    reinterpret_cast<char*>(&nossg_allowed_)) + sizeof(upload_channel_));
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.DataCollectionJob.JobConfig)
}

void DataCollectionJob_JobConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataCollectionJob_JobConfig_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  job_uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&rvid_effective_period_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_channel_) -
      reinterpret_cast<char*>(&rvid_effective_period_range_)) + sizeof(upload_channel_));
}

DataCollectionJob_JobConfig::~DataCollectionJob_JobConfig() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.DataCollectionJob.JobConfig)
  SharedDtor();
}

void DataCollectionJob_JobConfig::SharedDtor() {
  job_uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rvid_effective_period_range_;
  if (this != internal_default_instance()) delete startup_delay_;
  if (this != internal_default_instance()) delete end_point_uncertainity_;
  if (this != internal_default_instance()) delete data_recording_gap_;
  if (this != internal_default_instance()) delete absolute_time_offset_;
  if (this != internal_default_instance()) delete job_format_version_;
  if (this != internal_default_instance()) delete data_package_time_to_live_s_;
}

void DataCollectionJob_JobConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataCollectionJob_JobConfig& DataCollectionJob_JobConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataCollectionJob_JobConfig_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DataCollectionJob_JobConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.DataCollectionJob.JobConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_properties_.Clear();
  debug_information_.Clear();
  job_uuid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && rvid_effective_period_range_ != nullptr) {
    delete rvid_effective_period_range_;
  }
  rvid_effective_period_range_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && startup_delay_ != nullptr) {
    delete startup_delay_;
  }
  startup_delay_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_point_uncertainity_ != nullptr) {
    delete end_point_uncertainity_;
  }
  end_point_uncertainity_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_recording_gap_ != nullptr) {
    delete data_recording_gap_;
  }
  data_recording_gap_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && absolute_time_offset_ != nullptr) {
    delete absolute_time_offset_;
  }
  absolute_time_offset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && job_format_version_ != nullptr) {
    delete job_format_version_;
  }
  job_format_version_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && data_package_time_to_live_s_ != nullptr) {
    delete data_package_time_to_live_s_;
  }
  data_package_time_to_live_s_ = nullptr;
  ::memset(&nossg_allowed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&upload_channel_) -
      reinterpret_cast<char*>(&nossg_allowed_)) + sizeof(upload_channel_));
  _internal_metadata_.Clear();
}

const char* DataCollectionJob_JobConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string job_uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_job_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "data_collection_configuration_request.DataCollectionJob.JobConfig.job_uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.RvidEffectivePeriod rvid_effective_period_range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_rvid_effective_period_range(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 nossg_allowed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          nossg_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool enable_active_thrift = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          enable_active_thrift_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 active_thrift_interval_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          active_thrift_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 active_thrift_retry_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          active_thrift_retry_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 active_thrift_connect_timeout_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          active_thrift_connect_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 active_thrift_response_timeout_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          active_thrift_response_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 upload_interval = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          upload_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stf_buffer_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          stf_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record_vin = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          record_vin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool persist_request = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          persist_request_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.StartUpDelay startup_delay = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_startup_delay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.EndPointUncertainty end_point_uncertainity = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_point_uncertainity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.DataRecordingGap data_recording_gap = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_recording_gap(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.AbsoluteTimeOffset absolute_time_offset = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_absolute_time_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.Version job_format_version = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_format_version(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.RelativeTimeStampCaptureEnum relative_time_stamp_capture = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_relative_time_stamp_capture(static_cast<::data_collection_configuration_request::RelativeTimeStampCaptureEnum>(val));
        } else goto handle_unusual;
        continue;
      // bool record_tzoffset = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          record_tzoffset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record_file_counter = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          record_file_counter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record_session_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          record_session_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record_rvid = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          record_rvid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record_ecu_info = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          record_ecu_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool record_market_info = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          record_market_info_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 job_priority = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          job_priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .request_format.data_types.KeyValuePair device_properties = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_device_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .request_format.data_types.KeyValuePair debug_information = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_debug_information(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.DataPackageTimeToLive data_package_time_to_live_s = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_package_time_to_live_s(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.UploadChannel upload_channel = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_upload_channel(static_cast<::data_collection_configuration_request::UploadChannel>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCollectionJob_JobConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.DataCollectionJob.JobConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_uuid = 1;
  if (this->job_uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_uuid().data(), static_cast<int>(this->_internal_job_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "data_collection_configuration_request.DataCollectionJob.JobConfig.job_uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_uuid(), target);
  }

  // .data_collection_configuration_request.RvidEffectivePeriod rvid_effective_period_range = 2;
  if (this->has_rvid_effective_period_range()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::rvid_effective_period_range(this), target, stream);
  }

  // uint32 nossg_allowed = 3;
  if (this->nossg_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nossg_allowed(), target);
  }

  // bool enable_active_thrift = 4;
  if (this->enable_active_thrift() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_enable_active_thrift(), target);
  }

  // uint32 active_thrift_interval_ms = 5;
  if (this->active_thrift_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_active_thrift_interval_ms(), target);
  }

  // uint32 active_thrift_retry_ms = 6;
  if (this->active_thrift_retry_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_active_thrift_retry_ms(), target);
  }

  // uint32 active_thrift_connect_timeout_ms = 7;
  if (this->active_thrift_connect_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_active_thrift_connect_timeout_ms(), target);
  }

  // uint32 active_thrift_response_timeout_ms = 8;
  if (this->active_thrift_response_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_active_thrift_response_timeout_ms(), target);
  }

  // uint32 upload_interval = 9;
  if (this->upload_interval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_upload_interval(), target);
  }

  // uint32 stf_buffer_size = 10;
  if (this->stf_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_stf_buffer_size(), target);
  }

  // bool record_vin = 11;
  if (this->record_vin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_record_vin(), target);
  }

  // bool persist_request = 12;
  if (this->persist_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_persist_request(), target);
  }

  // .data_collection_configuration_request.StartUpDelay startup_delay = 13;
  if (this->has_startup_delay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::startup_delay(this), target, stream);
  }

  // .data_collection_configuration_request.EndPointUncertainty end_point_uncertainity = 14;
  if (this->has_end_point_uncertainity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::end_point_uncertainity(this), target, stream);
  }

  // .data_collection_configuration_request.DataRecordingGap data_recording_gap = 15;
  if (this->has_data_recording_gap()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::data_recording_gap(this), target, stream);
  }

  // .data_collection_configuration_request.AbsoluteTimeOffset absolute_time_offset = 16;
  if (this->has_absolute_time_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::absolute_time_offset(this), target, stream);
  }

  // .data_collection_configuration_request.Version job_format_version = 17;
  if (this->has_job_format_version()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::job_format_version(this), target, stream);
  }

  // .data_collection_configuration_request.RelativeTimeStampCaptureEnum relative_time_stamp_capture = 18;
  if (this->relative_time_stamp_capture() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_relative_time_stamp_capture(), target);
  }

  // bool record_tzoffset = 19;
  if (this->record_tzoffset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_record_tzoffset(), target);
  }

  // bool record_file_counter = 20;
  if (this->record_file_counter() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(20, this->_internal_record_file_counter(), target);
  }

  // bool record_session_id = 21;
  if (this->record_session_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(21, this->_internal_record_session_id(), target);
  }

  // bool record_rvid = 22;
  if (this->record_rvid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(22, this->_internal_record_rvid(), target);
  }

  // bool record_ecu_info = 23;
  if (this->record_ecu_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(23, this->_internal_record_ecu_info(), target);
  }

  // bool record_market_info = 24;
  if (this->record_market_info() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(24, this->_internal_record_market_info(), target);
  }

  // uint32 job_priority = 25;
  if (this->job_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_job_priority(), target);
  }

  // repeated .request_format.data_types.KeyValuePair device_properties = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_device_properties_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_device_properties(i), target, stream);
  }

  // repeated .request_format.data_types.KeyValuePair debug_information = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_debug_information_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_debug_information(i), target, stream);
  }

  // .data_collection_configuration_request.DataPackageTimeToLive data_package_time_to_live_s = 28;
  if (this->has_data_package_time_to_live_s()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::data_package_time_to_live_s(this), target, stream);
  }

  // .data_collection_configuration_request.UploadChannel upload_channel = 29;
  if (this->upload_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      29, this->_internal_upload_channel(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.DataCollectionJob.JobConfig)
  return target;
}

size_t DataCollectionJob_JobConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.DataCollectionJob.JobConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .request_format.data_types.KeyValuePair device_properties = 26;
  total_size += 2UL * this->_internal_device_properties_size();
  for (const auto& msg : this->device_properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .request_format.data_types.KeyValuePair debug_information = 27;
  total_size += 2UL * this->_internal_debug_information_size();
  for (const auto& msg : this->debug_information_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string job_uuid = 1;
  if (this->job_uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_uuid());
  }

  // .data_collection_configuration_request.RvidEffectivePeriod rvid_effective_period_range = 2;
  if (this->has_rvid_effective_period_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rvid_effective_period_range_);
  }

  // .data_collection_configuration_request.StartUpDelay startup_delay = 13;
  if (this->has_startup_delay()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *startup_delay_);
  }

  // .data_collection_configuration_request.EndPointUncertainty end_point_uncertainity = 14;
  if (this->has_end_point_uncertainity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_point_uncertainity_);
  }

  // .data_collection_configuration_request.DataRecordingGap data_recording_gap = 15;
  if (this->has_data_recording_gap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_recording_gap_);
  }

  // .data_collection_configuration_request.AbsoluteTimeOffset absolute_time_offset = 16;
  if (this->has_absolute_time_offset()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *absolute_time_offset_);
  }

  // .data_collection_configuration_request.Version job_format_version = 17;
  if (this->has_job_format_version()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_format_version_);
  }

  // .data_collection_configuration_request.DataPackageTimeToLive data_package_time_to_live_s = 28;
  if (this->has_data_package_time_to_live_s()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_package_time_to_live_s_);
  }

  // uint32 nossg_allowed = 3;
  if (this->nossg_allowed() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nossg_allowed());
  }

  // uint32 active_thrift_interval_ms = 5;
  if (this->active_thrift_interval_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_thrift_interval_ms());
  }

  // uint32 active_thrift_retry_ms = 6;
  if (this->active_thrift_retry_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_thrift_retry_ms());
  }

  // uint32 active_thrift_connect_timeout_ms = 7;
  if (this->active_thrift_connect_timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_thrift_connect_timeout_ms());
  }

  // uint32 active_thrift_response_timeout_ms = 8;
  if (this->active_thrift_response_timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_active_thrift_response_timeout_ms());
  }

  // uint32 upload_interval = 9;
  if (this->upload_interval() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_upload_interval());
  }

  // uint32 stf_buffer_size = 10;
  if (this->stf_buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stf_buffer_size());
  }

  // bool enable_active_thrift = 4;
  if (this->enable_active_thrift() != 0) {
    total_size += 1 + 1;
  }

  // bool record_vin = 11;
  if (this->record_vin() != 0) {
    total_size += 1 + 1;
  }

  // bool persist_request = 12;
  if (this->persist_request() != 0) {
    total_size += 1 + 1;
  }

  // bool record_tzoffset = 19;
  if (this->record_tzoffset() != 0) {
    total_size += 2 + 1;
  }

  // .data_collection_configuration_request.RelativeTimeStampCaptureEnum relative_time_stamp_capture = 18;
  if (this->relative_time_stamp_capture() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_relative_time_stamp_capture());
  }

  // bool record_file_counter = 20;
  if (this->record_file_counter() != 0) {
    total_size += 2 + 1;
  }

  // bool record_session_id = 21;
  if (this->record_session_id() != 0) {
    total_size += 2 + 1;
  }

  // bool record_rvid = 22;
  if (this->record_rvid() != 0) {
    total_size += 2 + 1;
  }

  // bool record_ecu_info = 23;
  if (this->record_ecu_info() != 0) {
    total_size += 2 + 1;
  }

  // bool record_market_info = 24;
  if (this->record_market_info() != 0) {
    total_size += 2 + 1;
  }

  // uint32 job_priority = 25;
  if (this->job_priority() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_job_priority());
  }

  // .data_collection_configuration_request.UploadChannel upload_channel = 29;
  if (this->upload_channel() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_upload_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCollectionJob_JobConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.DataCollectionJob.JobConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCollectionJob_JobConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataCollectionJob_JobConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.DataCollectionJob.JobConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.DataCollectionJob.JobConfig)
    MergeFrom(*source);
  }
}

void DataCollectionJob_JobConfig::MergeFrom(const DataCollectionJob_JobConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.DataCollectionJob.JobConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_properties_.MergeFrom(from.device_properties_);
  debug_information_.MergeFrom(from.debug_information_);
  if (from.job_uuid().size() > 0) {

    job_uuid_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.job_uuid_);
  }
  if (from.has_rvid_effective_period_range()) {
    _internal_mutable_rvid_effective_period_range()->::data_collection_configuration_request::RvidEffectivePeriod::MergeFrom(from._internal_rvid_effective_period_range());
  }
  if (from.has_startup_delay()) {
    _internal_mutable_startup_delay()->::data_collection_configuration_request::StartUpDelay::MergeFrom(from._internal_startup_delay());
  }
  if (from.has_end_point_uncertainity()) {
    _internal_mutable_end_point_uncertainity()->::data_collection_configuration_request::EndPointUncertainty::MergeFrom(from._internal_end_point_uncertainity());
  }
  if (from.has_data_recording_gap()) {
    _internal_mutable_data_recording_gap()->::data_collection_configuration_request::DataRecordingGap::MergeFrom(from._internal_data_recording_gap());
  }
  if (from.has_absolute_time_offset()) {
    _internal_mutable_absolute_time_offset()->::data_collection_configuration_request::AbsoluteTimeOffset::MergeFrom(from._internal_absolute_time_offset());
  }
  if (from.has_job_format_version()) {
    _internal_mutable_job_format_version()->::data_collection_configuration_request::Version::MergeFrom(from._internal_job_format_version());
  }
  if (from.has_data_package_time_to_live_s()) {
    _internal_mutable_data_package_time_to_live_s()->::data_collection_configuration_request::DataPackageTimeToLive::MergeFrom(from._internal_data_package_time_to_live_s());
  }
  if (from.nossg_allowed() != 0) {
    _internal_set_nossg_allowed(from._internal_nossg_allowed());
  }
  if (from.active_thrift_interval_ms() != 0) {
    _internal_set_active_thrift_interval_ms(from._internal_active_thrift_interval_ms());
  }
  if (from.active_thrift_retry_ms() != 0) {
    _internal_set_active_thrift_retry_ms(from._internal_active_thrift_retry_ms());
  }
  if (from.active_thrift_connect_timeout_ms() != 0) {
    _internal_set_active_thrift_connect_timeout_ms(from._internal_active_thrift_connect_timeout_ms());
  }
  if (from.active_thrift_response_timeout_ms() != 0) {
    _internal_set_active_thrift_response_timeout_ms(from._internal_active_thrift_response_timeout_ms());
  }
  if (from.upload_interval() != 0) {
    _internal_set_upload_interval(from._internal_upload_interval());
  }
  if (from.stf_buffer_size() != 0) {
    _internal_set_stf_buffer_size(from._internal_stf_buffer_size());
  }
  if (from.enable_active_thrift() != 0) {
    _internal_set_enable_active_thrift(from._internal_enable_active_thrift());
  }
  if (from.record_vin() != 0) {
    _internal_set_record_vin(from._internal_record_vin());
  }
  if (from.persist_request() != 0) {
    _internal_set_persist_request(from._internal_persist_request());
  }
  if (from.record_tzoffset() != 0) {
    _internal_set_record_tzoffset(from._internal_record_tzoffset());
  }
  if (from.relative_time_stamp_capture() != 0) {
    _internal_set_relative_time_stamp_capture(from._internal_relative_time_stamp_capture());
  }
  if (from.record_file_counter() != 0) {
    _internal_set_record_file_counter(from._internal_record_file_counter());
  }
  if (from.record_session_id() != 0) {
    _internal_set_record_session_id(from._internal_record_session_id());
  }
  if (from.record_rvid() != 0) {
    _internal_set_record_rvid(from._internal_record_rvid());
  }
  if (from.record_ecu_info() != 0) {
    _internal_set_record_ecu_info(from._internal_record_ecu_info());
  }
  if (from.record_market_info() != 0) {
    _internal_set_record_market_info(from._internal_record_market_info());
  }
  if (from.job_priority() != 0) {
    _internal_set_job_priority(from._internal_job_priority());
  }
  if (from.upload_channel() != 0) {
    _internal_set_upload_channel(from._internal_upload_channel());
  }
}

void DataCollectionJob_JobConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.DataCollectionJob.JobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCollectionJob_JobConfig::CopyFrom(const DataCollectionJob_JobConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.DataCollectionJob.JobConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCollectionJob_JobConfig::IsInitialized() const {
  return true;
}

void DataCollectionJob_JobConfig::InternalSwap(DataCollectionJob_JobConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  device_properties_.InternalSwap(&other->device_properties_);
  debug_information_.InternalSwap(&other->debug_information_);
  job_uuid_.Swap(&other->job_uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rvid_effective_period_range_, other->rvid_effective_period_range_);
  swap(startup_delay_, other->startup_delay_);
  swap(end_point_uncertainity_, other->end_point_uncertainity_);
  swap(data_recording_gap_, other->data_recording_gap_);
  swap(absolute_time_offset_, other->absolute_time_offset_);
  swap(job_format_version_, other->job_format_version_);
  swap(data_package_time_to_live_s_, other->data_package_time_to_live_s_);
  swap(nossg_allowed_, other->nossg_allowed_);
  swap(active_thrift_interval_ms_, other->active_thrift_interval_ms_);
  swap(active_thrift_retry_ms_, other->active_thrift_retry_ms_);
  swap(active_thrift_connect_timeout_ms_, other->active_thrift_connect_timeout_ms_);
  swap(active_thrift_response_timeout_ms_, other->active_thrift_response_timeout_ms_);
  swap(upload_interval_, other->upload_interval_);
  swap(stf_buffer_size_, other->stf_buffer_size_);
  swap(enable_active_thrift_, other->enable_active_thrift_);
  swap(record_vin_, other->record_vin_);
  swap(persist_request_, other->persist_request_);
  swap(record_tzoffset_, other->record_tzoffset_);
  swap(relative_time_stamp_capture_, other->relative_time_stamp_capture_);
  swap(record_file_counter_, other->record_file_counter_);
  swap(record_session_id_, other->record_session_id_);
  swap(record_rvid_, other->record_rvid_);
  swap(record_ecu_info_, other->record_ecu_info_);
  swap(record_market_info_, other->record_market_info_);
  swap(job_priority_, other->job_priority_);
  swap(upload_channel_, other->upload_channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCollectionJob_JobConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataCollectionJob::InitAsDefaultInstance() {
  ::data_collection_configuration_request::_DataCollectionJob_default_instance_._instance.get_mutable()->job_config_ = const_cast< ::data_collection_configuration_request::DataCollectionJob_JobConfig*>(
      ::data_collection_configuration_request::DataCollectionJob_JobConfig::internal_default_instance());
  ::data_collection_configuration_request::_DataCollectionJob_default_instance_._instance.get_mutable()->validity_restrictions_ = const_cast< ::data_collection_configuration_request::JobValidityRestrictions*>(
      ::data_collection_configuration_request::JobValidityRestrictions::internal_default_instance());
  ::data_collection_configuration_request::_DataCollectionJob_default_instance_._instance.get_mutable()->action_ = const_cast< ::data_collection_configuration_request::CollectionAction*>(
      ::data_collection_configuration_request::CollectionAction::internal_default_instance());
  ::data_collection_configuration_request::_DataCollectionJob_default_instance_._instance.get_mutable()->termination_conditions_ = const_cast< ::data_collection_configuration_request::JobTerminationConditions*>(
      ::data_collection_configuration_request::JobTerminationConditions::internal_default_instance());
}
class DataCollectionJob::_Internal {
 public:
  static const ::data_collection_configuration_request::DataCollectionJob_JobConfig& job_config(const DataCollectionJob* msg);
  static const ::data_collection_configuration_request::JobValidityRestrictions& validity_restrictions(const DataCollectionJob* msg);
  static const ::data_collection_configuration_request::CollectionAction& action(const DataCollectionJob* msg);
  static const ::data_collection_configuration_request::JobTerminationConditions& termination_conditions(const DataCollectionJob* msg);
};

const ::data_collection_configuration_request::DataCollectionJob_JobConfig&
DataCollectionJob::_Internal::job_config(const DataCollectionJob* msg) {
  return *msg->job_config_;
}
const ::data_collection_configuration_request::JobValidityRestrictions&
DataCollectionJob::_Internal::validity_restrictions(const DataCollectionJob* msg) {
  return *msg->validity_restrictions_;
}
const ::data_collection_configuration_request::CollectionAction&
DataCollectionJob::_Internal::action(const DataCollectionJob* msg) {
  return *msg->action_;
}
const ::data_collection_configuration_request::JobTerminationConditions&
DataCollectionJob::_Internal::termination_conditions(const DataCollectionJob* msg) {
  return *msg->termination_conditions_;
}
DataCollectionJob::DataCollectionJob()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:data_collection_configuration_request.DataCollectionJob)
}
DataCollectionJob::DataCollectionJob(const DataCollectionJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_job_config()) {
    job_config_ = new ::data_collection_configuration_request::DataCollectionJob_JobConfig(*from.job_config_);
  } else {
    job_config_ = nullptr;
  }
  if (from._internal_has_validity_restrictions()) {
    validity_restrictions_ = new ::data_collection_configuration_request::JobValidityRestrictions(*from.validity_restrictions_);
  } else {
    validity_restrictions_ = nullptr;
  }
  if (from._internal_has_action()) {
    action_ = new ::data_collection_configuration_request::CollectionAction(*from.action_);
  } else {
    action_ = nullptr;
  }
  if (from._internal_has_termination_conditions()) {
    termination_conditions_ = new ::data_collection_configuration_request::JobTerminationConditions(*from.termination_conditions_);
  } else {
    termination_conditions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:data_collection_configuration_request.DataCollectionJob)
}

void DataCollectionJob::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataCollectionJob_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  ::memset(&job_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&termination_conditions_) -
      reinterpret_cast<char*>(&job_config_)) + sizeof(termination_conditions_));
}

DataCollectionJob::~DataCollectionJob() {
  // @@protoc_insertion_point(destructor:data_collection_configuration_request.DataCollectionJob)
  SharedDtor();
}

void DataCollectionJob::SharedDtor() {
  if (this != internal_default_instance()) delete job_config_;
  if (this != internal_default_instance()) delete validity_restrictions_;
  if (this != internal_default_instance()) delete action_;
  if (this != internal_default_instance()) delete termination_conditions_;
}

void DataCollectionJob::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataCollectionJob& DataCollectionJob::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataCollectionJob_data_5fcollection_5fconfiguration_5frequest_2eproto.base);
  return *internal_default_instance();
}


void DataCollectionJob::Clear() {
// @@protoc_insertion_point(message_clear_start:data_collection_configuration_request.DataCollectionJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && job_config_ != nullptr) {
    delete job_config_;
  }
  job_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && validity_restrictions_ != nullptr) {
    delete validity_restrictions_;
  }
  validity_restrictions_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && termination_conditions_ != nullptr) {
    delete termination_conditions_;
  }
  termination_conditions_ = nullptr;
  _internal_metadata_.Clear();
}

const char* DataCollectionJob::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .data_collection_configuration_request.DataCollectionJob.JobConfig job_config = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_job_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.JobValidityRestrictions validity_restrictions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validity_restrictions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.CollectionAction action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_action(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .data_collection_configuration_request.JobTerminationConditions termination_conditions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_termination_conditions(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataCollectionJob::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:data_collection_configuration_request.DataCollectionJob)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .data_collection_configuration_request.DataCollectionJob.JobConfig job_config = 1;
  if (this->has_job_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::job_config(this), target, stream);
  }

  // .data_collection_configuration_request.JobValidityRestrictions validity_restrictions = 2;
  if (this->has_validity_restrictions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::validity_restrictions(this), target, stream);
  }

  // .data_collection_configuration_request.CollectionAction action = 3;
  if (this->has_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::action(this), target, stream);
  }

  // .data_collection_configuration_request.JobTerminationConditions termination_conditions = 4;
  if (this->has_termination_conditions()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::termination_conditions(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:data_collection_configuration_request.DataCollectionJob)
  return target;
}

size_t DataCollectionJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:data_collection_configuration_request.DataCollectionJob)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .data_collection_configuration_request.DataCollectionJob.JobConfig job_config = 1;
  if (this->has_job_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *job_config_);
  }

  // .data_collection_configuration_request.JobValidityRestrictions validity_restrictions = 2;
  if (this->has_validity_restrictions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validity_restrictions_);
  }

  // .data_collection_configuration_request.CollectionAction action = 3;
  if (this->has_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *action_);
  }

  // .data_collection_configuration_request.JobTerminationConditions termination_conditions = 4;
  if (this->has_termination_conditions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *termination_conditions_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataCollectionJob::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:data_collection_configuration_request.DataCollectionJob)
  GOOGLE_DCHECK_NE(&from, this);
  const DataCollectionJob* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataCollectionJob>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:data_collection_configuration_request.DataCollectionJob)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:data_collection_configuration_request.DataCollectionJob)
    MergeFrom(*source);
  }
}

void DataCollectionJob::MergeFrom(const DataCollectionJob& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:data_collection_configuration_request.DataCollectionJob)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job_config()) {
    _internal_mutable_job_config()->::data_collection_configuration_request::DataCollectionJob_JobConfig::MergeFrom(from._internal_job_config());
  }
  if (from.has_validity_restrictions()) {
    _internal_mutable_validity_restrictions()->::data_collection_configuration_request::JobValidityRestrictions::MergeFrom(from._internal_validity_restrictions());
  }
  if (from.has_action()) {
    _internal_mutable_action()->::data_collection_configuration_request::CollectionAction::MergeFrom(from._internal_action());
  }
  if (from.has_termination_conditions()) {
    _internal_mutable_termination_conditions()->::data_collection_configuration_request::JobTerminationConditions::MergeFrom(from._internal_termination_conditions());
  }
}

void DataCollectionJob::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:data_collection_configuration_request.DataCollectionJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataCollectionJob::CopyFrom(const DataCollectionJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:data_collection_configuration_request.DataCollectionJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataCollectionJob::IsInitialized() const {
  return true;
}

void DataCollectionJob::InternalSwap(DataCollectionJob* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(job_config_, other->job_config_);
  swap(validity_restrictions_, other->validity_restrictions_);
  swap(action_, other->action_);
  swap(termination_conditions_, other->termination_conditions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataCollectionJob::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace data_collection_configuration_request
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::Version* Arena::CreateMaybeMessage< ::data_collection_configuration_request::Version >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::Version >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::CollectionExtents* Arena::CreateMaybeMessage< ::data_collection_configuration_request::CollectionExtents >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::CollectionExtents >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::TimestampInterval* Arena::CreateMaybeMessage< ::data_collection_configuration_request::TimestampInterval >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::TimestampInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::Uint32Range* Arena::CreateMaybeMessage< ::data_collection_configuration_request::Uint32Range >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::Uint32Range >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::GeoLocation* Arena::CreateMaybeMessage< ::data_collection_configuration_request::GeoLocation >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::GeoLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::GeoRectangle* Arena::CreateMaybeMessage< ::data_collection_configuration_request::GeoRectangle >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::GeoRectangle >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::GeoCircle* Arena::CreateMaybeMessage< ::data_collection_configuration_request::GeoCircle >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::GeoCircle >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::GeoPolygon* Arena::CreateMaybeMessage< ::data_collection_configuration_request::GeoPolygon >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::GeoPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::GeoCorridor* Arena::CreateMaybeMessage< ::data_collection_configuration_request::GeoCorridor >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::GeoCorridor >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::CompositeTimeRange* Arena::CreateMaybeMessage< ::data_collection_configuration_request::CompositeTimeRange >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::CompositeTimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::CompositeLocation* Arena::CreateMaybeMessage< ::data_collection_configuration_request::CompositeLocation >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::CompositeLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::MapRestriction_RoadAttribute* Arena::CreateMaybeMessage< ::data_collection_configuration_request::MapRestriction_RoadAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::MapRestriction_RoadAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::MapRestriction_FunctionalRoadClassRange* Arena::CreateMaybeMessage< ::data_collection_configuration_request::MapRestriction_FunctionalRoadClassRange >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::MapRestriction_FunctionalRoadClassRange >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::MapRestriction* Arena::CreateMaybeMessage< ::data_collection_configuration_request::MapRestriction >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::MapRestriction >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::SystemStates* Arena::CreateMaybeMessage< ::data_collection_configuration_request::SystemStates >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::SystemStates >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::JobValidityRestrictions* Arena::CreateMaybeMessage< ::data_collection_configuration_request::JobValidityRestrictions >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::JobValidityRestrictions >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::JobTerminationConditions* Arena::CreateMaybeMessage< ::data_collection_configuration_request::JobTerminationConditions >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::JobTerminationConditions >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::TimeDeltaTriggerEvent* Arena::CreateMaybeMessage< ::data_collection_configuration_request::TimeDeltaTriggerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::TimeDeltaTriggerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::DistanceDeltaTriggerEvent* Arena::CreateMaybeMessage< ::data_collection_configuration_request::DistanceDeltaTriggerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::DistanceDeltaTriggerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::SignalChangeTriggerEvent* Arena::CreateMaybeMessage< ::data_collection_configuration_request::SignalChangeTriggerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::SignalChangeTriggerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::SignalTransitionTriggerEvent* Arena::CreateMaybeMessage< ::data_collection_configuration_request::SignalTransitionTriggerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::SignalTransitionTriggerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::SignalCollectionCount* Arena::CreateMaybeMessage< ::data_collection_configuration_request::SignalCollectionCount >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::SignalCollectionCount >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::GeoRegionTriggerEvent* Arena::CreateMaybeMessage< ::data_collection_configuration_request::GeoRegionTriggerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::GeoRegionTriggerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::CollectAfterTriggerEvent* Arena::CreateMaybeMessage< ::data_collection_configuration_request::CollectAfterTriggerEvent >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::CollectAfterTriggerEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::GeoAction* Arena::CreateMaybeMessage< ::data_collection_configuration_request::GeoAction >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::GeoAction >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::KeyValuePair* Arena::CreateMaybeMessage< ::data_collection_configuration_request::KeyValuePair >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::KeyValuePair >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::TriggerAnnotationID* Arena::CreateMaybeMessage< ::data_collection_configuration_request::TriggerAnnotationID >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::TriggerAnnotationID >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::Trigger* Arena::CreateMaybeMessage< ::data_collection_configuration_request::Trigger >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::Trigger >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::CollectionAction* Arena::CreateMaybeMessage< ::data_collection_configuration_request::CollectionAction >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::CollectionAction >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::StartUpDelay* Arena::CreateMaybeMessage< ::data_collection_configuration_request::StartUpDelay >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::StartUpDelay >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::EndPointUncertainty* Arena::CreateMaybeMessage< ::data_collection_configuration_request::EndPointUncertainty >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::EndPointUncertainty >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::DataRecordingGap* Arena::CreateMaybeMessage< ::data_collection_configuration_request::DataRecordingGap >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::DataRecordingGap >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::AbsoluteTimeOffset* Arena::CreateMaybeMessage< ::data_collection_configuration_request::AbsoluteTimeOffset >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::AbsoluteTimeOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::CollectionTask* Arena::CreateMaybeMessage< ::data_collection_configuration_request::CollectionTask >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::CollectionTask >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::ListOfSNA* Arena::CreateMaybeMessage< ::data_collection_configuration_request::ListOfSNA >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::ListOfSNA >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::RawValueFilter* Arena::CreateMaybeMessage< ::data_collection_configuration_request::RawValueFilter >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::RawValueFilter >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::ValueRange* Arena::CreateMaybeMessage< ::data_collection_configuration_request::ValueRange >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::ValueRange >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::ValueInterval* Arena::CreateMaybeMessage< ::data_collection_configuration_request::ValueInterval >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::ValueInterval >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::Datapoint* Arena::CreateMaybeMessage< ::data_collection_configuration_request::Datapoint >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::Datapoint >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::Processing_Toolbox_Definition* Arena::CreateMaybeMessage< ::data_collection_configuration_request::Processing_Toolbox_Definition >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::Processing_Toolbox_Definition >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::ToolInputParameter* Arena::CreateMaybeMessage< ::data_collection_configuration_request::ToolInputParameter >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::ToolInputParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::DatapointsConfiguration* Arena::CreateMaybeMessage< ::data_collection_configuration_request::DatapointsConfiguration >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::DatapointsConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::RvidEffectivePeriod* Arena::CreateMaybeMessage< ::data_collection_configuration_request::RvidEffectivePeriod >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::RvidEffectivePeriod >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::DataPackageTimeToLive* Arena::CreateMaybeMessage< ::data_collection_configuration_request::DataPackageTimeToLive >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::DataPackageTimeToLive >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::DataCollectionJob_JobConfig* Arena::CreateMaybeMessage< ::data_collection_configuration_request::DataCollectionJob_JobConfig >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::DataCollectionJob_JobConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::data_collection_configuration_request::DataCollectionJob* Arena::CreateMaybeMessage< ::data_collection_configuration_request::DataCollectionJob >(Arena* arena) {
  return Arena::CreateInternal< ::data_collection_configuration_request::DataCollectionJob >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
